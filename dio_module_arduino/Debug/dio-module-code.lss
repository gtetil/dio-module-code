
dio-module-code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000234  00800100  00001900  00001994  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001900  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d3  00800334  00800334  00001bc8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001bc8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001bf8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000540  00000000  00000000  00001c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c7e1  00000000  00000000  00002178  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002350  00000000  00000000  0000e959  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003354  00000000  00000000  00010ca9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001224  00000000  00000000  00014000  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000031af  00000000  00000000  00015224  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000713d  00000000  00000000  000183d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004d8  00000000  00000000  0001f510  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 82 00 	jmp	0x104	; 0x104 <__ctors_end>
       4:	0c 94 55 02 	jmp	0x4aa	; 0x4aa <__vector_1>
       8:	0c 94 7c 02 	jmp	0x4f8	; 0x4f8 <__vector_2>
       c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      10:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      14:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      18:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      1c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      20:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      24:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      28:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      2c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      30:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      34:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      38:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      3c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      40:	0c 94 a3 02 	jmp	0x546	; 0x546 <__vector_16>
      44:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      48:	0c 94 cb 0a 	jmp	0x1596	; 0x1596 <__vector_18>
      4c:	0c 94 fd 0a 	jmp	0x15fa	; 0x15fa <__vector_19>
      50:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      54:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      58:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      5c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      60:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      64:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      68:	57 06       	cpc	r5, r23
      6a:	f0 05       	cpc	r31, r0
      6c:	5b 06       	cpc	r5, r27
      6e:	f3 05       	cpc	r31, r3
      70:	f6 05       	cpc	r31, r6
      72:	f9 05       	cpc	r31, r9
      74:	fd 05       	cpc	r31, r13
      76:	00 06       	cpc	r0, r16
      78:	03 06       	cpc	r0, r19
      7a:	06 06       	cpc	r0, r22
      7c:	09 06       	cpc	r0, r25
      7e:	0c 06       	cpc	r0, r28
      80:	0f 06       	cpc	r0, r31
      82:	12 06       	cpc	r1, r18
      84:	15 06       	cpc	r1, r21
      86:	19 06       	cpc	r1, r25
      88:	1c 06       	cpc	r1, r28
      8a:	1f 06       	cpc	r1, r31
      8c:	5f 06       	cpc	r5, r31
      8e:	2d 06       	cpc	r2, r29
      90:	30 06       	cpc	r3, r16
      92:	55 06       	cpc	r5, r21
      94:	33 06       	cpc	r3, r19
      96:	55 06       	cpc	r5, r21
      98:	37 06       	cpc	r3, r23
      9a:	3a 06       	cpc	r3, r26
      9c:	3e 06       	cpc	r3, r30
      9e:	55 06       	cpc	r5, r21
      a0:	55 06       	cpc	r5, r21
      a2:	41 06       	cpc	r4, r17
      a4:	45 06       	cpc	r4, r21
      a6:	48 06       	cpc	r4, r24
      a8:	4c 06       	cpc	r4, r28
      aa:	4f 06       	cpc	r4, r31
      ac:	55 06       	cpc	r5, r21
      ae:	52 06       	cpc	r5, r18

000000b0 <__trampolines_end>:
      b0:	00 00       	nop
      b2:	00 08       	sbc	r0, r0
      b4:	00 02       	muls	r16, r16
      b6:	01 00       	.word	0x0001	; ????
      b8:	00 03       	mulsu	r16, r16
      ba:	04 07       	cpc	r16, r20
	...

000000c4 <digital_pin_to_bit_mask_PGM>:
      c4:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      d4:	04 08 10 20                                         ... 

000000d8 <digital_pin_to_port_PGM>:
      d8:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      e8:	03 03 03 03                                         ....

000000ec <port_to_output_PGM>:
      ec:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000f6 <port_to_mode_PGM>:
      f6:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000100 <__ctors_start>:
     100:	14 02       	muls	r17, r20
     102:	2d 0b       	sbc	r18, r29

00000104 <__ctors_end>:
     104:	11 24       	eor	r1, r1
     106:	1f be       	out	0x3f, r1	; 63
     108:	cf ef       	ldi	r28, 0xFF	; 255
     10a:	d8 e0       	ldi	r29, 0x08	; 8
     10c:	de bf       	out	0x3e, r29	; 62
     10e:	cd bf       	out	0x3d, r28	; 61

00000110 <__do_copy_data>:
     110:	13 e0       	ldi	r17, 0x03	; 3
     112:	a0 e0       	ldi	r26, 0x00	; 0
     114:	b1 e0       	ldi	r27, 0x01	; 1
     116:	e0 e0       	ldi	r30, 0x00	; 0
     118:	f9 e1       	ldi	r31, 0x19	; 25
     11a:	02 c0       	rjmp	.+4      	; 0x120 <__do_copy_data+0x10>
     11c:	05 90       	lpm	r0, Z+
     11e:	0d 92       	st	X+, r0
     120:	a4 33       	cpi	r26, 0x34	; 52
     122:	b1 07       	cpc	r27, r17
     124:	d9 f7       	brne	.-10     	; 0x11c <__do_copy_data+0xc>

00000126 <__do_clear_bss>:
     126:	24 e0       	ldi	r18, 0x04	; 4
     128:	a4 e3       	ldi	r26, 0x34	; 52
     12a:	b3 e0       	ldi	r27, 0x03	; 3
     12c:	01 c0       	rjmp	.+2      	; 0x130 <.do_clear_bss_start>

0000012e <.do_clear_bss_loop>:
     12e:	1d 92       	st	X+, r1

00000130 <.do_clear_bss_start>:
     130:	a7 30       	cpi	r26, 0x07	; 7
     132:	b2 07       	cpc	r27, r18
     134:	e1 f7       	brne	.-8      	; 0x12e <.do_clear_bss_loop>

00000136 <__do_global_ctors>:
     136:	10 e0       	ldi	r17, 0x00	; 0
     138:	c2 e8       	ldi	r28, 0x82	; 130
     13a:	d0 e0       	ldi	r29, 0x00	; 0
     13c:	04 c0       	rjmp	.+8      	; 0x146 <__do_global_ctors+0x10>
     13e:	21 97       	sbiw	r28, 0x01	; 1
     140:	fe 01       	movw	r30, r28
     142:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <__tablejump2__>
     146:	c0 38       	cpi	r28, 0x80	; 128
     148:	d1 07       	cpc	r29, r17
     14a:	c9 f7       	brne	.-14     	; 0x13e <__do_global_ctors+0x8>
     14c:	0e 94 25 02 	call	0x44a	; 0x44a <main>
     150:	0c 94 7e 0c 	jmp	0x18fc	; 0x18fc <_exit>

00000154 <__bad_interrupt>:
     154:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000158 <_Z11MCP2515_ISRv>:
	
}

void MCP2515_ISR()
{
	flagRecv = 1;
     158:	81 e0       	ldi	r24, 0x01	; 1
     15a:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <flagRecv>
     15e:	08 95       	ret

00000160 <_ZL19set_digital_outputsh>:
			PORTD &= ~(1 << pin);  // turn off output
		}
	}
}

static inline void set_digital_outputs(uint8_t do_data) {
     160:	cf 93       	push	r28
     162:	df 93       	push	r29
     164:	00 d0       	rcall	.+0      	; 0x166 <_ZL19set_digital_outputsh+0x6>
     166:	00 d0       	rcall	.+0      	; 0x168 <_ZL19set_digital_outputsh+0x8>
     168:	00 d0       	rcall	.+0      	; 0x16a <_ZL19set_digital_outputsh+0xa>
     16a:	cd b7       	in	r28, 0x3d	; 61
     16c:	de b7       	in	r29, 0x3e	; 62
     16e:	89 83       	std	Y+1, r24	; 0x01
	CAN_output_address = 0x010 | base_address;
}

static inline void set_output(uint8_t do_data, uint8_t ch_from_can, uint8_t port, uint8_t pin) {
	
	if (bit_is_set(do_data, ch_from_can)) {
     170:	99 81       	ldd	r25, Y+1	; 0x01
     172:	90 ff       	sbrs	r25, 0
     174:	02 c0       	rjmp	.+4      	; 0x17a <_ZL19set_digital_outputsh+0x1a>
		if (port == 0) {  // port 0 represents PORTB
			PORTB |= (1 << pin);  // turn on output
     176:	28 9a       	sbi	0x05, 0	; 5
     178:	01 c0       	rjmp	.+2      	; 0x17c <_ZL19set_digital_outputsh+0x1c>
			PORTD |= (1 << pin);  // turn on output
		}
	}
	else {
		if (port == 0) {
			PORTB &= ~(1 << pin);  // turn off output
     17a:	28 98       	cbi	0x05, 0	; 5
     17c:	8a 83       	std	Y+2, r24	; 0x02
	CAN_output_address = 0x010 | base_address;
}

static inline void set_output(uint8_t do_data, uint8_t ch_from_can, uint8_t port, uint8_t pin) {
	
	if (bit_is_set(do_data, ch_from_can)) {
     17e:	9a 81       	ldd	r25, Y+2	; 0x02
     180:	91 ff       	sbrs	r25, 1
     182:	02 c0       	rjmp	.+4      	; 0x188 <_ZL19set_digital_outputsh+0x28>
		if (port == 0) {  // port 0 represents PORTB
			PORTB |= (1 << pin);  // turn on output
     184:	29 9a       	sbi	0x05, 1	; 5
     186:	01 c0       	rjmp	.+2      	; 0x18a <_ZL19set_digital_outputsh+0x2a>
			PORTD |= (1 << pin);  // turn on output
		}
	}
	else {
		if (port == 0) {
			PORTB &= ~(1 << pin);  // turn off output
     188:	29 98       	cbi	0x05, 1	; 5
     18a:	8b 83       	std	Y+3, r24	; 0x03
	CAN_output_address = 0x010 | base_address;
}

static inline void set_output(uint8_t do_data, uint8_t ch_from_can, uint8_t port, uint8_t pin) {
	
	if (bit_is_set(do_data, ch_from_can)) {
     18c:	9b 81       	ldd	r25, Y+3	; 0x03
     18e:	92 ff       	sbrs	r25, 2
     190:	02 c0       	rjmp	.+4      	; 0x196 <_ZL19set_digital_outputsh+0x36>
		if (port == 0) {  // port 0 represents PORTB
			PORTB |= (1 << pin);  // turn on output
		}
		else {  // anything else represents PORTD
			PORTD |= (1 << pin);  // turn on output
     192:	5b 9a       	sbi	0x0b, 3	; 11
     194:	01 c0       	rjmp	.+2      	; 0x198 <_ZL19set_digital_outputsh+0x38>
	else {
		if (port == 0) {
			PORTB &= ~(1 << pin);  // turn off output
		}
		else {
			PORTD &= ~(1 << pin);  // turn off output
     196:	5b 98       	cbi	0x0b, 3	; 11
     198:	8c 83       	std	Y+4, r24	; 0x04
	CAN_output_address = 0x010 | base_address;
}

static inline void set_output(uint8_t do_data, uint8_t ch_from_can, uint8_t port, uint8_t pin) {
	
	if (bit_is_set(do_data, ch_from_can)) {
     19a:	9c 81       	ldd	r25, Y+4	; 0x04
     19c:	93 ff       	sbrs	r25, 3
     19e:	02 c0       	rjmp	.+4      	; 0x1a4 <_ZL19set_digital_outputsh+0x44>
		if (port == 0) {  // port 0 represents PORTB
			PORTB |= (1 << pin);  // turn on output
		}
		else {  // anything else represents PORTD
			PORTD |= (1 << pin);  // turn on output
     1a0:	5c 9a       	sbi	0x0b, 4	; 11
     1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <_ZL19set_digital_outputsh+0x46>
	else {
		if (port == 0) {
			PORTB &= ~(1 << pin);  // turn off output
		}
		else {
			PORTD &= ~(1 << pin);  // turn off output
     1a4:	5c 98       	cbi	0x0b, 4	; 11
     1a6:	8d 83       	std	Y+5, r24	; 0x05
	CAN_output_address = 0x010 | base_address;
}

static inline void set_output(uint8_t do_data, uint8_t ch_from_can, uint8_t port, uint8_t pin) {
	
	if (bit_is_set(do_data, ch_from_can)) {
     1a8:	9d 81       	ldd	r25, Y+5	; 0x05
     1aa:	94 ff       	sbrs	r25, 4
     1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <_ZL19set_digital_outputsh+0x52>
		if (port == 0) {  // port 0 represents PORTB
			PORTB |= (1 << pin);  // turn on output
		}
		else {  // anything else represents PORTD
			PORTD |= (1 << pin);  // turn on output
     1ae:	5d 9a       	sbi	0x0b, 5	; 11
     1b0:	01 c0       	rjmp	.+2      	; 0x1b4 <_ZL19set_digital_outputsh+0x54>
	else {
		if (port == 0) {
			PORTB &= ~(1 << pin);  // turn off output
		}
		else {
			PORTD &= ~(1 << pin);  // turn off output
     1b2:	5d 98       	cbi	0x0b, 5	; 11
     1b4:	8e 83       	std	Y+6, r24	; 0x06
	CAN_output_address = 0x010 | base_address;
}

static inline void set_output(uint8_t do_data, uint8_t ch_from_can, uint8_t port, uint8_t pin) {
	
	if (bit_is_set(do_data, ch_from_can)) {
     1b6:	8e 81       	ldd	r24, Y+6	; 0x06
     1b8:	85 ff       	sbrs	r24, 5
     1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <_ZL19set_digital_outputsh+0x60>
		if (port == 0) {  // port 0 represents PORTB
			PORTB |= (1 << pin);  // turn on output
		}
		else {  // anything else represents PORTD
			PORTD |= (1 << pin);  // turn on output
     1bc:	5e 9a       	sbi	0x0b, 6	; 11
     1be:	01 c0       	rjmp	.+2      	; 0x1c2 <_ZL19set_digital_outputsh+0x62>
	else {
		if (port == 0) {
			PORTB &= ~(1 << pin);  // turn off output
		}
		else {
			PORTD &= ~(1 << pin);  // turn off output
     1c0:	5e 98       	cbi	0x0b, 6	; 11
	set_output(do_data, 2, 1, PIND3); // set output PD3, DO2
	set_output(do_data, 3, 1, PIND4); // set output PD4, DO3
	set_output(do_data, 4, 1, PIND5); // set output PD5, DO4
	set_output(do_data, 5, 1, PIND6); // set output PD6, DO5
	
}
     1c2:	26 96       	adiw	r28, 0x06	; 6
     1c4:	0f b6       	in	r0, 0x3f	; 63
     1c6:	f8 94       	cli
     1c8:	de bf       	out	0x3e, r29	; 62
     1ca:	0f be       	out	0x3f, r0	; 63
     1cc:	cd bf       	out	0x3d, r28	; 61
     1ce:	df 91       	pop	r29
     1d0:	cf 91       	pop	r28
     1d2:	08 95       	ret

000001d4 <_Z14read_ADC_as_DIh>:
	
}

uint8_t read_ADC_as_DI(uint8_t channel) {
	
	ADMUX = (1 << REFS0) | channel;  // set reference AVCC = 5V
     1d4:	80 64       	ori	r24, 0x40	; 64
     1d6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA |= (1<<ADSC);         // start conversion
     1da:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     1de:	80 64       	ori	r24, 0x40	; 64
     1e0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	loop_until_bit_is_clear(ADCSRA,ADSC); // wait for conversion complete
     1e4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     1e8:	86 fd       	sbrc	r24, 6
     1ea:	fc cf       	rjmp	.-8      	; 0x1e4 <_Z14read_ADC_as_DIh+0x10>
	if (ADC > 512) {  // >2.5V
     1ec:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     1f0:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     1f4:	81 e0       	ldi	r24, 0x01	; 1
     1f6:	21 30       	cpi	r18, 0x01	; 1
     1f8:	32 40       	sbci	r19, 0x02	; 2
     1fa:	08 f4       	brcc	.+2      	; 0x1fe <_Z14read_ADC_as_DIh+0x2a>
     1fc:	80 e0       	ldi	r24, 0x00	; 0
		return 1;
	}
	else {
		return 0;
	}
}
     1fe:	08 95       	ret

00000200 <setup>:
uint16_t CAN_input_address;
uint16_t CAN_output_address;

static inline void initOutputs(void) {
	
	DDRB |= (1 << DDB0);  //set PB0 as output DO0
     200:	20 9a       	sbi	0x04, 0	; 4
	DDRB |= (1 << DDB1);  //set PB1 as output DO1
     202:	21 9a       	sbi	0x04, 1	; 4
	DDRD |= (1 << DDD3);  //set PD3 as output DO2
     204:	53 9a       	sbi	0x0a, 3	; 10
	DDRD |= (1 << DDD4);  //set PD4 as output DO3
     206:	54 9a       	sbi	0x0a, 4	; 10
	DDRD |= (1 << DDD5);  //set PD5 as output DO4
     208:	55 9a       	sbi	0x0a, 5	; 10
	DDRD |= (1 << DDD6);  //set PD6 as output DO5
     20a:	56 9a       	sbi	0x0a, 6	; 10
	
}

static inline void initInputs(void) {
	
	DDRC &= ~(1 << PINC0);  //set PINB0 to input, DI0
     20c:	38 98       	cbi	0x07, 0	; 7
	DDRC &= ~(1 << PINC1);  //set PINB1 to input, DI1
     20e:	39 98       	cbi	0x07, 1	; 7
	DDRC &= ~(1 << PINC2);  //set PINB2 to input, DI2
     210:	3a 98       	cbi	0x07, 2	; 7
	DDRC &= ~(1 << PINC3);  //set PINB3 to input, DI3
     212:	3b 98       	cbi	0x07, 3	; 7
	DDRC &= ~(1 << PINC4);  //set PINB4 to input, DI4
     214:	3c 98       	cbi	0x07, 4	; 7
	DDRC &= ~(1 << PINC5);  //set PINB5 to input, DI5
     216:	3d 98       	cbi	0x07, 5	; 7

}

static inline void initADC(void) {
	
	ADCSRA |= (1 << ADPS0);       /* ADC clock prescaler /128 */
     218:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     21c:	81 60       	ori	r24, 0x01	; 1
     21e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADCSRA |= (1 << ADPS1);       /* ADC clock prescaler /128 */
     222:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     226:	82 60       	ori	r24, 0x02	; 2
     228:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADCSRA |= (1 << ADPS2);       /* ADC clock prescaler /128 */
     22c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     230:	84 60       	ori	r24, 0x04	; 4
     232:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADCSRA |= (1 << ADEN);        /* enable ADC */
     236:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     23a:	80 68       	ori	r24, 0x80	; 128
     23c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	}
}

static inline void initCANaddresses(void) {
	//create CAN addresses
	DDRD &= ~(1 << PIND7);  // set PIND7 to input, for CAN ADDR_0
     240:	57 98       	cbi	0x0a, 7	; 10
	PORTD |= (1 << PIND7);  // set PIND7 pull-up resistor
     242:	5f 9a       	sbi	0x0b, 7	; 11
	DDRD &= ~(1 << PIND0);  // set PIND0 to input, for CAN ADDR_2
     244:	50 98       	cbi	0x0a, 0	; 10
	PORTD |= (1 << PIND0);  // set PIND0 pull-up resistor
     246:	58 9a       	sbi	0x0b, 0	; 11
	uint8_t adc7_as_di = !read_ADC_as_DI(7);  // CAN_ADDR_1
     248:	87 e0       	ldi	r24, 0x07	; 7
     24a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_Z14read_ADC_as_DIh>
     24e:	41 e0       	ldi	r20, 0x01	; 1
     250:	81 11       	cpse	r24, r1
     252:	40 e0       	ldi	r20, 0x00	; 0
	uint8_t base_address = ((~PIND & 0b10000000) >> 7) | ((~PIND & 0b00000001) << 2) | (adc7_as_di << 1);
     254:	29 b1       	in	r18, 0x09	; 9
     256:	30 e0       	ldi	r19, 0x00	; 0
     258:	20 95       	com	r18
     25a:	30 95       	com	r19
     25c:	27 fb       	bst	r18, 7
     25e:	33 27       	eor	r19, r19
     260:	30 f9       	bld	r19, 0
     262:	48 9b       	sbis	0x09, 0	; 9
     264:	02 c0       	rjmp	.+4      	; 0x26a <setup+0x6a>
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	01 c0       	rjmp	.+2      	; 0x26c <setup+0x6c>
     26a:	94 e0       	ldi	r25, 0x04	; 4
     26c:	84 2f       	mov	r24, r20
     26e:	88 0f       	add	r24, r24
     270:	83 2b       	or	r24, r19
     272:	89 2b       	or	r24, r25
	CAN_input_address = base_address;
     274:	28 2f       	mov	r18, r24
     276:	08 2e       	mov	r0, r24
     278:	00 0c       	add	r0, r0
     27a:	33 0b       	sbc	r19, r19
     27c:	30 93 37 03 	sts	0x0337, r19	; 0x800337 <CAN_input_address+0x1>
     280:	20 93 36 03 	sts	0x0336, r18	; 0x800336 <CAN_input_address>
	CAN_output_address = 0x010 | base_address;
     284:	80 61       	ori	r24, 0x10	; 16
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	90 93 35 03 	sts	0x0335, r25	; 0x800335 <__data_end+0x1>
     28c:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <__data_end>
	initInputs();
	initADC();
	initCANaddresses();
	
	//CAN setup
	CAN.begin(CAN_500KBPS, MCP_16MHz);
     290:	41 e0       	ldi	r20, 0x01	; 1
     292:	60 e1       	ldi	r22, 0x10	; 16
     294:	87 e4       	ldi	r24, 0x47	; 71
     296:	93 e0       	ldi	r25, 0x03	; 3
     298:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <_ZN7MCP_CAN5beginEhh>
	// attach interrupt
	pinMode(CAN_INT, INPUT);
     29c:	60 e0       	ldi	r22, 0x00	; 0
     29e:	82 e0       	ldi	r24, 0x02	; 2
     2a0:	0e 94 c9 03 	call	0x792	; 0x792 <pinMode>
	attachInterrupt(digitalPinToInterrupt(CAN_INT), MCP2515_ISR, FALLING);
     2a4:	42 e0       	ldi	r20, 0x02	; 2
     2a6:	50 e0       	ldi	r21, 0x00	; 0
     2a8:	6c ea       	ldi	r22, 0xAC	; 172
     2aa:	70 e0       	ldi	r23, 0x00	; 0
     2ac:	80 e0       	ldi	r24, 0x00	; 0
     2ae:	0e 94 35 02 	call	0x46a	; 0x46a <attachInterrupt>
	CAN.setSleepWakeup(1);                                   // this tells the MCP2515 to wake up on incoming messages
     2b2:	61 e0       	ldi	r22, 0x01	; 1
     2b4:	87 e4       	ldi	r24, 0x47	; 71
     2b6:	93 e0       	ldi	r25, 0x03	; 3
     2b8:	0e 94 28 05 	call	0xa50	; 0xa50 <_ZN7MCP_CAN14setSleepWakeupEh>
	
	// Pull the Rs pin of the MCP2551 transceiver low to enable it:
    if(RS_TO_MCP2515) 
    {
      CAN.mcpPinMode(MCP_RX0BF, MCP_PIN_OUT);
     2bc:	42 e0       	ldi	r20, 0x02	; 2
     2be:	60 e0       	ldi	r22, 0x00	; 0
     2c0:	87 e4       	ldi	r24, 0x47	; 71
     2c2:	93 e0       	ldi	r25, 0x03	; 3
     2c4:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <_ZN7MCP_CAN10mcpPinModeEhh>
      CAN.mcpDigitalWrite(RS_OUTPUT, LOW);
     2c8:	40 e0       	ldi	r20, 0x00	; 0
     2ca:	60 e0       	ldi	r22, 0x00	; 0
     2cc:	87 e4       	ldi	r24, 0x47	; 71
     2ce:	93 e0       	ldi	r25, 0x03	; 3
     2d0:	0c 94 76 0a 	jmp	0x14ec	; 0x14ec <_ZN7MCP_CAN15mcpDigitalWriteEhh>

000002d4 <loop>:
	uint8_t ignition;
	uint8_t prev_ign;
	
	while(1) {
		
		ignition = !read_ADC_as_DI(6);
     2d4:	86 e0       	ldi	r24, 0x06	; 6
     2d6:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_Z14read_ADC_as_DIh>
     2da:	d8 2f       	mov	r29, r24
     2dc:	c1 e0       	ldi	r28, 0x01	; 1
     2de:	88 23       	and	r24, r24
     2e0:	31 f0       	breq	.+12     	; 0x2ee <loop+0x1a>
     2e2:	c0 e0       	ldi	r28, 0x00	; 0
		//ignition = (~PINC & 0b00000001);  // used for debug when ADC6 is not available (on DIP version of ATMEGA328P)
		
		if ((ignition == 0) && (prev_ign == 1)) {  // if ignition was on and now off, turn off all digital outputs
     2e4:	11 30       	cpi	r17, 0x01	; 1
     2e6:	19 f4       	brne	.+6      	; 0x2ee <loop+0x1a>
			set_digital_outputs(0);
     2e8:	80 e0       	ldi	r24, 0x00	; 0
     2ea:	0e 94 b0 00 	call	0x160	; 0x160 <_ZL19set_digital_outputsh>
		}
		prev_ign = ignition;
		
		if (flagRecv) {
     2ee:	80 91 52 03 	lds	r24, 0x0352	; 0x800352 <flagRecv>
     2f2:	88 23       	and	r24, r24
     2f4:	49 f1       	breq	.+82     	; 0x348 <loop+0x74>
			
			flagRecv = 0;                   // clear flag
     2f6:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <flagRecv>
			lastBusActivity = millis();
     2fa:	0e 94 ed 02 	call	0x5da	; 0x5da <millis>
     2fe:	60 93 38 03 	sts	0x0338, r22	; 0x800338 <lastBusActivity>
     302:	70 93 39 03 	sts	0x0339, r23	; 0x800339 <lastBusActivity+0x1>
     306:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <lastBusActivity+0x2>
     30a:	90 93 3b 03 	sts	0x033B, r25	; 0x80033b <lastBusActivity+0x3>
			
			while (CAN_MSGAVAIL == CAN.checkReceive()) {
     30e:	87 e4       	ldi	r24, 0x47	; 71
     310:	93 e0       	ldi	r25, 0x03	; 3
     312:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <_ZN7MCP_CAN12checkReceiveEv>
     316:	83 30       	cpi	r24, 0x03	; 3
     318:	09 f0       	breq	.+2      	; 0x31c <loop+0x48>
     31a:	57 c0       	rjmp	.+174    	; 0x3ca <loop+0xf6>
				CAN.readMsgBuf(&len, rxBuf); // Read data: len = data length, buf = data byte(s)
     31c:	43 e5       	ldi	r20, 0x53	; 83
     31e:	53 e0       	ldi	r21, 0x03	; 3
     320:	6b e5       	ldi	r22, 0x5B	; 91
     322:	73 e0       	ldi	r23, 0x03	; 3
     324:	87 e4       	ldi	r24, 0x47	; 71
     326:	93 e0       	ldi	r25, 0x03	; 3
     328:	0e 94 c7 09 	call	0x138e	; 0x138e <_ZN7MCP_CAN10readMsgBufEPhS0_>
				do_data = rxBuf[7];  // Digital output data is contained in byte 7
				if (ignition == 0) {  // if ignition is zero, then turn off all digital outputs
     32c:	d1 11       	cpse	r29, r1
     32e:	05 c0       	rjmp	.+10     	; 0x33a <loop+0x66>
			flagRecv = 0;                   // clear flag
			lastBusActivity = millis();
			
			while (CAN_MSGAVAIL == CAN.checkReceive()) {
				CAN.readMsgBuf(&len, rxBuf); // Read data: len = data length, buf = data byte(s)
				do_data = rxBuf[7];  // Digital output data is contained in byte 7
     330:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <rxBuf+0x7>
     334:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <do_data>
     338:	02 c0       	rjmp	.+4      	; 0x33e <loop+0x6a>
				if (ignition == 0) {  // if ignition is zero, then turn off all digital outputs
					do_data = 0;
     33a:	10 92 3c 03 	sts	0x033C, r1	; 0x80033c <do_data>
				}
				set_digital_outputs(do_data);
     33e:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <do_data>
     342:	0e 94 b0 00 	call	0x160	; 0x160 <_ZL19set_digital_outputsh>
		if (flagRecv) {
			
			flagRecv = 0;                   // clear flag
			lastBusActivity = millis();
			
			while (CAN_MSGAVAIL == CAN.checkReceive()) {
     346:	e3 cf       	rjmp	.-58     	; 0x30e <loop+0x3a>
				set_digital_outputs(do_data);
			}
			
		}
		//else if ((ignition == 0) && (prev_ign == 1)) {  // if ignition was on and now off, turn off all digital outputs
		else if(millis() > lastBusActivity + KEEP_AWAKE_TIME) {
     348:	0e 94 ed 02 	call	0x5da	; 0x5da <millis>
     34c:	00 91 38 03 	lds	r16, 0x0338	; 0x800338 <lastBusActivity>
     350:	10 91 39 03 	lds	r17, 0x0339	; 0x800339 <lastBusActivity+0x1>
     354:	20 91 3a 03 	lds	r18, 0x033A	; 0x80033a <lastBusActivity+0x2>
     358:	30 91 3b 03 	lds	r19, 0x033B	; 0x80033b <lastBusActivity+0x3>
     35c:	08 54       	subi	r16, 0x48	; 72
     35e:	14 4f       	sbci	r17, 0xF4	; 244
     360:	2f 4f       	sbci	r18, 0xFF	; 255
     362:	3f 4f       	sbci	r19, 0xFF	; 255
     364:	06 17       	cp	r16, r22
     366:	17 07       	cpc	r17, r23
     368:	28 07       	cpc	r18, r24
     36a:	39 07       	cpc	r19, r25
     36c:	70 f5       	brcc	.+92     	; 0x3ca <loop+0xf6>
			
			set_digital_outputs(0);
     36e:	80 e0       	ldi	r24, 0x00	; 0
     370:	0e 94 b0 00 	call	0x160	; 0x160 <_ZL19set_digital_outputsh>
			CAN.sleep();
     374:	87 e4       	ldi	r24, 0x47	; 71
     376:	93 e0       	ldi	r25, 0x03	; 3
     378:	0e 94 b2 05 	call	0xb64	; 0xb64 <_ZN7MCP_CAN5sleepEv>
			
			// Put the transceiver into standby (by pulling Rs high):
			if (RS_TO_MCP2515) {
				CAN.mcpDigitalWrite(RS_OUTPUT, HIGH);
     37c:	41 e0       	ldi	r20, 0x01	; 1
     37e:	60 e0       	ldi	r22, 0x00	; 0
     380:	87 e4       	ldi	r24, 0x47	; 71
     382:	93 e0       	ldi	r25, 0x03	; 3
     384:	0e 94 76 0a 	call	0x14ec	; 0x14ec <_ZN7MCP_CAN15mcpDigitalWriteEhh>
			}
			else {
				digitalWrite(RS_OUTPUT, HIGH);
			}
			
			cli(); // Disable interrupts
     388:	f8 94       	cli
			if(!flagRecv) // Make sure we havn't missed an interrupt between the check above and now. If an interrupt happens between now and sei()/sleep_cpu() then sleep_cpu() will immediately wake up again
     38a:	80 91 52 03 	lds	r24, 0x0352	; 0x800352 <flagRecv>
     38e:	81 11       	cpse	r24, r1
     390:	11 c0       	rjmp	.+34     	; 0x3b4 <loop+0xe0>
			{
				set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     392:	83 b7       	in	r24, 0x33	; 51
     394:	81 7f       	andi	r24, 0xF1	; 241
     396:	84 60       	ori	r24, 0x04	; 4
     398:	83 bf       	out	0x33, r24	; 51
				sleep_enable();
     39a:	83 b7       	in	r24, 0x33	; 51
     39c:	81 60       	ori	r24, 0x01	; 1
     39e:	83 bf       	out	0x33, r24	; 51
				sleep_bod_disable();
     3a0:	85 b7       	in	r24, 0x35	; 53
     3a2:	80 66       	ori	r24, 0x60	; 96
     3a4:	85 bf       	out	0x35, r24	; 53
     3a6:	8f 7d       	andi	r24, 0xDF	; 223
     3a8:	85 bf       	out	0x35, r24	; 53
				sei();
     3aa:	78 94       	sei
				sleep_cpu();
     3ac:	88 95       	sleep
				// Now the Arduino sleeps until the next message arrives...
				sleep_disable();
     3ae:	83 b7       	in	r24, 0x33	; 51
     3b0:	8e 7f       	andi	r24, 0xFE	; 254
     3b2:	83 bf       	out	0x33, r24	; 51
			}
			sei();
     3b4:	78 94       	sei
			CAN.wake();
     3b6:	87 e4       	ldi	r24, 0x47	; 71
     3b8:	93 e0       	ldi	r25, 0x03	; 3
     3ba:	0e 94 c3 05 	call	0xb86	; 0xb86 <_ZN7MCP_CAN4wakeEv>
			
			// Wake up the transceiver:
			if(RS_TO_MCP2515) {
				CAN.mcpDigitalWrite(RS_OUTPUT, LOW);
     3be:	40 e0       	ldi	r20, 0x00	; 0
     3c0:	60 e0       	ldi	r22, 0x00	; 0
     3c2:	87 e4       	ldi	r24, 0x47	; 71
     3c4:	93 e0       	ldi	r25, 0x03	; 3
     3c6:	0e 94 76 0a 	call	0x14ec	; 0x14ec <_ZN7MCP_CAN15mcpDigitalWriteEhh>
				digitalWrite(RS_OUTPUT, LOW);
			} 
			
		}
			
		message[0] = (~PINC & 0b00111111) | (ignition << 6);  // put digital inputs into CAN message
     3ca:	86 b1       	in	r24, 0x06	; 6
     3cc:	80 95       	com	r24
     3ce:	8f 73       	andi	r24, 0x3F	; 63
     3d0:	9c 2f       	mov	r25, r28
     3d2:	92 95       	swap	r25
     3d4:	99 0f       	add	r25, r25
     3d6:	99 0f       	add	r25, r25
     3d8:	90 7c       	andi	r25, 0xC0	; 192
     3da:	89 2b       	or	r24, r25
     3dc:	80 93 3f 03 	sts	0x033F, r24	; 0x80033f <message>
		
		cli();
     3e0:	f8 94       	cli
		sent_msg = CAN.sendMsgBuf(CAN_output_address, 0, 8, message);  //id, standard frame, data len, data bu
     3e2:	40 91 34 03 	lds	r20, 0x0334	; 0x800334 <__data_end>
     3e6:	50 91 35 03 	lds	r21, 0x0335	; 0x800335 <__data_end+0x1>
     3ea:	60 e0       	ldi	r22, 0x00	; 0
     3ec:	70 e0       	ldi	r23, 0x00	; 0
     3ee:	cc 24       	eor	r12, r12
     3f0:	c3 94       	inc	r12
     3f2:	8f e3       	ldi	r24, 0x3F	; 63
     3f4:	e8 2e       	mov	r14, r24
     3f6:	83 e0       	ldi	r24, 0x03	; 3
     3f8:	f8 2e       	mov	r15, r24
     3fa:	08 e0       	ldi	r16, 0x08	; 8
     3fc:	20 e0       	ldi	r18, 0x00	; 0
     3fe:	87 e4       	ldi	r24, 0x47	; 71
     400:	93 e0       	ldi	r25, 0x03	; 3
     402:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <_ZN7MCP_CAN10sendMsgBufEmhhPKhb>
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	90 93 3e 03 	sts	0x033E, r25	; 0x80033e <sent_msg+0x1>
     40c:	80 93 3d 03 	sts	0x033D, r24	; 0x80033d <sent_msg>
		sei();
     410:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     412:	2f ef       	ldi	r18, 0xFF	; 255
     414:	81 ee       	ldi	r24, 0xE1	; 225
     416:	94 e0       	ldi	r25, 0x04	; 4
     418:	21 50       	subi	r18, 0x01	; 1
     41a:	80 40       	sbci	r24, 0x00	; 0
     41c:	90 40       	sbci	r25, 0x00	; 0
     41e:	e1 f7       	brne	.-8      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     420:	00 c0       	rjmp	.+0      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     422:	00 00       	nop
		//ignition = (~PINC & 0b00000001);  // used for debug when ADC6 is not available (on DIP version of ATMEGA328P)
		
		if ((ignition == 0) && (prev_ign == 1)) {  // if ignition was on and now off, turn off all digital outputs
			set_digital_outputs(0);
		}
		prev_ign = ignition;
     424:	1c 2f       	mov	r17, r28
     426:	56 cf       	rjmp	.-340    	; 0x2d4 <loop>

00000428 <_GLOBAL__sub_I_rxId>:
unsigned char len = 0;
unsigned char rxBuf[8];
unsigned char flagRecv = 0;
const int SPI_CS_PIN = 10;
#define CAN_INT 2                                            // Set INT to pin 2
MCP_CAN CAN(SPI_CS_PIN);                                    // Set CS pin
     428:	6a e0       	ldi	r22, 0x0A	; 10
     42a:	87 e4       	ldi	r24, 0x47	; 71
     42c:	93 e0       	ldi	r25, 0x03	; 3
     42e:	0e 94 c8 08 	call	0x1190	; 0x1190 <_ZN7MCP_CANC1Eh>
// To use the sleep mode of the transceiver (MCP2551), it's Rs pin must be connected to either the MCP2515 or 
// any free Arduino output.
#define RS_TO_MCP2515 true                                   // Set this to false if Rs is connected to your Arduino
#define RS_OUTPUT MCP_RX0BF                                  // RX0BF is a pin of the MCP2515. You can also define an Arduino pin here
#define KEEP_AWAKE_TIME 3000                                  // time the controller will stay awake after the last activity on the bus (in ms)
unsigned long lastBusActivity = millis();
     432:	0e 94 ed 02 	call	0x5da	; 0x5da <millis>
     436:	60 93 38 03 	sts	0x0338, r22	; 0x800338 <lastBusActivity>
     43a:	70 93 39 03 	sts	0x0339, r23	; 0x800339 <lastBusActivity+0x1>
     43e:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <lastBusActivity+0x2>
     442:	90 93 3b 03 	sts	0x033B, r25	; 0x80033b <lastBusActivity+0x3>
     446:	08 95       	ret

00000448 <initVariant>:
     448:	08 95       	ret

0000044a <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     44a:	0e 94 65 03 	call	0x6ca	; 0x6ca <init>

	initVariant();
     44e:	0e 94 24 02 	call	0x448	; 0x448 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     452:	0e 94 00 01 	call	0x200	; 0x200 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     456:	c9 ed       	ldi	r28, 0xD9	; 217
     458:	db e0       	ldi	r29, 0x0B	; 11
#endif
	
	setup();
    
	for (;;) {
		loop();
     45a:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <loop>
		if (serialEventRun) serialEventRun();
     45e:	20 97       	sbiw	r28, 0x00	; 0
     460:	e1 f3       	breq	.-8      	; 0x45a <main+0x10>
     462:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <_Z14serialEventRunv>
     466:	f9 cf       	rjmp	.-14     	; 0x45a <main+0x10>

00000468 <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
     468:	08 95       	ret

0000046a <attachInterrupt>:
     46a:	82 30       	cpi	r24, 0x02	; 2
     46c:	e8 f4       	brcc	.+58     	; 0x4a8 <attachInterrupt+0x3e>
     46e:	e8 2f       	mov	r30, r24
     470:	f0 e0       	ldi	r31, 0x00	; 0
     472:	ee 0f       	add	r30, r30
     474:	ff 1f       	adc	r31, r31
     476:	e0 50       	subi	r30, 0x00	; 0
     478:	ff 4f       	sbci	r31, 0xFF	; 255
     47a:	71 83       	std	Z+1, r23	; 0x01
     47c:	60 83       	st	Z, r22
     47e:	81 30       	cpi	r24, 0x01	; 1
     480:	41 f0       	breq	.+16     	; 0x492 <attachInterrupt+0x28>
     482:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     486:	8c 7f       	andi	r24, 0xFC	; 252
     488:	48 2b       	or	r20, r24
     48a:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     48e:	e8 9a       	sbi	0x1d, 0	; 29
     490:	08 95       	ret
     492:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     496:	83 7f       	andi	r24, 0xF3	; 243
     498:	44 0f       	add	r20, r20
     49a:	55 1f       	adc	r21, r21
     49c:	44 0f       	add	r20, r20
     49e:	55 1f       	adc	r21, r21
     4a0:	48 2b       	or	r20, r24
     4a2:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     4a6:	e9 9a       	sbi	0x1d, 1	; 29
     4a8:	08 95       	ret

000004aa <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
     4aa:	1f 92       	push	r1
     4ac:	0f 92       	push	r0
     4ae:	0f b6       	in	r0, 0x3f	; 63
     4b0:	0f 92       	push	r0
     4b2:	11 24       	eor	r1, r1
     4b4:	2f 93       	push	r18
     4b6:	3f 93       	push	r19
     4b8:	4f 93       	push	r20
     4ba:	5f 93       	push	r21
     4bc:	6f 93       	push	r22
     4be:	7f 93       	push	r23
     4c0:	8f 93       	push	r24
     4c2:	9f 93       	push	r25
     4c4:	af 93       	push	r26
     4c6:	bf 93       	push	r27
     4c8:	ef 93       	push	r30
     4ca:	ff 93       	push	r31
     4cc:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
     4d0:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
     4d4:	09 95       	icall
     4d6:	ff 91       	pop	r31
     4d8:	ef 91       	pop	r30
     4da:	bf 91       	pop	r27
     4dc:	af 91       	pop	r26
     4de:	9f 91       	pop	r25
     4e0:	8f 91       	pop	r24
     4e2:	7f 91       	pop	r23
     4e4:	6f 91       	pop	r22
     4e6:	5f 91       	pop	r21
     4e8:	4f 91       	pop	r20
     4ea:	3f 91       	pop	r19
     4ec:	2f 91       	pop	r18
     4ee:	0f 90       	pop	r0
     4f0:	0f be       	out	0x3f, r0	; 63
     4f2:	0f 90       	pop	r0
     4f4:	1f 90       	pop	r1
     4f6:	18 95       	reti

000004f8 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
     4f8:	1f 92       	push	r1
     4fa:	0f 92       	push	r0
     4fc:	0f b6       	in	r0, 0x3f	; 63
     4fe:	0f 92       	push	r0
     500:	11 24       	eor	r1, r1
     502:	2f 93       	push	r18
     504:	3f 93       	push	r19
     506:	4f 93       	push	r20
     508:	5f 93       	push	r21
     50a:	6f 93       	push	r22
     50c:	7f 93       	push	r23
     50e:	8f 93       	push	r24
     510:	9f 93       	push	r25
     512:	af 93       	push	r26
     514:	bf 93       	push	r27
     516:	ef 93       	push	r30
     518:	ff 93       	push	r31
     51a:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_start+0x2>
     51e:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <__data_start+0x3>
     522:	09 95       	icall
     524:	ff 91       	pop	r31
     526:	ef 91       	pop	r30
     528:	bf 91       	pop	r27
     52a:	af 91       	pop	r26
     52c:	9f 91       	pop	r25
     52e:	8f 91       	pop	r24
     530:	7f 91       	pop	r23
     532:	6f 91       	pop	r22
     534:	5f 91       	pop	r21
     536:	4f 91       	pop	r20
     538:	3f 91       	pop	r19
     53a:	2f 91       	pop	r18
     53c:	0f 90       	pop	r0
     53e:	0f be       	out	0x3f, r0	; 63
     540:	0f 90       	pop	r0
     542:	1f 90       	pop	r1
     544:	18 95       	reti

00000546 <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     546:	1f 92       	push	r1
     548:	0f 92       	push	r0
     54a:	0f b6       	in	r0, 0x3f	; 63
     54c:	0f 92       	push	r0
     54e:	11 24       	eor	r1, r1
     550:	2f 93       	push	r18
     552:	3f 93       	push	r19
     554:	8f 93       	push	r24
     556:	9f 93       	push	r25
     558:	af 93       	push	r26
     55a:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     55c:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <timer0_millis>
     560:	90 91 5e 03 	lds	r25, 0x035E	; 0x80035e <timer0_millis+0x1>
     564:	a0 91 5f 03 	lds	r26, 0x035F	; 0x80035f <timer0_millis+0x2>
     568:	b0 91 60 03 	lds	r27, 0x0360	; 0x800360 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
     56c:	30 91 5c 03 	lds	r19, 0x035C	; 0x80035c <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
     570:	23 e0       	ldi	r18, 0x03	; 3
     572:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
     574:	2d 37       	cpi	r18, 0x7D	; 125
     576:	20 f4       	brcc	.+8      	; 0x580 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
     578:	01 96       	adiw	r24, 0x01	; 1
     57a:	a1 1d       	adc	r26, r1
     57c:	b1 1d       	adc	r27, r1
     57e:	05 c0       	rjmp	.+10     	; 0x58a <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
     580:	26 e8       	ldi	r18, 0x86	; 134
     582:	23 0f       	add	r18, r19
		m += 1;
     584:	02 96       	adiw	r24, 0x02	; 2
     586:	a1 1d       	adc	r26, r1
     588:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
     58a:	20 93 5c 03 	sts	0x035C, r18	; 0x80035c <timer0_fract>
	timer0_millis = m;
     58e:	80 93 5d 03 	sts	0x035D, r24	; 0x80035d <timer0_millis>
     592:	90 93 5e 03 	sts	0x035E, r25	; 0x80035e <timer0_millis+0x1>
     596:	a0 93 5f 03 	sts	0x035F, r26	; 0x80035f <timer0_millis+0x2>
     59a:	b0 93 60 03 	sts	0x0360, r27	; 0x800360 <timer0_millis+0x3>
	timer0_overflow_count++;
     59e:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <timer0_overflow_count>
     5a2:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <timer0_overflow_count+0x1>
     5a6:	a0 91 63 03 	lds	r26, 0x0363	; 0x800363 <timer0_overflow_count+0x2>
     5aa:	b0 91 64 03 	lds	r27, 0x0364	; 0x800364 <timer0_overflow_count+0x3>
     5ae:	01 96       	adiw	r24, 0x01	; 1
     5b0:	a1 1d       	adc	r26, r1
     5b2:	b1 1d       	adc	r27, r1
     5b4:	80 93 61 03 	sts	0x0361, r24	; 0x800361 <timer0_overflow_count>
     5b8:	90 93 62 03 	sts	0x0362, r25	; 0x800362 <timer0_overflow_count+0x1>
     5bc:	a0 93 63 03 	sts	0x0363, r26	; 0x800363 <timer0_overflow_count+0x2>
     5c0:	b0 93 64 03 	sts	0x0364, r27	; 0x800364 <timer0_overflow_count+0x3>
}
     5c4:	bf 91       	pop	r27
     5c6:	af 91       	pop	r26
     5c8:	9f 91       	pop	r25
     5ca:	8f 91       	pop	r24
     5cc:	3f 91       	pop	r19
     5ce:	2f 91       	pop	r18
     5d0:	0f 90       	pop	r0
     5d2:	0f be       	out	0x3f, r0	; 63
     5d4:	0f 90       	pop	r0
     5d6:	1f 90       	pop	r1
     5d8:	18 95       	reti

000005da <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
     5da:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
     5dc:	f8 94       	cli
	m = timer0_millis;
     5de:	60 91 5d 03 	lds	r22, 0x035D	; 0x80035d <timer0_millis>
     5e2:	70 91 5e 03 	lds	r23, 0x035E	; 0x80035e <timer0_millis+0x1>
     5e6:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <timer0_millis+0x2>
     5ea:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <timer0_millis+0x3>
	SREG = oldSREG;
     5ee:	2f bf       	out	0x3f, r18	; 63

	return m;
}
     5f0:	08 95       	ret

000005f2 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     5f2:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
     5f4:	f8 94       	cli
	m = timer0_overflow_count;
     5f6:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <timer0_overflow_count>
     5fa:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <timer0_overflow_count+0x1>
     5fe:	a0 91 63 03 	lds	r26, 0x0363	; 0x800363 <timer0_overflow_count+0x2>
     602:	b0 91 64 03 	lds	r27, 0x0364	; 0x800364 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
     606:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     608:	a8 9b       	sbis	0x15, 0	; 21
     60a:	05 c0       	rjmp	.+10     	; 0x616 <micros+0x24>
     60c:	2f 3f       	cpi	r18, 0xFF	; 255
     60e:	19 f0       	breq	.+6      	; 0x616 <micros+0x24>
		m++;
     610:	01 96       	adiw	r24, 0x01	; 1
     612:	a1 1d       	adc	r26, r1
     614:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     616:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     618:	ba 2f       	mov	r27, r26
     61a:	a9 2f       	mov	r26, r25
     61c:	98 2f       	mov	r25, r24
     61e:	88 27       	eor	r24, r24
     620:	82 0f       	add	r24, r18
     622:	91 1d       	adc	r25, r1
     624:	a1 1d       	adc	r26, r1
     626:	b1 1d       	adc	r27, r1
     628:	bc 01       	movw	r22, r24
     62a:	cd 01       	movw	r24, r26
     62c:	42 e0       	ldi	r20, 0x02	; 2
     62e:	66 0f       	add	r22, r22
     630:	77 1f       	adc	r23, r23
     632:	88 1f       	adc	r24, r24
     634:	99 1f       	adc	r25, r25
     636:	4a 95       	dec	r20
     638:	d1 f7       	brne	.-12     	; 0x62e <micros+0x3c>
}
     63a:	08 95       	ret

0000063c <delay>:

void delay(unsigned long ms)
{
     63c:	8f 92       	push	r8
     63e:	9f 92       	push	r9
     640:	af 92       	push	r10
     642:	bf 92       	push	r11
     644:	cf 92       	push	r12
     646:	df 92       	push	r13
     648:	ef 92       	push	r14
     64a:	ff 92       	push	r15
     64c:	6b 01       	movw	r12, r22
     64e:	7c 01       	movw	r14, r24
	uint32_t start = micros();
     650:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <micros>
     654:	4b 01       	movw	r8, r22
     656:	5c 01       	movw	r10, r24

	while (ms > 0) {
     658:	c1 14       	cp	r12, r1
     65a:	d1 04       	cpc	r13, r1
     65c:	e1 04       	cpc	r14, r1
     65e:	f1 04       	cpc	r15, r1
     660:	01 f1       	breq	.+64     	; 0x6a2 <delay+0x66>
		yield();
     662:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
     666:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <micros>
     66a:	dc 01       	movw	r26, r24
     66c:	cb 01       	movw	r24, r22
     66e:	88 19       	sub	r24, r8
     670:	99 09       	sbc	r25, r9
     672:	aa 09       	sbc	r26, r10
     674:	bb 09       	sbc	r27, r11
     676:	88 3e       	cpi	r24, 0xE8	; 232
     678:	93 40       	sbci	r25, 0x03	; 3
     67a:	a1 05       	cpc	r26, r1
     67c:	b1 05       	cpc	r27, r1
     67e:	60 f3       	brcs	.-40     	; 0x658 <delay+0x1c>
			ms--;
     680:	21 e0       	ldi	r18, 0x01	; 1
     682:	c2 1a       	sub	r12, r18
     684:	d1 08       	sbc	r13, r1
     686:	e1 08       	sbc	r14, r1
     688:	f1 08       	sbc	r15, r1
			start += 1000;
     68a:	88 ee       	ldi	r24, 0xE8	; 232
     68c:	88 0e       	add	r8, r24
     68e:	83 e0       	ldi	r24, 0x03	; 3
     690:	98 1e       	adc	r9, r24
     692:	a1 1c       	adc	r10, r1
     694:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
     696:	c1 14       	cp	r12, r1
     698:	d1 04       	cpc	r13, r1
     69a:	e1 04       	cpc	r14, r1
     69c:	f1 04       	cpc	r15, r1
     69e:	19 f7       	brne	.-58     	; 0x666 <delay+0x2a>
     6a0:	db cf       	rjmp	.-74     	; 0x658 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
     6a2:	ff 90       	pop	r15
     6a4:	ef 90       	pop	r14
     6a6:	df 90       	pop	r13
     6a8:	cf 90       	pop	r12
     6aa:	bf 90       	pop	r11
     6ac:	af 90       	pop	r10
     6ae:	9f 90       	pop	r9
     6b0:	8f 90       	pop	r8
     6b2:	08 95       	ret

000006b4 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
     6b4:	82 30       	cpi	r24, 0x02	; 2
     6b6:	91 05       	cpc	r25, r1
     6b8:	38 f0       	brcs	.+14     	; 0x6c8 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
     6ba:	88 0f       	add	r24, r24
     6bc:	99 1f       	adc	r25, r25
     6be:	88 0f       	add	r24, r24
     6c0:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
     6c2:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
     6c4:	01 97       	sbiw	r24, 0x01	; 1
     6c6:	f1 f7       	brne	.-4      	; 0x6c4 <delayMicroseconds+0x10>
     6c8:	08 95       	ret

000006ca <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     6ca:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     6cc:	84 b5       	in	r24, 0x24	; 36
     6ce:	82 60       	ori	r24, 0x02	; 2
     6d0:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     6d2:	84 b5       	in	r24, 0x24	; 36
     6d4:	81 60       	ori	r24, 0x01	; 1
     6d6:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     6d8:	85 b5       	in	r24, 0x25	; 37
     6da:	82 60       	ori	r24, 0x02	; 2
     6dc:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     6de:	85 b5       	in	r24, 0x25	; 37
     6e0:	81 60       	ori	r24, 0x01	; 1
     6e2:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     6e4:	ee e6       	ldi	r30, 0x6E	; 110
     6e6:	f0 e0       	ldi	r31, 0x00	; 0
     6e8:	80 81       	ld	r24, Z
     6ea:	81 60       	ori	r24, 0x01	; 1
     6ec:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     6ee:	e1 e8       	ldi	r30, 0x81	; 129
     6f0:	f0 e0       	ldi	r31, 0x00	; 0
     6f2:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     6f4:	80 81       	ld	r24, Z
     6f6:	82 60       	ori	r24, 0x02	; 2
     6f8:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     6fa:	80 81       	ld	r24, Z
     6fc:	81 60       	ori	r24, 0x01	; 1
     6fe:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     700:	e0 e8       	ldi	r30, 0x80	; 128
     702:	f0 e0       	ldi	r31, 0x00	; 0
     704:	80 81       	ld	r24, Z
     706:	81 60       	ori	r24, 0x01	; 1
     708:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     70a:	e1 eb       	ldi	r30, 0xB1	; 177
     70c:	f0 e0       	ldi	r31, 0x00	; 0
     70e:	80 81       	ld	r24, Z
     710:	84 60       	ori	r24, 0x04	; 4
     712:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     714:	e0 eb       	ldi	r30, 0xB0	; 176
     716:	f0 e0       	ldi	r31, 0x00	; 0
     718:	80 81       	ld	r24, Z
     71a:	81 60       	ori	r24, 0x01	; 1
     71c:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     71e:	ea e7       	ldi	r30, 0x7A	; 122
     720:	f0 e0       	ldi	r31, 0x00	; 0
     722:	80 81       	ld	r24, Z
     724:	84 60       	ori	r24, 0x04	; 4
     726:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     728:	80 81       	ld	r24, Z
     72a:	82 60       	ori	r24, 0x02	; 2
     72c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     72e:	80 81       	ld	r24, Z
     730:	81 60       	ori	r24, 0x01	; 1
     732:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     734:	80 81       	ld	r24, Z
     736:	80 68       	ori	r24, 0x80	; 128
     738:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     73a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     73e:	08 95       	ret

00000740 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     740:	83 30       	cpi	r24, 0x03	; 3
     742:	81 f0       	breq	.+32     	; 0x764 <turnOffPWM+0x24>
     744:	28 f4       	brcc	.+10     	; 0x750 <turnOffPWM+0x10>
     746:	81 30       	cpi	r24, 0x01	; 1
     748:	99 f0       	breq	.+38     	; 0x770 <turnOffPWM+0x30>
     74a:	82 30       	cpi	r24, 0x02	; 2
     74c:	a1 f0       	breq	.+40     	; 0x776 <turnOffPWM+0x36>
     74e:	08 95       	ret
     750:	87 30       	cpi	r24, 0x07	; 7
     752:	a9 f0       	breq	.+42     	; 0x77e <turnOffPWM+0x3e>
     754:	88 30       	cpi	r24, 0x08	; 8
     756:	b9 f0       	breq	.+46     	; 0x786 <turnOffPWM+0x46>
     758:	84 30       	cpi	r24, 0x04	; 4
     75a:	d1 f4       	brne	.+52     	; 0x790 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     75c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     760:	8f 7d       	andi	r24, 0xDF	; 223
     762:	03 c0       	rjmp	.+6      	; 0x76a <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     764:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     768:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     76a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     76e:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     770:	84 b5       	in	r24, 0x24	; 36
     772:	8f 77       	andi	r24, 0x7F	; 127
     774:	02 c0       	rjmp	.+4      	; 0x77a <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     776:	84 b5       	in	r24, 0x24	; 36
     778:	8f 7d       	andi	r24, 0xDF	; 223
     77a:	84 bd       	out	0x24, r24	; 36
     77c:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     77e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     782:	8f 77       	andi	r24, 0x7F	; 127
     784:	03 c0       	rjmp	.+6      	; 0x78c <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     786:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     78a:	8f 7d       	andi	r24, 0xDF	; 223
     78c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     790:	08 95       	ret

00000792 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     792:	cf 93       	push	r28
     794:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	fc 01       	movw	r30, r24
     79a:	ec 53       	subi	r30, 0x3C	; 60
     79c:	ff 4f       	sbci	r31, 0xFF	; 255
     79e:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     7a0:	fc 01       	movw	r30, r24
     7a2:	e8 52       	subi	r30, 0x28	; 40
     7a4:	ff 4f       	sbci	r31, 0xFF	; 255
     7a6:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     7a8:	88 23       	and	r24, r24
     7aa:	61 f1       	breq	.+88     	; 0x804 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	88 0f       	add	r24, r24
     7b0:	99 1f       	adc	r25, r25
     7b2:	fc 01       	movw	r30, r24
     7b4:	ea 50       	subi	r30, 0x0A	; 10
     7b6:	ff 4f       	sbci	r31, 0xFF	; 255
     7b8:	c5 91       	lpm	r28, Z+
     7ba:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
     7bc:	fc 01       	movw	r30, r24
     7be:	e4 51       	subi	r30, 0x14	; 20
     7c0:	ff 4f       	sbci	r31, 0xFF	; 255
     7c2:	a5 91       	lpm	r26, Z+
     7c4:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
     7c6:	61 11       	cpse	r22, r1
     7c8:	09 c0       	rjmp	.+18     	; 0x7dc <pinMode+0x4a>
		uint8_t oldSREG = SREG;
     7ca:	9f b7       	in	r25, 0x3f	; 63
                cli();
     7cc:	f8 94       	cli
		*reg &= ~bit;
     7ce:	88 81       	ld	r24, Y
     7d0:	20 95       	com	r18
     7d2:	82 23       	and	r24, r18
     7d4:	88 83       	st	Y, r24
		*out &= ~bit;
     7d6:	ec 91       	ld	r30, X
     7d8:	2e 23       	and	r18, r30
     7da:	0b c0       	rjmp	.+22     	; 0x7f2 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     7dc:	62 30       	cpi	r22, 0x02	; 2
     7de:	61 f4       	brne	.+24     	; 0x7f8 <pinMode+0x66>
		uint8_t oldSREG = SREG;
     7e0:	9f b7       	in	r25, 0x3f	; 63
                cli();
     7e2:	f8 94       	cli
		*reg &= ~bit;
     7e4:	88 81       	ld	r24, Y
     7e6:	32 2f       	mov	r19, r18
     7e8:	30 95       	com	r19
     7ea:	83 23       	and	r24, r19
     7ec:	88 83       	st	Y, r24
		*out |= bit;
     7ee:	ec 91       	ld	r30, X
     7f0:	2e 2b       	or	r18, r30
     7f2:	2c 93       	st	X, r18
		SREG = oldSREG;
     7f4:	9f bf       	out	0x3f, r25	; 63
     7f6:	06 c0       	rjmp	.+12     	; 0x804 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
     7f8:	8f b7       	in	r24, 0x3f	; 63
                cli();
     7fa:	f8 94       	cli
		*reg |= bit;
     7fc:	e8 81       	ld	r30, Y
     7fe:	2e 2b       	or	r18, r30
     800:	28 83       	st	Y, r18
		SREG = oldSREG;
     802:	8f bf       	out	0x3f, r24	; 63
	}
}
     804:	df 91       	pop	r29
     806:	cf 91       	pop	r28
     808:	08 95       	ret

0000080a <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     80a:	1f 93       	push	r17
     80c:	cf 93       	push	r28
     80e:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     810:	28 2f       	mov	r18, r24
     812:	30 e0       	ldi	r19, 0x00	; 0
     814:	f9 01       	movw	r30, r18
     816:	e0 55       	subi	r30, 0x50	; 80
     818:	ff 4f       	sbci	r31, 0xFF	; 255
     81a:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     81c:	f9 01       	movw	r30, r18
     81e:	ec 53       	subi	r30, 0x3C	; 60
     820:	ff 4f       	sbci	r31, 0xFF	; 255
     822:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     824:	f9 01       	movw	r30, r18
     826:	e8 52       	subi	r30, 0x28	; 40
     828:	ff 4f       	sbci	r31, 0xFF	; 255
     82a:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     82c:	cc 23       	and	r28, r28
     82e:	c1 f0       	breq	.+48     	; 0x860 <digitalWrite+0x56>
     830:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     832:	81 11       	cpse	r24, r1
     834:	0e 94 a0 03 	call	0x740	; 0x740 <turnOffPWM>

	out = portOutputRegister(port);
     838:	ec 2f       	mov	r30, r28
     83a:	f0 e0       	ldi	r31, 0x00	; 0
     83c:	ee 0f       	add	r30, r30
     83e:	ff 1f       	adc	r31, r31
     840:	e4 51       	subi	r30, 0x14	; 20
     842:	ff 4f       	sbci	r31, 0xFF	; 255
     844:	a5 91       	lpm	r26, Z+
     846:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     848:	9f b7       	in	r25, 0x3f	; 63
	cli();
     84a:	f8 94       	cli

	if (val == LOW) {
     84c:	11 11       	cpse	r17, r1
     84e:	04 c0       	rjmp	.+8      	; 0x858 <digitalWrite+0x4e>
		*out &= ~bit;
     850:	8c 91       	ld	r24, X
     852:	d0 95       	com	r29
     854:	d8 23       	and	r29, r24
     856:	02 c0       	rjmp	.+4      	; 0x85c <digitalWrite+0x52>
	} else {
		*out |= bit;
     858:	ec 91       	ld	r30, X
     85a:	de 2b       	or	r29, r30
     85c:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
     85e:	9f bf       	out	0x3f, r25	; 63
}
     860:	df 91       	pop	r29
     862:	cf 91       	pop	r28
     864:	1f 91       	pop	r17
     866:	08 95       	ret

00000868 <_ZN8SPIClass16beginTransactionE11SPISettings>:
** Descriptions:            did we just receive standard 11bit frame or extended 29bit? 0 = std, 1 = ext
*********************************************************************************************************/
byte MCP_CAN::isExtendedFrame(void)
{
    return ext_flg;
}
     868:	20 91 67 03 	lds	r18, 0x0367	; 0x800367 <_ZN8SPIClass13interruptModeE>
     86c:	22 23       	and	r18, r18
     86e:	99 f0       	breq	.+38     	; 0x896 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
     870:	4f b7       	in	r20, 0x3f	; 63
     872:	f8 94       	cli
     874:	20 91 67 03 	lds	r18, 0x0367	; 0x800367 <_ZN8SPIClass13interruptModeE>
     878:	21 30       	cpi	r18, 0x01	; 1
     87a:	59 f4       	brne	.+22     	; 0x892 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
     87c:	2d b3       	in	r18, 0x1d	; 29
     87e:	20 93 65 03 	sts	0x0365, r18	; 0x800365 <_ZN8SPIClass13interruptSaveE>
     882:	3d b3       	in	r19, 0x1d	; 29
     884:	20 91 66 03 	lds	r18, 0x0366	; 0x800366 <_ZN8SPIClass13interruptMaskE>
     888:	20 95       	com	r18
     88a:	23 23       	and	r18, r19
     88c:	2d bb       	out	0x1d, r18	; 29
     88e:	4f bf       	out	0x3f, r20	; 63
     890:	02 c0       	rjmp	.+4      	; 0x896 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
     892:	40 93 65 03 	sts	0x0365, r20	; 0x800365 <_ZN8SPIClass13interruptSaveE>
     896:	8c bd       	out	0x2c, r24	; 44
     898:	9d bd       	out	0x2d, r25	; 45
     89a:	08 95       	ret

0000089c <_ZN8SPIClass8transferEh>:
     89c:	8e bd       	out	0x2e, r24	; 46
     89e:	00 00       	nop
     8a0:	0d b4       	in	r0, 0x2d	; 45
     8a2:	07 fe       	sbrs	r0, 7
     8a4:	fd cf       	rjmp	.-6      	; 0x8a0 <_ZN8SPIClass8transferEh+0x4>
     8a6:	8e b5       	in	r24, 0x2e	; 46
     8a8:	08 95       	ret

000008aa <_ZN8SPIClass14endTransactionEv>:
     8aa:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <_ZN8SPIClass13interruptModeE>
     8ae:	88 23       	and	r24, r24
     8b0:	61 f0       	breq	.+24     	; 0x8ca <_ZN8SPIClass14endTransactionEv+0x20>
     8b2:	9f b7       	in	r25, 0x3f	; 63
     8b4:	f8 94       	cli
     8b6:	20 91 67 03 	lds	r18, 0x0367	; 0x800367 <_ZN8SPIClass13interruptModeE>
     8ba:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <_ZN8SPIClass13interruptSaveE>
     8be:	21 30       	cpi	r18, 0x01	; 1
     8c0:	19 f4       	brne	.+6      	; 0x8c8 <_ZN8SPIClass14endTransactionEv+0x1e>
     8c2:	8d bb       	out	0x1d, r24	; 29
     8c4:	9f bf       	out	0x3f, r25	; 63
     8c6:	08 95       	ret
     8c8:	8f bf       	out	0x3f, r24	; 63
     8ca:	08 95       	ret

000008cc <_Z11txSidhToRTSh>:
     8cc:	81 34       	cpi	r24, 0x41	; 65
     8ce:	31 f0       	breq	.+12     	; 0x8dc <_Z11txSidhToRTSh+0x10>
     8d0:	81 35       	cpi	r24, 0x51	; 81
     8d2:	31 f0       	breq	.+12     	; 0x8e0 <_Z11txSidhToRTSh+0x14>
     8d4:	81 33       	cpi	r24, 0x31	; 49
     8d6:	31 f0       	breq	.+12     	; 0x8e4 <_Z11txSidhToRTSh+0x18>
     8d8:	80 e0       	ldi	r24, 0x00	; 0
     8da:	08 95       	ret
     8dc:	82 e8       	ldi	r24, 0x82	; 130
     8de:	08 95       	ret
     8e0:	84 e8       	ldi	r24, 0x84	; 132
     8e2:	08 95       	ret
     8e4:	81 e8       	ldi	r24, 0x81	; 129
     8e6:	08 95       	ret

000008e8 <_Z14txSidhToTxLoadh>:
     8e8:	81 34       	cpi	r24, 0x41	; 65
     8ea:	31 f0       	breq	.+12     	; 0x8f8 <_Z14txSidhToTxLoadh+0x10>
     8ec:	81 35       	cpi	r24, 0x51	; 81
     8ee:	31 f0       	breq	.+12     	; 0x8fc <_Z14txSidhToTxLoadh+0x14>
     8f0:	81 33       	cpi	r24, 0x31	; 49
     8f2:	31 f0       	breq	.+12     	; 0x900 <__stack+0x1>
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	08 95       	ret
     8f8:	82 e4       	ldi	r24, 0x42	; 66
     8fa:	08 95       	ret
     8fc:	84 e4       	ldi	r24, 0x44	; 68
     8fe:	08 95       	ret
     900:	80 e4       	ldi	r24, 0x40	; 64
     902:	08 95       	ret

00000904 <_ZN7MCP_CAN13mcp2515_resetEv>:
     904:	cf 93       	push	r28
     906:	df 93       	push	r29
     908:	ec 01       	movw	r28, r24
     90a:	80 e5       	ldi	r24, 0x50	; 80
     90c:	91 e0       	ldi	r25, 0x01	; 1
     90e:	0e 94 34 04 	call	0x868	; 0x868 <_ZN8SPIClass16beginTransactionE11SPISettings>
     912:	60 e0       	ldi	r22, 0x00	; 0
     914:	8e 81       	ldd	r24, Y+6	; 0x06
     916:	0e 94 05 04 	call	0x80a	; 0x80a <digitalWrite>
     91a:	80 ec       	ldi	r24, 0xC0	; 192
     91c:	0e 94 4e 04 	call	0x89c	; 0x89c <_ZN8SPIClass8transferEh>
     920:	61 e0       	ldi	r22, 0x01	; 1
     922:	8e 81       	ldd	r24, Y+6	; 0x06
     924:	0e 94 05 04 	call	0x80a	; 0x80a <digitalWrite>
     928:	0e 94 55 04 	call	0x8aa	; 0x8aa <_ZN8SPIClass14endTransactionEv>
     92c:	6a e0       	ldi	r22, 0x0A	; 10
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	df 91       	pop	r29
     936:	cf 91       	pop	r28
     938:	0c 94 1e 03 	jmp	0x63c	; 0x63c <delay>

0000093c <_ZN7MCP_CAN20mcp2515_readRegisterEh>:
     93c:	1f 93       	push	r17
     93e:	cf 93       	push	r28
     940:	df 93       	push	r29
     942:	ec 01       	movw	r28, r24
     944:	16 2f       	mov	r17, r22
     946:	80 e5       	ldi	r24, 0x50	; 80
     948:	91 e0       	ldi	r25, 0x01	; 1
     94a:	0e 94 34 04 	call	0x868	; 0x868 <_ZN8SPIClass16beginTransactionE11SPISettings>
     94e:	60 e0       	ldi	r22, 0x00	; 0
     950:	8e 81       	ldd	r24, Y+6	; 0x06
     952:	0e 94 05 04 	call	0x80a	; 0x80a <digitalWrite>
     956:	83 e0       	ldi	r24, 0x03	; 3
     958:	0e 94 4e 04 	call	0x89c	; 0x89c <_ZN8SPIClass8transferEh>
     95c:	81 2f       	mov	r24, r17
     95e:	0e 94 4e 04 	call	0x89c	; 0x89c <_ZN8SPIClass8transferEh>
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	0e 94 4e 04 	call	0x89c	; 0x89c <_ZN8SPIClass8transferEh>
     968:	18 2f       	mov	r17, r24
     96a:	61 e0       	ldi	r22, 0x01	; 1
     96c:	8e 81       	ldd	r24, Y+6	; 0x06
     96e:	0e 94 05 04 	call	0x80a	; 0x80a <digitalWrite>
     972:	0e 94 55 04 	call	0x8aa	; 0x8aa <_ZN8SPIClass14endTransactionEv>
     976:	81 2f       	mov	r24, r17
     978:	df 91       	pop	r29
     97a:	cf 91       	pop	r28
     97c:	1f 91       	pop	r17
     97e:	08 95       	ret

00000980 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>:
     980:	0f 93       	push	r16
     982:	1f 93       	push	r17
     984:	cf 93       	push	r28
     986:	df 93       	push	r29
     988:	ec 01       	movw	r28, r24
     98a:	06 2f       	mov	r16, r22
     98c:	14 2f       	mov	r17, r20
     98e:	80 e5       	ldi	r24, 0x50	; 80
     990:	91 e0       	ldi	r25, 0x01	; 1
     992:	0e 94 34 04 	call	0x868	; 0x868 <_ZN8SPIClass16beginTransactionE11SPISettings>
     996:	60 e0       	ldi	r22, 0x00	; 0
     998:	8e 81       	ldd	r24, Y+6	; 0x06
     99a:	0e 94 05 04 	call	0x80a	; 0x80a <digitalWrite>
     99e:	82 e0       	ldi	r24, 0x02	; 2
     9a0:	0e 94 4e 04 	call	0x89c	; 0x89c <_ZN8SPIClass8transferEh>
     9a4:	80 2f       	mov	r24, r16
     9a6:	0e 94 4e 04 	call	0x89c	; 0x89c <_ZN8SPIClass8transferEh>
     9aa:	81 2f       	mov	r24, r17
     9ac:	0e 94 4e 04 	call	0x89c	; 0x89c <_ZN8SPIClass8transferEh>
     9b0:	61 e0       	ldi	r22, 0x01	; 1
     9b2:	8e 81       	ldd	r24, Y+6	; 0x06
     9b4:	0e 94 05 04 	call	0x80a	; 0x80a <digitalWrite>
     9b8:	df 91       	pop	r29
     9ba:	cf 91       	pop	r28
     9bc:	1f 91       	pop	r17
     9be:	0f 91       	pop	r16
     9c0:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <_ZN8SPIClass14endTransactionEv>

000009c4 <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>:
     9c4:	ff 92       	push	r15
     9c6:	0f 93       	push	r16
     9c8:	1f 93       	push	r17
     9ca:	cf 93       	push	r28
     9cc:	df 93       	push	r29
     9ce:	ec 01       	movw	r28, r24
     9d0:	f6 2e       	mov	r15, r22
     9d2:	04 2f       	mov	r16, r20
     9d4:	12 2f       	mov	r17, r18
     9d6:	80 e5       	ldi	r24, 0x50	; 80
     9d8:	91 e0       	ldi	r25, 0x01	; 1
     9da:	0e 94 34 04 	call	0x868	; 0x868 <_ZN8SPIClass16beginTransactionE11SPISettings>
     9de:	60 e0       	ldi	r22, 0x00	; 0
     9e0:	8e 81       	ldd	r24, Y+6	; 0x06
     9e2:	0e 94 05 04 	call	0x80a	; 0x80a <digitalWrite>
     9e6:	85 e0       	ldi	r24, 0x05	; 5
     9e8:	0e 94 4e 04 	call	0x89c	; 0x89c <_ZN8SPIClass8transferEh>
     9ec:	8f 2d       	mov	r24, r15
     9ee:	0e 94 4e 04 	call	0x89c	; 0x89c <_ZN8SPIClass8transferEh>
     9f2:	80 2f       	mov	r24, r16
     9f4:	0e 94 4e 04 	call	0x89c	; 0x89c <_ZN8SPIClass8transferEh>
     9f8:	81 2f       	mov	r24, r17
     9fa:	0e 94 4e 04 	call	0x89c	; 0x89c <_ZN8SPIClass8transferEh>
     9fe:	61 e0       	ldi	r22, 0x01	; 1
     a00:	8e 81       	ldd	r24, Y+6	; 0x06
     a02:	0e 94 05 04 	call	0x80a	; 0x80a <digitalWrite>
     a06:	df 91       	pop	r29
     a08:	cf 91       	pop	r28
     a0a:	1f 91       	pop	r17
     a0c:	0f 91       	pop	r16
     a0e:	ff 90       	pop	r15
     a10:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <_ZN8SPIClass14endTransactionEv>

00000a14 <_ZN7MCP_CAN18mcp2515_readStatusEv>:
     a14:	1f 93       	push	r17
     a16:	cf 93       	push	r28
     a18:	df 93       	push	r29
     a1a:	ec 01       	movw	r28, r24
     a1c:	80 e5       	ldi	r24, 0x50	; 80
     a1e:	91 e0       	ldi	r25, 0x01	; 1
     a20:	0e 94 34 04 	call	0x868	; 0x868 <_ZN8SPIClass16beginTransactionE11SPISettings>
     a24:	60 e0       	ldi	r22, 0x00	; 0
     a26:	8e 81       	ldd	r24, Y+6	; 0x06
     a28:	0e 94 05 04 	call	0x80a	; 0x80a <digitalWrite>
     a2c:	80 ea       	ldi	r24, 0xA0	; 160
     a2e:	0e 94 4e 04 	call	0x89c	; 0x89c <_ZN8SPIClass8transferEh>
     a32:	80 e0       	ldi	r24, 0x00	; 0
     a34:	0e 94 4e 04 	call	0x89c	; 0x89c <_ZN8SPIClass8transferEh>
     a38:	18 2f       	mov	r17, r24
     a3a:	61 e0       	ldi	r22, 0x01	; 1
     a3c:	8e 81       	ldd	r24, Y+6	; 0x06
     a3e:	0e 94 05 04 	call	0x80a	; 0x80a <digitalWrite>
     a42:	0e 94 55 04 	call	0x8aa	; 0x8aa <_ZN8SPIClass14endTransactionEv>
     a46:	81 2f       	mov	r24, r17
     a48:	df 91       	pop	r29
     a4a:	cf 91       	pop	r28
     a4c:	1f 91       	pop	r17
     a4e:	08 95       	ret

00000a50 <_ZN7MCP_CAN14setSleepWakeupEh>:
     a50:	61 11       	cpse	r22, r1
     a52:	02 c0       	rjmp	.+4      	; 0xa58 <_ZN7MCP_CAN14setSleepWakeupEh+0x8>
     a54:	20 e0       	ldi	r18, 0x00	; 0
     a56:	01 c0       	rjmp	.+2      	; 0xa5a <_ZN7MCP_CAN14setSleepWakeupEh+0xa>
     a58:	20 e4       	ldi	r18, 0x40	; 64
     a5a:	40 e4       	ldi	r20, 0x40	; 64
     a5c:	6b e2       	ldi	r22, 0x2B	; 43
     a5e:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>

00000a62 <_ZN7MCP_CAN7getModeEv>:
     a62:	6e e0       	ldi	r22, 0x0E	; 14
     a64:	0e 94 9e 04 	call	0x93c	; 0x93c <_ZN7MCP_CAN20mcp2515_readRegisterEh>
     a68:	80 7e       	andi	r24, 0xE0	; 224
     a6a:	08 95       	ret

00000a6c <_ZN7MCP_CAN22mcp2515_requestNewModeEh>:
     a6c:	bf 92       	push	r11
     a6e:	cf 92       	push	r12
     a70:	df 92       	push	r13
     a72:	ef 92       	push	r14
     a74:	ff 92       	push	r15
     a76:	0f 93       	push	r16
     a78:	1f 93       	push	r17
     a7a:	cf 93       	push	r28
     a7c:	df 93       	push	r29
     a7e:	ec 01       	movw	r28, r24
     a80:	b6 2e       	mov	r11, r22
     a82:	0e 94 ed 02 	call	0x5da	; 0x5da <millis>
     a86:	6b 01       	movw	r12, r22
     a88:	7c 01       	movw	r14, r24
     a8a:	0b 2d       	mov	r16, r11
     a8c:	10 e0       	ldi	r17, 0x00	; 0
     a8e:	2b 2d       	mov	r18, r11
     a90:	40 ee       	ldi	r20, 0xE0	; 224
     a92:	6f e0       	ldi	r22, 0x0F	; 15
     a94:	ce 01       	movw	r24, r28
     a96:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>
     a9a:	6e e0       	ldi	r22, 0x0E	; 14
     a9c:	ce 01       	movw	r24, r28
     a9e:	0e 94 9e 04 	call	0x93c	; 0x93c <_ZN7MCP_CAN20mcp2515_readRegisterEh>
     aa2:	80 7e       	andi	r24, 0xE0	; 224
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	80 17       	cp	r24, r16
     aa8:	91 07       	cpc	r25, r17
     aaa:	79 f0       	breq	.+30     	; 0xaca <_ZN7MCP_CAN22mcp2515_requestNewModeEh+0x5e>
     aac:	0e 94 ed 02 	call	0x5da	; 0x5da <millis>
     ab0:	dc 01       	movw	r26, r24
     ab2:	cb 01       	movw	r24, r22
     ab4:	8c 19       	sub	r24, r12
     ab6:	9d 09       	sbc	r25, r13
     ab8:	ae 09       	sbc	r26, r14
     aba:	bf 09       	sbc	r27, r15
     abc:	89 3c       	cpi	r24, 0xC9	; 201
     abe:	91 05       	cpc	r25, r1
     ac0:	a1 05       	cpc	r26, r1
     ac2:	b1 05       	cpc	r27, r1
     ac4:	20 f3       	brcs	.-56     	; 0xa8e <_ZN7MCP_CAN22mcp2515_requestNewModeEh+0x22>
     ac6:	81 e0       	ldi	r24, 0x01	; 1
     ac8:	01 c0       	rjmp	.+2      	; 0xacc <_ZN7MCP_CAN22mcp2515_requestNewModeEh+0x60>
     aca:	80 e0       	ldi	r24, 0x00	; 0
     acc:	df 91       	pop	r29
     ace:	cf 91       	pop	r28
     ad0:	1f 91       	pop	r17
     ad2:	0f 91       	pop	r16
     ad4:	ff 90       	pop	r15
     ad6:	ef 90       	pop	r14
     ad8:	df 90       	pop	r13
     ada:	cf 90       	pop	r12
     adc:	bf 90       	pop	r11
     ade:	08 95       	ret

00000ae0 <_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh>:
     ae0:	0f 93       	push	r16
     ae2:	1f 93       	push	r17
     ae4:	cf 93       	push	r28
     ae6:	df 93       	push	r29
     ae8:	ec 01       	movw	r28, r24
     aea:	16 2f       	mov	r17, r22
     aec:	0e 94 31 05 	call	0xa62	; 0xa62 <_ZN7MCP_CAN7getModeEv>
     af0:	80 32       	cpi	r24, 0x20	; 32
     af2:	21 f5       	brne	.+72     	; 0xb3c <_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh+0x5c>
     af4:	10 32       	cpi	r17, 0x20	; 32
     af6:	11 f1       	breq	.+68     	; 0xb3c <_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh+0x5c>
     af8:	6b e2       	ldi	r22, 0x2B	; 43
     afa:	ce 01       	movw	r24, r28
     afc:	0e 94 9e 04 	call	0x93c	; 0x93c <_ZN7MCP_CAN20mcp2515_readRegisterEh>
     b00:	08 2f       	mov	r16, r24
     b02:	00 74       	andi	r16, 0x40	; 64
     b04:	86 fd       	sbrc	r24, 6
     b06:	06 c0       	rjmp	.+12     	; 0xb14 <_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh+0x34>
     b08:	20 e4       	ldi	r18, 0x40	; 64
     b0a:	40 e4       	ldi	r20, 0x40	; 64
     b0c:	6b e2       	ldi	r22, 0x2B	; 43
     b0e:	ce 01       	movw	r24, r28
     b10:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>
     b14:	20 e4       	ldi	r18, 0x40	; 64
     b16:	40 e4       	ldi	r20, 0x40	; 64
     b18:	6c e2       	ldi	r22, 0x2C	; 44
     b1a:	ce 01       	movw	r24, r28
     b1c:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>
     b20:	60 e6       	ldi	r22, 0x60	; 96
     b22:	ce 01       	movw	r24, r28
     b24:	0e 94 36 05 	call	0xa6c	; 0xa6c <_ZN7MCP_CAN22mcp2515_requestNewModeEh>
     b28:	81 11       	cpse	r24, r1
     b2a:	16 c0       	rjmp	.+44     	; 0xb58 <_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh+0x78>
     b2c:	01 11       	cpse	r16, r1
     b2e:	06 c0       	rjmp	.+12     	; 0xb3c <_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh+0x5c>
     b30:	20 e0       	ldi	r18, 0x00	; 0
     b32:	40 e4       	ldi	r20, 0x40	; 64
     b34:	6b e2       	ldi	r22, 0x2B	; 43
     b36:	ce 01       	movw	r24, r28
     b38:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>
     b3c:	20 e0       	ldi	r18, 0x00	; 0
     b3e:	40 e4       	ldi	r20, 0x40	; 64
     b40:	6c e2       	ldi	r22, 0x2C	; 44
     b42:	ce 01       	movw	r24, r28
     b44:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>
     b48:	61 2f       	mov	r22, r17
     b4a:	ce 01       	movw	r24, r28
     b4c:	df 91       	pop	r29
     b4e:	cf 91       	pop	r28
     b50:	1f 91       	pop	r17
     b52:	0f 91       	pop	r16
     b54:	0c 94 36 05 	jmp	0xa6c	; 0xa6c <_ZN7MCP_CAN22mcp2515_requestNewModeEh>
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	df 91       	pop	r29
     b5c:	cf 91       	pop	r28
     b5e:	1f 91       	pop	r17
     b60:	0f 91       	pop	r16
     b62:	08 95       	ret

00000b64 <_ZN7MCP_CAN5sleepEv>:
     b64:	cf 93       	push	r28
     b66:	df 93       	push	r29
     b68:	ec 01       	movw	r28, r24
     b6a:	0e 94 31 05 	call	0xa62	; 0xa62 <_ZN7MCP_CAN7getModeEv>
     b6e:	80 32       	cpi	r24, 0x20	; 32
     b70:	31 f0       	breq	.+12     	; 0xb7e <_ZN7MCP_CAN5sleepEv+0x1a>
     b72:	60 e2       	ldi	r22, 0x20	; 32
     b74:	ce 01       	movw	r24, r28
     b76:	df 91       	pop	r29
     b78:	cf 91       	pop	r28
     b7a:	0c 94 70 05 	jmp	0xae0	; 0xae0 <_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh>
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	df 91       	pop	r29
     b82:	cf 91       	pop	r28
     b84:	08 95       	ret

00000b86 <_ZN7MCP_CAN4wakeEv>:
     b86:	cf 93       	push	r28
     b88:	df 93       	push	r29
     b8a:	ec 01       	movw	r28, r24
     b8c:	0e 94 31 05 	call	0xa62	; 0xa62 <_ZN7MCP_CAN7getModeEv>
     b90:	6a 85       	ldd	r22, Y+10	; 0x0a
     b92:	86 17       	cp	r24, r22
     b94:	29 f0       	breq	.+10     	; 0xba0 <_ZN7MCP_CAN4wakeEv+0x1a>
     b96:	ce 01       	movw	r24, r28
     b98:	df 91       	pop	r29
     b9a:	cf 91       	pop	r28
     b9c:	0c 94 70 05 	jmp	0xae0	; 0xae0 <_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh>
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	df 91       	pop	r29
     ba4:	cf 91       	pop	r28
     ba6:	08 95       	ret

00000ba8 <_ZN7MCP_CAN7setModeEh>:
     ba8:	60 32       	cpi	r22, 0x20	; 32
     baa:	11 f0       	breq	.+4      	; 0xbb0 <_ZN7MCP_CAN7setModeEh+0x8>
     bac:	fc 01       	movw	r30, r24
     bae:	62 87       	std	Z+10, r22	; 0x0a
     bb0:	0c 94 70 05 	jmp	0xae0	; 0xae0 <_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh>

00000bb4 <_ZN7MCP_CAN18mcp2515_configRateEhh>:
     bb4:	0f 93       	push	r16
     bb6:	1f 93       	push	r17
     bb8:	cf 93       	push	r28
     bba:	df 93       	push	r29
     bbc:	41 30       	cpi	r20, 0x01	; 1
     bbe:	21 f0       	breq	.+8      	; 0xbc8 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x14>
     bc0:	42 30       	cpi	r20, 0x02	; 2
     bc2:	09 f4       	brne	.+2      	; 0xbc6 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x12>
     bc4:	3f c0       	rjmp	.+126    	; 0xc44 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x90>
     bc6:	71 c0       	rjmp	.+226    	; 0xcaa <_ZN7MCP_CAN18mcp2515_configRateEhh+0xf6>
     bc8:	46 2f       	mov	r20, r22
     bca:	50 e0       	ldi	r21, 0x00	; 0
     bcc:	fa 01       	movw	r30, r20
     bce:	31 97       	sbiw	r30, 0x01	; 1
     bd0:	e2 31       	cpi	r30, 0x12	; 18
     bd2:	f1 05       	cpc	r31, r1
     bd4:	08 f0       	brcs	.+2      	; 0xbd8 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x24>
     bd6:	69 c0       	rjmp	.+210    	; 0xcaa <_ZN7MCP_CAN18mcp2515_configRateEhh+0xf6>
     bd8:	ec 5c       	subi	r30, 0xCC	; 204
     bda:	ff 4f       	sbci	r31, 0xFF	; 255
     bdc:	0c 94 78 0c 	jmp	0x18f0	; 0x18f0 <__tablejump2__>
     be0:	c7 e8       	ldi	r28, 0x87	; 135
     be2:	df ef       	ldi	r29, 0xFF	; 255
     be4:	6e c0       	rjmp	.+220    	; 0xcc2 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x10e>
     be6:	c7 e0       	ldi	r28, 0x07	; 7
     be8:	da eb       	ldi	r29, 0xBA	; 186
     bea:	67 c0       	rjmp	.+206    	; 0xcba <_ZN7MCP_CAN18mcp2515_configRateEhh+0x106>
     bec:	c5 e8       	ldi	r28, 0x85	; 133
     bee:	d1 ef       	ldi	r29, 0xF1	; 241
     bf0:	64 c0       	rjmp	.+200    	; 0xcba <_ZN7MCP_CAN18mcp2515_configRateEhh+0x106>
     bf2:	c7 e0       	ldi	r28, 0x07	; 7
     bf4:	de eb       	ldi	r29, 0xBE	; 190
     bf6:	49 e0       	ldi	r20, 0x09	; 9
     bf8:	65 c0       	rjmp	.+202    	; 0xcc4 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x110>
     bfa:	c7 e8       	ldi	r28, 0x87	; 135
     bfc:	df ef       	ldi	r29, 0xFF	; 255
     bfe:	35 c0       	rjmp	.+106    	; 0xc6a <_ZN7MCP_CAN18mcp2515_configRateEhh+0xb6>
     c00:	c7 e8       	ldi	r28, 0x87	; 135
     c02:	da ef       	ldi	r29, 0xFA	; 250
     c04:	32 c0       	rjmp	.+100    	; 0xc6a <_ZN7MCP_CAN18mcp2515_configRateEhh+0xb6>
     c06:	c7 e8       	ldi	r28, 0x87	; 135
     c08:	df ef       	ldi	r29, 0xFF	; 255
     c0a:	36 c0       	rjmp	.+108    	; 0xc78 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xc4>
     c0c:	c7 e0       	ldi	r28, 0x07	; 7
     c0e:	de eb       	ldi	r29, 0xBE	; 190
     c10:	33 c0       	rjmp	.+102    	; 0xc78 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xc4>
     c12:	c7 e0       	ldi	r28, 0x07	; 7
     c14:	dd ea       	ldi	r29, 0xAD	; 173
     c16:	30 c0       	rjmp	.+96     	; 0xc78 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xc4>
     c18:	c7 e8       	ldi	r28, 0x87	; 135
     c1a:	da ef       	ldi	r29, 0xFA	; 250
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xc4>
     c1e:	c6 e8       	ldi	r28, 0x86	; 134
     c20:	d0 ef       	ldi	r29, 0xF0	; 240
     c22:	2a c0       	rjmp	.+84     	; 0xc78 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xc4>
     c24:	c7 e8       	ldi	r28, 0x87	; 135
     c26:	da ef       	ldi	r29, 0xFA	; 250
     c28:	2e c0       	rjmp	.+92     	; 0xc86 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xd2>
     c2a:	c5 e8       	ldi	r28, 0x85	; 133
     c2c:	d1 ef       	ldi	r29, 0xF1	; 241
     c2e:	41 e4       	ldi	r20, 0x41	; 65
     c30:	49 c0       	rjmp	.+146    	; 0xcc4 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x110>
     c32:	c6 e8       	ldi	r28, 0x86	; 134
     c34:	d0 ef       	ldi	r29, 0xF0	; 240
     c36:	2e c0       	rjmp	.+92     	; 0xc94 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xe0>
     c38:	c4 e0       	ldi	r28, 0x04	; 4
     c3a:	d0 ea       	ldi	r29, 0xA0	; 160
     c3c:	2b c0       	rjmp	.+86     	; 0xc94 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xe0>
     c3e:	c2 e8       	ldi	r28, 0x82	; 130
     c40:	d0 ed       	ldi	r29, 0xD0	; 208
     c42:	28 c0       	rjmp	.+80     	; 0xc94 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xe0>
     c44:	46 2f       	mov	r20, r22
     c46:	50 e0       	ldi	r21, 0x00	; 0
     c48:	fa 01       	movw	r30, r20
     c4a:	31 97       	sbiw	r30, 0x01	; 1
     c4c:	e2 31       	cpi	r30, 0x12	; 18
     c4e:	f1 05       	cpc	r31, r1
     c50:	60 f5       	brcc	.+88     	; 0xcaa <_ZN7MCP_CAN18mcp2515_configRateEhh+0xf6>
     c52:	ea 5b       	subi	r30, 0xBA	; 186
     c54:	ff 4f       	sbci	r31, 0xFF	; 255
     c56:	0c 94 78 0c 	jmp	0x18f0	; 0x18f0 <__tablejump2__>
     c5a:	c7 e0       	ldi	r28, 0x07	; 7
     c5c:	df eb       	ldi	r29, 0xBF	; 191
     c5e:	2d c0       	rjmp	.+90     	; 0xcba <_ZN7MCP_CAN18mcp2515_configRateEhh+0x106>
     c60:	c7 e0       	ldi	r28, 0x07	; 7
     c62:	df eb       	ldi	r29, 0xBF	; 191
     c64:	02 c0       	rjmp	.+4      	; 0xc6a <_ZN7MCP_CAN18mcp2515_configRateEhh+0xb6>
     c66:	c4 e0       	ldi	r28, 0x04	; 4
     c68:	d4 ea       	ldi	r29, 0xA4	; 164
     c6a:	47 e0       	ldi	r20, 0x07	; 7
     c6c:	2b c0       	rjmp	.+86     	; 0xcc4 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x110>
     c6e:	c7 e0       	ldi	r28, 0x07	; 7
     c70:	df eb       	ldi	r29, 0xBF	; 191
     c72:	02 c0       	rjmp	.+4      	; 0xc78 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xc4>
     c74:	c6 e0       	ldi	r28, 0x06	; 6
     c76:	d4 eb       	ldi	r29, 0xB4	; 180
     c78:	43 e0       	ldi	r20, 0x03	; 3
     c7a:	24 c0       	rjmp	.+72     	; 0xcc4 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x110>
     c7c:	c7 e0       	ldi	r28, 0x07	; 7
     c7e:	df eb       	ldi	r29, 0xBF	; 191
     c80:	02 c0       	rjmp	.+4      	; 0xc86 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xd2>
     c82:	c6 e0       	ldi	r28, 0x06	; 6
     c84:	d4 eb       	ldi	r29, 0xB4	; 180
     c86:	41 e0       	ldi	r20, 0x01	; 1
     c88:	1d c0       	rjmp	.+58     	; 0xcc4 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x110>
     c8a:	c5 e0       	ldi	r28, 0x05	; 5
     c8c:	d1 eb       	ldi	r29, 0xB1	; 177
     c8e:	fb cf       	rjmp	.-10     	; 0xc86 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xd2>
     c90:	c6 e0       	ldi	r28, 0x06	; 6
     c92:	d4 eb       	ldi	r29, 0xB4	; 180
     c94:	40 e0       	ldi	r20, 0x00	; 0
     c96:	16 c0       	rjmp	.+44     	; 0xcc4 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x110>
     c98:	c5 e0       	ldi	r28, 0x05	; 5
     c9a:	d1 eb       	ldi	r29, 0xB1	; 177
     c9c:	fb cf       	rjmp	.-10     	; 0xc94 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xe0>
     c9e:	c2 e0       	ldi	r28, 0x02	; 2
     ca0:	d0 e9       	ldi	r29, 0x90	; 144
     ca2:	f8 cf       	rjmp	.-16     	; 0xc94 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xe0>
     ca4:	c0 e0       	ldi	r28, 0x00	; 0
     ca6:	d0 e8       	ldi	r29, 0x80	; 128
     ca8:	f5 cf       	rjmp	.-22     	; 0xc94 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xe0>
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	1a c0       	rjmp	.+52     	; 0xce2 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x12e>
     cae:	c7 e8       	ldi	r28, 0x87	; 135
     cb0:	df ef       	ldi	r29, 0xFF	; 255
     cb2:	4f e3       	ldi	r20, 0x3F	; 63
     cb4:	07 c0       	rjmp	.+14     	; 0xcc4 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x110>
     cb6:	c7 e8       	ldi	r28, 0x87	; 135
     cb8:	df ef       	ldi	r29, 0xFF	; 255
     cba:	4f e0       	ldi	r20, 0x0F	; 15
     cbc:	03 c0       	rjmp	.+6      	; 0xcc4 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x110>
     cbe:	c7 e0       	ldi	r28, 0x07	; 7
     cc0:	df eb       	ldi	r29, 0xBF	; 191
     cc2:	4f e1       	ldi	r20, 0x1F	; 31
     cc4:	8c 01       	movw	r16, r24
     cc6:	6a e2       	ldi	r22, 0x2A	; 42
     cc8:	0e 94 c0 04 	call	0x980	; 0x980 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
     ccc:	4d 2f       	mov	r20, r29
     cce:	69 e2       	ldi	r22, 0x29	; 41
     cd0:	c8 01       	movw	r24, r16
     cd2:	0e 94 c0 04 	call	0x980	; 0x980 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
     cd6:	4c 2f       	mov	r20, r28
     cd8:	68 e2       	ldi	r22, 0x28	; 40
     cda:	c8 01       	movw	r24, r16
     cdc:	0e 94 c0 04 	call	0x980	; 0x980 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
     ce0:	80 e0       	ldi	r24, 0x00	; 0
     ce2:	df 91       	pop	r29
     ce4:	cf 91       	pop	r28
     ce6:	1f 91       	pop	r17
     ce8:	0f 91       	pop	r16
     cea:	08 95       	ret

00000cec <_ZN7MCP_CAN22mcp2515_initCANBuffersEv>:
     cec:	0f 93       	push	r16
     cee:	1f 93       	push	r17
     cf0:	cf 93       	push	r28
     cf2:	8c 01       	movw	r16, r24
     cf4:	c0 e3       	ldi	r28, 0x30	; 48
     cf6:	40 e0       	ldi	r20, 0x00	; 0
     cf8:	6c 2f       	mov	r22, r28
     cfa:	c8 01       	movw	r24, r16
     cfc:	0e 94 c0 04 	call	0x980	; 0x980 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
     d00:	60 e1       	ldi	r22, 0x10	; 16
     d02:	6c 0f       	add	r22, r28
     d04:	40 e0       	ldi	r20, 0x00	; 0
     d06:	c8 01       	movw	r24, r16
     d08:	0e 94 c0 04 	call	0x980	; 0x980 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
     d0c:	60 e2       	ldi	r22, 0x20	; 32
     d0e:	6c 0f       	add	r22, r28
     d10:	40 e0       	ldi	r20, 0x00	; 0
     d12:	c8 01       	movw	r24, r16
     d14:	0e 94 c0 04 	call	0x980	; 0x980 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
     d18:	cf 5f       	subi	r28, 0xFF	; 255
     d1a:	ce 33       	cpi	r28, 0x3E	; 62
     d1c:	61 f7       	brne	.-40     	; 0xcf6 <_ZN7MCP_CAN22mcp2515_initCANBuffersEv+0xa>
     d1e:	40 e0       	ldi	r20, 0x00	; 0
     d20:	60 e6       	ldi	r22, 0x60	; 96
     d22:	c8 01       	movw	r24, r16
     d24:	0e 94 c0 04 	call	0x980	; 0x980 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
     d28:	40 e0       	ldi	r20, 0x00	; 0
     d2a:	60 e7       	ldi	r22, 0x70	; 112
     d2c:	c8 01       	movw	r24, r16
     d2e:	cf 91       	pop	r28
     d30:	1f 91       	pop	r17
     d32:	0f 91       	pop	r16
     d34:	0c 94 c0 04 	jmp	0x980	; 0x980 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>

00000d38 <_ZN7MCP_CAN12mcp2515_initEhh>:
     d38:	ff 92       	push	r15
     d3a:	0f 93       	push	r16
     d3c:	1f 93       	push	r17
     d3e:	cf 93       	push	r28
     d40:	df 93       	push	r29
     d42:	ec 01       	movw	r28, r24
     d44:	06 2f       	mov	r16, r22
     d46:	f4 2e       	mov	r15, r20
     d48:	0e 94 82 04 	call	0x904	; 0x904 <_ZN7MCP_CAN13mcp2515_resetEv>
     d4c:	60 e8       	ldi	r22, 0x80	; 128
     d4e:	ce 01       	movw	r24, r28
     d50:	0e 94 70 05 	call	0xae0	; 0xae0 <_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh>
     d54:	18 2f       	mov	r17, r24
     d56:	88 23       	and	r24, r24
     d58:	19 f0       	breq	.+6      	; 0xd60 <_ZN7MCP_CAN12mcp2515_initEhh+0x28>
     d5a:	64 e0       	ldi	r22, 0x04	; 4
     d5c:	71 e0       	ldi	r23, 0x01	; 1
     d5e:	36 c0       	rjmp	.+108    	; 0xdcc <_ZN7MCP_CAN12mcp2515_initEhh+0x94>
     d60:	6e e1       	ldi	r22, 0x1E	; 30
     d62:	71 e0       	ldi	r23, 0x01	; 1
     d64:	8a e6       	ldi	r24, 0x6A	; 106
     d66:	93 e0       	ldi	r25, 0x03	; 3
     d68:	0e 94 9a 0b 	call	0x1734	; 0x1734 <_ZN5Print5printEPKc>
     d6c:	4f 2d       	mov	r20, r15
     d6e:	60 2f       	mov	r22, r16
     d70:	ce 01       	movw	r24, r28
     d72:	0e 94 da 05 	call	0xbb4	; 0xbb4 <_ZN7MCP_CAN18mcp2515_configRateEhh>
     d76:	88 23       	and	r24, r24
     d78:	19 f0       	breq	.+6      	; 0xd80 <_ZN7MCP_CAN12mcp2515_initEhh+0x48>
     d7a:	6c e3       	ldi	r22, 0x3C	; 60
     d7c:	71 e0       	ldi	r23, 0x01	; 1
     d7e:	26 c0       	rjmp	.+76     	; 0xdcc <_ZN7MCP_CAN12mcp2515_initEhh+0x94>
     d80:	6e e4       	ldi	r22, 0x4E	; 78
     d82:	71 e0       	ldi	r23, 0x01	; 1
     d84:	8a e6       	ldi	r24, 0x6A	; 106
     d86:	93 e0       	ldi	r25, 0x03	; 3
     d88:	0e 94 9a 0b 	call	0x1734	; 0x1734 <_ZN5Print5printEPKc>
     d8c:	ce 01       	movw	r24, r28
     d8e:	0e 94 76 06 	call	0xcec	; 0xcec <_ZN7MCP_CAN22mcp2515_initCANBuffersEv>
     d92:	43 e0       	ldi	r20, 0x03	; 3
     d94:	6b e2       	ldi	r22, 0x2B	; 43
     d96:	ce 01       	movw	r24, r28
     d98:	0e 94 c0 04 	call	0x980	; 0x980 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
     d9c:	24 e0       	ldi	r18, 0x04	; 4
     d9e:	44 e6       	ldi	r20, 0x64	; 100
     da0:	60 e6       	ldi	r22, 0x60	; 96
     da2:	ce 01       	movw	r24, r28
     da4:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>
     da8:	20 e0       	ldi	r18, 0x00	; 0
     daa:	40 e6       	ldi	r20, 0x60	; 96
     dac:	60 e7       	ldi	r22, 0x70	; 112
     dae:	ce 01       	movw	r24, r28
     db0:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>
     db4:	60 e0       	ldi	r22, 0x00	; 0
     db6:	ce 01       	movw	r24, r28
     db8:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN7MCP_CAN7setModeEh>
     dbc:	18 2f       	mov	r17, r24
     dbe:	88 23       	and	r24, r24
     dc0:	19 f0       	breq	.+6      	; 0xdc8 <_ZN7MCP_CAN12mcp2515_initEhh+0x90>
     dc2:	63 e6       	ldi	r22, 0x63	; 99
     dc4:	71 e0       	ldi	r23, 0x01	; 1
     dc6:	02 c0       	rjmp	.+4      	; 0xdcc <_ZN7MCP_CAN12mcp2515_initEhh+0x94>
     dc8:	6e e7       	ldi	r22, 0x7E	; 126
     dca:	71 e0       	ldi	r23, 0x01	; 1
     dcc:	8a e6       	ldi	r24, 0x6A	; 106
     dce:	93 e0       	ldi	r25, 0x03	; 3
     dd0:	0e 94 9a 0b 	call	0x1734	; 0x1734 <_ZN5Print5printEPKc>
     dd4:	81 2f       	mov	r24, r17
     dd6:	df 91       	pop	r29
     dd8:	cf 91       	pop	r28
     dda:	1f 91       	pop	r17
     ddc:	0f 91       	pop	r16
     dde:	ff 90       	pop	r15
     de0:	08 95       	ret

00000de2 <_Z17mcp2515_id_to_bufhmPh>:
     de2:	f9 01       	movw	r30, r18
     de4:	81 30       	cpi	r24, 0x01	; 1
     de6:	b1 f4       	brne	.+44     	; 0xe14 <_Z17mcp2515_id_to_bufhmPh+0x32>
     de8:	43 83       	std	Z+3, r20	; 0x03
     dea:	52 83       	std	Z+2, r21	; 0x02
     dec:	ab 01       	movw	r20, r22
     dee:	66 27       	eor	r22, r22
     df0:	77 27       	eor	r23, r23
     df2:	94 2f       	mov	r25, r20
     df4:	9c 71       	andi	r25, 0x1C	; 28
     df6:	84 2f       	mov	r24, r20
     df8:	83 70       	andi	r24, 0x03	; 3
     dfa:	28 e0       	ldi	r18, 0x08	; 8
     dfc:	92 9f       	mul	r25, r18
     dfe:	80 0d       	add	r24, r0
     e00:	11 24       	eor	r1, r1
     e02:	88 60       	ori	r24, 0x08	; 8
     e04:	81 83       	std	Z+1, r24	; 0x01
     e06:	65 e0       	ldi	r22, 0x05	; 5
     e08:	56 95       	lsr	r21
     e0a:	47 95       	ror	r20
     e0c:	6a 95       	dec	r22
     e0e:	e1 f7       	brne	.-8      	; 0xe08 <_Z17mcp2515_id_to_bufhmPh+0x26>
     e10:	40 83       	st	Z, r20
     e12:	08 95       	ret
     e14:	ca 01       	movw	r24, r20
     e16:	23 e0       	ldi	r18, 0x03	; 3
     e18:	96 95       	lsr	r25
     e1a:	87 95       	ror	r24
     e1c:	2a 95       	dec	r18
     e1e:	e1 f7       	brne	.-8      	; 0xe18 <_Z17mcp2515_id_to_bufhmPh+0x36>
     e20:	80 83       	st	Z, r24
     e22:	42 95       	swap	r20
     e24:	44 0f       	add	r20, r20
     e26:	40 7e       	andi	r20, 0xE0	; 224
     e28:	41 83       	std	Z+1, r20	; 0x01
     e2a:	13 82       	std	Z+3, r1	; 0x03
     e2c:	12 82       	std	Z+2, r1	; 0x02
     e2e:	08 95       	ret

00000e30 <_ZN7MCP_CAN19mcp2515_read_canMsgEhPVmPVhS3_S3_S3_>:
     e30:	2f 92       	push	r2
     e32:	3f 92       	push	r3
     e34:	4f 92       	push	r4
     e36:	5f 92       	push	r5
     e38:	6f 92       	push	r6
     e3a:	7f 92       	push	r7
     e3c:	8f 92       	push	r8
     e3e:	9f 92       	push	r9
     e40:	af 92       	push	r10
     e42:	bf 92       	push	r11
     e44:	cf 92       	push	r12
     e46:	df 92       	push	r13
     e48:	ef 92       	push	r14
     e4a:	ff 92       	push	r15
     e4c:	0f 93       	push	r16
     e4e:	1f 93       	push	r17
     e50:	cf 93       	push	r28
     e52:	df 93       	push	r29
     e54:	00 d0       	rcall	.+0      	; 0xe56 <_ZN7MCP_CAN19mcp2515_read_canMsgEhPVmPVhS3_S3_S3_+0x26>
     e56:	00 d0       	rcall	.+0      	; 0xe58 <_ZN7MCP_CAN19mcp2515_read_canMsgEhPVmPVhS3_S3_S3_+0x28>
     e58:	1f 92       	push	r1
     e5a:	cd b7       	in	r28, 0x3d	; 61
     e5c:	de b7       	in	r29, 0x3e	; 62
     e5e:	4c 01       	movw	r8, r24
     e60:	56 2e       	mov	r5, r22
     e62:	5a 01       	movw	r10, r20
     e64:	19 01       	movw	r2, r18
     e66:	38 01       	movw	r6, r16
     e68:	4c 2c       	mov	r4, r12
     e6a:	dd 82       	std	Y+5, r13	; 0x05
     e6c:	60 e0       	ldi	r22, 0x00	; 0
     e6e:	fc 01       	movw	r30, r24
     e70:	86 81       	ldd	r24, Z+6	; 0x06
     e72:	0e 94 05 04 	call	0x80a	; 0x80a <digitalWrite>
     e76:	85 2d       	mov	r24, r5
     e78:	0e 94 4e 04 	call	0x89c	; 0x89c <_ZN8SPIClass8transferEh>
     e7c:	8e 01       	movw	r16, r28
     e7e:	0f 5f       	subi	r16, 0xFF	; 255
     e80:	1f 4f       	sbci	r17, 0xFF	; 255
     e82:	6e 01       	movw	r12, r28
     e84:	f5 e0       	ldi	r31, 0x05	; 5
     e86:	cf 0e       	add	r12, r31
     e88:	d1 1c       	adc	r13, r1
     e8a:	80 e0       	ldi	r24, 0x00	; 0
     e8c:	0e 94 4e 04 	call	0x89c	; 0x89c <_ZN8SPIClass8transferEh>
     e90:	f8 01       	movw	r30, r16
     e92:	81 93       	st	Z+, r24
     e94:	8f 01       	movw	r16, r30
     e96:	ec 15       	cp	r30, r12
     e98:	fd 05       	cpc	r31, r13
     e9a:	b9 f7       	brne	.-18     	; 0xe8a <_ZN7MCP_CAN19mcp2515_read_canMsgEhPVmPVhS3_S3_S3_+0x5a>
     e9c:	2a 81       	ldd	r18, Y+2	; 0x02
     e9e:	39 81       	ldd	r19, Y+1	; 0x01
     ea0:	82 2f       	mov	r24, r18
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	65 e0       	ldi	r22, 0x05	; 5
     ea6:	95 95       	asr	r25
     ea8:	87 95       	ror	r24
     eaa:	6a 95       	dec	r22
     eac:	e1 f7       	brne	.-8      	; 0xea6 <_ZN7MCP_CAN19mcp2515_read_canMsgEhPVmPVhS3_S3_S3_+0x76>
     eae:	f8 e0       	ldi	r31, 0x08	; 8
     eb0:	3f 9f       	mul	r19, r31
     eb2:	80 0d       	add	r24, r0
     eb4:	91 1d       	adc	r25, r1
     eb6:	11 24       	eor	r1, r1
     eb8:	09 2e       	mov	r0, r25
     eba:	00 0c       	add	r0, r0
     ebc:	aa 0b       	sbc	r26, r26
     ebe:	bb 0b       	sbc	r27, r27
     ec0:	f5 01       	movw	r30, r10
     ec2:	80 83       	st	Z, r24
     ec4:	91 83       	std	Z+1, r25	; 0x01
     ec6:	a2 83       	std	Z+2, r26	; 0x02
     ec8:	b3 83       	std	Z+3, r27	; 0x03
     eca:	f1 01       	movw	r30, r2
     ecc:	10 82       	st	Z, r1
     ece:	23 ff       	sbrs	r18, 3
     ed0:	3a c0       	rjmp	.+116    	; 0xf46 <_ZN7MCP_CAN19mcp2515_read_canMsgEhPVmPVhS3_S3_S3_+0x116>
     ed2:	f5 01       	movw	r30, r10
     ed4:	80 81       	ld	r24, Z
     ed6:	91 81       	ldd	r25, Z+1	; 0x01
     ed8:	a2 81       	ldd	r26, Z+2	; 0x02
     eda:	b3 81       	ldd	r27, Z+3	; 0x03
     edc:	32 e0       	ldi	r19, 0x02	; 2
     ede:	88 0f       	add	r24, r24
     ee0:	99 1f       	adc	r25, r25
     ee2:	aa 1f       	adc	r26, r26
     ee4:	bb 1f       	adc	r27, r27
     ee6:	3a 95       	dec	r19
     ee8:	d1 f7       	brne	.-12     	; 0xede <_ZN7MCP_CAN19mcp2515_read_canMsgEhPVmPVhS3_S3_S3_+0xae>
     eea:	23 70       	andi	r18, 0x03	; 3
     eec:	82 0f       	add	r24, r18
     eee:	91 1d       	adc	r25, r1
     ef0:	a1 1d       	adc	r26, r1
     ef2:	b1 1d       	adc	r27, r1
     ef4:	80 83       	st	Z, r24
     ef6:	91 83       	std	Z+1, r25	; 0x01
     ef8:	a2 83       	std	Z+2, r26	; 0x02
     efa:	b3 83       	std	Z+3, r27	; 0x03
     efc:	80 81       	ld	r24, Z
     efe:	91 81       	ldd	r25, Z+1	; 0x01
     f00:	a2 81       	ldd	r26, Z+2	; 0x02
     f02:	b3 81       	ldd	r27, Z+3	; 0x03
     f04:	ba 2f       	mov	r27, r26
     f06:	a9 2f       	mov	r26, r25
     f08:	98 2f       	mov	r25, r24
     f0a:	88 27       	eor	r24, r24
     f0c:	2b 81       	ldd	r18, Y+3	; 0x03
     f0e:	82 0f       	add	r24, r18
     f10:	91 1d       	adc	r25, r1
     f12:	a1 1d       	adc	r26, r1
     f14:	b1 1d       	adc	r27, r1
     f16:	80 83       	st	Z, r24
     f18:	91 83       	std	Z+1, r25	; 0x01
     f1a:	a2 83       	std	Z+2, r26	; 0x02
     f1c:	b3 83       	std	Z+3, r27	; 0x03
     f1e:	80 81       	ld	r24, Z
     f20:	91 81       	ldd	r25, Z+1	; 0x01
     f22:	a2 81       	ldd	r26, Z+2	; 0x02
     f24:	b3 81       	ldd	r27, Z+3	; 0x03
     f26:	ba 2f       	mov	r27, r26
     f28:	a9 2f       	mov	r26, r25
     f2a:	98 2f       	mov	r25, r24
     f2c:	88 27       	eor	r24, r24
     f2e:	2c 81       	ldd	r18, Y+4	; 0x04
     f30:	82 0f       	add	r24, r18
     f32:	91 1d       	adc	r25, r1
     f34:	a1 1d       	adc	r26, r1
     f36:	b1 1d       	adc	r27, r1
     f38:	80 83       	st	Z, r24
     f3a:	91 83       	std	Z+1, r25	; 0x01
     f3c:	a2 83       	std	Z+2, r26	; 0x02
     f3e:	b3 83       	std	Z+3, r27	; 0x03
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	f1 01       	movw	r30, r2
     f44:	80 83       	st	Z, r24
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	0e 94 4e 04 	call	0x89c	; 0x89c <_ZN8SPIClass8transferEh>
     f4c:	98 2f       	mov	r25, r24
     f4e:	9f 70       	andi	r25, 0x0F	; 15
     f50:	f7 01       	movw	r30, r14
     f52:	90 83       	st	Z, r25
     f54:	86 fb       	bst	r24, 6
     f56:	88 27       	eor	r24, r24
     f58:	80 f9       	bld	r24, 0
     f5a:	f3 01       	movw	r30, r6
     f5c:	80 83       	st	Z, r24
     f5e:	c4 2c       	mov	r12, r4
     f60:	dd 80       	ldd	r13, Y+5	; 0x05
     f62:	10 e0       	ldi	r17, 0x00	; 0
     f64:	f7 01       	movw	r30, r14
     f66:	80 81       	ld	r24, Z
     f68:	18 17       	cp	r17, r24
     f6a:	50 f4       	brcc	.+20     	; 0xf80 <_ZN7MCP_CAN19mcp2515_read_canMsgEhPVmPVhS3_S3_S3_+0x150>
     f6c:	18 30       	cpi	r17, 0x08	; 8
     f6e:	41 f0       	breq	.+16     	; 0xf80 <_ZN7MCP_CAN19mcp2515_read_canMsgEhPVmPVhS3_S3_S3_+0x150>
     f70:	80 e0       	ldi	r24, 0x00	; 0
     f72:	0e 94 4e 04 	call	0x89c	; 0x89c <_ZN8SPIClass8transferEh>
     f76:	f6 01       	movw	r30, r12
     f78:	81 93       	st	Z+, r24
     f7a:	6f 01       	movw	r12, r30
     f7c:	1f 5f       	subi	r17, 0xFF	; 255
     f7e:	f2 cf       	rjmp	.-28     	; 0xf64 <_ZN7MCP_CAN19mcp2515_read_canMsgEhPVmPVhS3_S3_S3_+0x134>
     f80:	61 e0       	ldi	r22, 0x01	; 1
     f82:	f4 01       	movw	r30, r8
     f84:	86 81       	ldd	r24, Z+6	; 0x06
     f86:	0f 90       	pop	r0
     f88:	0f 90       	pop	r0
     f8a:	0f 90       	pop	r0
     f8c:	0f 90       	pop	r0
     f8e:	0f 90       	pop	r0
     f90:	df 91       	pop	r29
     f92:	cf 91       	pop	r28
     f94:	1f 91       	pop	r17
     f96:	0f 91       	pop	r16
     f98:	ff 90       	pop	r15
     f9a:	ef 90       	pop	r14
     f9c:	df 90       	pop	r13
     f9e:	cf 90       	pop	r12
     fa0:	bf 90       	pop	r11
     fa2:	af 90       	pop	r10
     fa4:	9f 90       	pop	r9
     fa6:	8f 90       	pop	r8
     fa8:	7f 90       	pop	r7
     faa:	6f 90       	pop	r6
     fac:	5f 90       	pop	r5
     fae:	4f 90       	pop	r4
     fb0:	3f 90       	pop	r3
     fb2:	2f 90       	pop	r2
     fb4:	0c 94 05 04 	jmp	0x80a	; 0x80a <digitalWrite>

00000fb8 <_ZN7MCP_CAN22mcp2515_start_transmitEh>:
     fb8:	1f 93       	push	r17
     fba:	cf 93       	push	r28
     fbc:	df 93       	push	r29
     fbe:	ec 01       	movw	r28, r24
     fc0:	16 2f       	mov	r17, r22
     fc2:	80 e5       	ldi	r24, 0x50	; 80
     fc4:	91 e0       	ldi	r25, 0x01	; 1
     fc6:	0e 94 34 04 	call	0x868	; 0x868 <_ZN8SPIClass16beginTransactionE11SPISettings>
     fca:	60 e0       	ldi	r22, 0x00	; 0
     fcc:	8e 81       	ldd	r24, Y+6	; 0x06
     fce:	0e 94 05 04 	call	0x80a	; 0x80a <digitalWrite>
     fd2:	81 2f       	mov	r24, r17
     fd4:	0e 94 66 04 	call	0x8cc	; 0x8cc <_Z11txSidhToRTSh>
     fd8:	0e 94 4e 04 	call	0x89c	; 0x89c <_ZN8SPIClass8transferEh>
     fdc:	61 e0       	ldi	r22, 0x01	; 1
     fde:	8e 81       	ldd	r24, Y+6	; 0x06
     fe0:	0e 94 05 04 	call	0x80a	; 0x80a <digitalWrite>
     fe4:	df 91       	pop	r29
     fe6:	cf 91       	pop	r28
     fe8:	1f 91       	pop	r17
     fea:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <_ZN8SPIClass14endTransactionEv>

00000fee <_ZN7MCP_CAN20mcp2515_write_canMsgEhmhhhPVKh>:
     fee:	4f 92       	push	r4
     ff0:	5f 92       	push	r5
     ff2:	6f 92       	push	r6
     ff4:	7f 92       	push	r7
     ff6:	8f 92       	push	r8
     ff8:	9f 92       	push	r9
     ffa:	af 92       	push	r10
     ffc:	bf 92       	push	r11
     ffe:	cf 92       	push	r12
    1000:	df 92       	push	r13
    1002:	ef 92       	push	r14
    1004:	ff 92       	push	r15
    1006:	0f 93       	push	r16
    1008:	1f 93       	push	r17
    100a:	cf 93       	push	r28
    100c:	df 93       	push	r29
    100e:	00 d0       	rcall	.+0      	; 0x1010 <_ZN7MCP_CAN20mcp2515_write_canMsgEhmhhhPVKh+0x22>
    1010:	00 d0       	rcall	.+0      	; 0x1012 <_ZN7MCP_CAN20mcp2515_write_canMsgEhmhhhPVKh+0x24>
    1012:	cd b7       	in	r28, 0x3d	; 61
    1014:	de b7       	in	r29, 0x3e	; 62
    1016:	4c 01       	movw	r8, r24
    1018:	d6 2e       	mov	r13, r22
    101a:	29 01       	movw	r4, r18
    101c:	3a 01       	movw	r6, r20
    101e:	86 2f       	mov	r24, r22
    1020:	0e 94 74 04 	call	0x8e8	; 0x8e8 <_Z14txSidhToTxLoadh>
    1024:	18 2f       	mov	r17, r24
    1026:	e1 10       	cpse	r14, r1
    1028:	02 c0       	rjmp	.+4      	; 0x102e <_ZN7MCP_CAN20mcp2515_write_canMsgEhmhhhPVKh+0x40>
    102a:	f1 2c       	mov	r15, r1
    102c:	02 c0       	rjmp	.+4      	; 0x1032 <_ZN7MCP_CAN20mcp2515_write_canMsgEhmhhhPVKh+0x44>
    102e:	80 e4       	ldi	r24, 0x40	; 64
    1030:	f8 2e       	mov	r15, r24
    1032:	9e 01       	movw	r18, r28
    1034:	2f 5f       	subi	r18, 0xFF	; 255
    1036:	3f 4f       	sbci	r19, 0xFF	; 255
    1038:	b3 01       	movw	r22, r6
    103a:	a2 01       	movw	r20, r4
    103c:	80 2f       	mov	r24, r16
    103e:	0e 94 f1 06 	call	0xde2	; 0xde2 <_Z17mcp2515_id_to_bufhmPh>
    1042:	80 e5       	ldi	r24, 0x50	; 80
    1044:	91 e0       	ldi	r25, 0x01	; 1
    1046:	0e 94 34 04 	call	0x868	; 0x868 <_ZN8SPIClass16beginTransactionE11SPISettings>
    104a:	60 e0       	ldi	r22, 0x00	; 0
    104c:	f4 01       	movw	r30, r8
    104e:	86 81       	ldd	r24, Z+6	; 0x06
    1050:	0e 94 05 04 	call	0x80a	; 0x80a <digitalWrite>
    1054:	81 2f       	mov	r24, r17
    1056:	0e 94 4e 04 	call	0x89c	; 0x89c <_ZN8SPIClass8transferEh>
    105a:	8e 01       	movw	r16, r28
    105c:	0f 5f       	subi	r16, 0xFF	; 255
    105e:	1f 4f       	sbci	r17, 0xFF	; 255
    1060:	3e 01       	movw	r6, r28
    1062:	f5 e0       	ldi	r31, 0x05	; 5
    1064:	6f 0e       	add	r6, r31
    1066:	71 1c       	adc	r7, r1
    1068:	f8 01       	movw	r30, r16
    106a:	81 91       	ld	r24, Z+
    106c:	8f 01       	movw	r16, r30
    106e:	0e 94 4e 04 	call	0x89c	; 0x89c <_ZN8SPIClass8transferEh>
    1072:	06 15       	cp	r16, r6
    1074:	17 05       	cpc	r17, r7
    1076:	c1 f7       	brne	.-16     	; 0x1068 <_ZN7MCP_CAN20mcp2515_write_canMsgEhmhhhPVKh+0x7a>
    1078:	8c 2d       	mov	r24, r12
    107a:	8f 29       	or	r24, r15
    107c:	0e 94 4e 04 	call	0x89c	; 0x89c <_ZN8SPIClass8transferEh>
    1080:	75 01       	movw	r14, r10
    1082:	10 e0       	ldi	r17, 0x00	; 0
    1084:	1c 15       	cp	r17, r12
    1086:	49 f0       	breq	.+18     	; 0x109a <_ZN7MCP_CAN20mcp2515_write_canMsgEhmhhhPVKh+0xac>
    1088:	18 30       	cpi	r17, 0x08	; 8
    108a:	39 f0       	breq	.+14     	; 0x109a <_ZN7MCP_CAN20mcp2515_write_canMsgEhmhhhPVKh+0xac>
    108c:	f7 01       	movw	r30, r14
    108e:	81 91       	ld	r24, Z+
    1090:	7f 01       	movw	r14, r30
    1092:	0e 94 4e 04 	call	0x89c	; 0x89c <_ZN8SPIClass8transferEh>
    1096:	1f 5f       	subi	r17, 0xFF	; 255
    1098:	f5 cf       	rjmp	.-22     	; 0x1084 <_ZN7MCP_CAN20mcp2515_write_canMsgEhmhhhPVKh+0x96>
    109a:	61 e0       	ldi	r22, 0x01	; 1
    109c:	f4 01       	movw	r30, r8
    109e:	86 81       	ldd	r24, Z+6	; 0x06
    10a0:	0e 94 05 04 	call	0x80a	; 0x80a <digitalWrite>
    10a4:	0e 94 55 04 	call	0x8aa	; 0x8aa <_ZN8SPIClass14endTransactionEv>
    10a8:	6d 2d       	mov	r22, r13
    10aa:	c4 01       	movw	r24, r8
    10ac:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <_ZN7MCP_CAN22mcp2515_start_transmitEh>
    10b0:	0f 90       	pop	r0
    10b2:	0f 90       	pop	r0
    10b4:	0f 90       	pop	r0
    10b6:	0f 90       	pop	r0
    10b8:	df 91       	pop	r29
    10ba:	cf 91       	pop	r28
    10bc:	1f 91       	pop	r17
    10be:	0f 91       	pop	r16
    10c0:	ff 90       	pop	r15
    10c2:	ef 90       	pop	r14
    10c4:	df 90       	pop	r13
    10c6:	cf 90       	pop	r12
    10c8:	bf 90       	pop	r11
    10ca:	af 90       	pop	r10
    10cc:	9f 90       	pop	r9
    10ce:	8f 90       	pop	r8
    10d0:	7f 90       	pop	r7
    10d2:	6f 90       	pop	r6
    10d4:	5f 90       	pop	r5
    10d6:	4f 90       	pop	r4
    10d8:	08 95       	ret

000010da <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh>:
    10da:	ef 92       	push	r14
    10dc:	ff 92       	push	r15
    10de:	0f 93       	push	r16
    10e0:	1f 93       	push	r17
    10e2:	cf 93       	push	r28
    10e4:	8c 01       	movw	r16, r24
    10e6:	7b 01       	movw	r14, r22
    10e8:	0e 94 0a 05 	call	0xa14	; 0xa14 <_ZN7MCP_CAN18mcp2515_readStatusEv>
    10ec:	84 75       	andi	r24, 0x54	; 84
    10ee:	f7 01       	movw	r30, r14
    10f0:	10 82       	st	Z, r1
    10f2:	84 35       	cpi	r24, 0x54	; 84
    10f4:	91 f1       	breq	.+100    	; 0x115a <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh+0x80>
    10f6:	f8 01       	movw	r30, r16
    10f8:	91 85       	ldd	r25, Z+9	; 0x09
    10fa:	43 e0       	ldi	r20, 0x03	; 3
    10fc:	50 e0       	ldi	r21, 0x00	; 0
    10fe:	49 1b       	sub	r20, r25
    1100:	51 09       	sbc	r21, r1
    1102:	e9 e1       	ldi	r30, 0x19	; 25
    1104:	f3 e0       	ldi	r31, 0x03	; 3
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	29 2f       	mov	r18, r25
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	24 17       	cp	r18, r20
    110e:	35 07       	cpc	r19, r21
    1110:	24 f5       	brge	.+72     	; 0x115a <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh+0x80>
    1112:	93 30       	cpi	r25, 0x03	; 3
    1114:	10 f4       	brcc	.+4      	; 0x111a <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh+0x40>
    1116:	c0 81       	ld	r28, Z
    1118:	01 c0       	rjmp	.+2      	; 0x111c <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh+0x42>
    111a:	cf ef       	ldi	r28, 0xFF	; 255
    111c:	c8 23       	and	r28, r24
    111e:	31 96       	adiw	r30, 0x01	; 1
    1120:	c1 11       	cpse	r28, r1
    1122:	19 c0       	rjmp	.+50     	; 0x1156 <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh+0x7c>
    1124:	93 30       	cpi	r25, 0x03	; 3
    1126:	28 f4       	brcc	.+10     	; 0x1132 <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh+0x58>
    1128:	f9 01       	movw	r30, r18
    112a:	e1 5e       	subi	r30, 0xE1	; 225
    112c:	fc 4f       	sbci	r31, 0xFC	; 252
    112e:	80 81       	ld	r24, Z
    1130:	01 c0       	rjmp	.+2      	; 0x1134 <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh+0x5a>
    1132:	80 e5       	ldi	r24, 0x50	; 80
    1134:	8f 5f       	subi	r24, 0xFF	; 255
    1136:	f7 01       	movw	r30, r14
    1138:	80 83       	st	Z, r24
    113a:	93 30       	cpi	r25, 0x03	; 3
    113c:	28 f4       	brcc	.+10     	; 0x1148 <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh+0x6e>
    113e:	f9 01       	movw	r30, r18
    1140:	e4 5e       	subi	r30, 0xE4	; 228
    1142:	fc 4f       	sbci	r31, 0xFC	; 252
    1144:	40 81       	ld	r20, Z
    1146:	01 c0       	rjmp	.+2      	; 0x114a <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh+0x70>
    1148:	40 e0       	ldi	r20, 0x00	; 0
    114a:	20 e0       	ldi	r18, 0x00	; 0
    114c:	6c e2       	ldi	r22, 0x2C	; 44
    114e:	c8 01       	movw	r24, r16
    1150:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>
    1154:	03 c0       	rjmp	.+6      	; 0x115c <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh+0x82>
    1156:	9f 5f       	subi	r25, 0xFF	; 255
    1158:	d7 cf       	rjmp	.-82     	; 0x1108 <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh+0x2e>
    115a:	c2 e0       	ldi	r28, 0x02	; 2
    115c:	8c 2f       	mov	r24, r28
    115e:	cf 91       	pop	r28
    1160:	1f 91       	pop	r17
    1162:	0f 91       	pop	r16
    1164:	ff 90       	pop	r15
    1166:	ef 90       	pop	r14
    1168:	08 95       	ret

0000116a <_ZN7MCP_CAN7init_CSEh>:
    116a:	cf 93       	push	r28
    116c:	df 93       	push	r29
    116e:	ec 01       	movw	r28, r24
    1170:	66 23       	and	r22, r22
    1172:	59 f0       	breq	.+22     	; 0x118a <_ZN7MCP_CAN7init_CSEh+0x20>
    1174:	86 2f       	mov	r24, r22
    1176:	6e 83       	std	Y+6, r22	; 0x06
    1178:	61 e0       	ldi	r22, 0x01	; 1
    117a:	0e 94 c9 03 	call	0x792	; 0x792 <pinMode>
    117e:	61 e0       	ldi	r22, 0x01	; 1
    1180:	8e 81       	ldd	r24, Y+6	; 0x06
    1182:	df 91       	pop	r29
    1184:	cf 91       	pop	r28
    1186:	0c 94 05 04 	jmp	0x80a	; 0x80a <digitalWrite>
    118a:	df 91       	pop	r29
    118c:	cf 91       	pop	r28
    118e:	08 95       	ret

00001190 <_ZN7MCP_CANC1Eh>:
    1190:	fc 01       	movw	r30, r24
    1192:	11 86       	std	Z+9, r1	; 0x09
    1194:	29 e6       	ldi	r18, 0x69	; 105
    1196:	33 e0       	ldi	r19, 0x03	; 3
    1198:	30 87       	std	Z+8, r19	; 0x08
    119a:	27 83       	std	Z+7, r18	; 0x07
    119c:	0c 94 b5 08 	jmp	0x116a	; 0x116a <_ZN7MCP_CAN7init_CSEh>

000011a0 <_ZN7MCP_CAN5beginEhh>:
    11a0:	0f 93       	push	r16
    11a2:	1f 93       	push	r17
    11a4:	cf 93       	push	r28
    11a6:	df 93       	push	r29
    11a8:	ec 01       	movw	r28, r24
    11aa:	16 2f       	mov	r17, r22
    11ac:	04 2f       	mov	r16, r20
    11ae:	0e 94 95 0a 	call	0x152a	; 0x152a <_ZN8SPIClass5beginEv>
    11b2:	40 2f       	mov	r20, r16
    11b4:	61 2f       	mov	r22, r17
    11b6:	ce 01       	movw	r24, r28
    11b8:	0e 94 9c 06 	call	0xd38	; 0xd38 <_ZN7MCP_CAN12mcp2515_initEhh>
    11bc:	91 e0       	ldi	r25, 0x01	; 1
    11be:	81 11       	cpse	r24, r1
    11c0:	01 c0       	rjmp	.+2      	; 0x11c4 <_ZN7MCP_CAN5beginEhh+0x24>
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	89 2f       	mov	r24, r25
    11c6:	df 91       	pop	r29
    11c8:	cf 91       	pop	r28
    11ca:	1f 91       	pop	r17
    11cc:	0f 91       	pop	r16
    11ce:	08 95       	ret

000011d0 <_ZN7MCP_CAN7sendMsgEmhhhPKhb>:
    11d0:	2f 92       	push	r2
    11d2:	3f 92       	push	r3
    11d4:	4f 92       	push	r4
    11d6:	5f 92       	push	r5
    11d8:	6f 92       	push	r6
    11da:	7f 92       	push	r7
    11dc:	8f 92       	push	r8
    11de:	9f 92       	push	r9
    11e0:	af 92       	push	r10
    11e2:	bf 92       	push	r11
    11e4:	cf 92       	push	r12
    11e6:	df 92       	push	r13
    11e8:	ef 92       	push	r14
    11ea:	ff 92       	push	r15
    11ec:	0f 93       	push	r16
    11ee:	1f 93       	push	r17
    11f0:	cf 93       	push	r28
    11f2:	df 93       	push	r29
    11f4:	1f 92       	push	r1
    11f6:	cd b7       	in	r28, 0x3d	; 61
    11f8:	de b7       	in	r29, 0x3e	; 62
    11fa:	4c 01       	movw	r8, r24
    11fc:	2a 01       	movw	r4, r20
    11fe:	3b 01       	movw	r6, r22
    1200:	22 2e       	mov	r2, r18
    1202:	30 2e       	mov	r3, r16
    1204:	fa 2c       	mov	r15, r10
    1206:	fc 01       	movw	r30, r24
    1208:	41 83       	std	Z+1, r20	; 0x01
    120a:	52 83       	std	Z+2, r21	; 0x02
    120c:	63 83       	std	Z+3, r22	; 0x03
    120e:	74 83       	std	Z+4, r23	; 0x04
    1210:	20 83       	st	Z, r18
    1212:	05 83       	std	Z+5, r16	; 0x05
    1214:	00 e0       	ldi	r16, 0x00	; 0
    1216:	10 e0       	ldi	r17, 0x00	; 0
    1218:	be 01       	movw	r22, r28
    121a:	6f 5f       	subi	r22, 0xFF	; 255
    121c:	7f 4f       	sbci	r23, 0xFF	; 255
    121e:	c4 01       	movw	r24, r8
    1220:	0e 94 6d 08 	call	0x10da	; 0x10da <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh>
    1224:	0f 5f       	subi	r16, 0xFF	; 255
    1226:	1f 4f       	sbci	r17, 0xFF	; 255
    1228:	82 30       	cpi	r24, 0x02	; 2
    122a:	41 f4       	brne	.+16     	; 0x123c <_ZN7MCP_CAN7sendMsgEmhhhPKhb+0x6c>
    122c:	02 33       	cpi	r16, 0x32	; 50
    122e:	11 05       	cpc	r17, r1
    1230:	61 f1       	breq	.+88     	; 0x128a <_ZN7MCP_CAN7sendMsgEmhhhPKhb+0xba>
    1232:	8a e0       	ldi	r24, 0x0A	; 10
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <delayMicroseconds>
    123a:	ee cf       	rjmp	.-36     	; 0x1218 <_ZN7MCP_CAN7sendMsgEmhhhPKhb+0x48>
    123c:	02 33       	cpi	r16, 0x32	; 50
    123e:	11 05       	cpc	r17, r1
    1240:	21 f1       	breq	.+72     	; 0x128a <_ZN7MCP_CAN7sendMsgEmhhhPKhb+0xba>
    1242:	56 01       	movw	r10, r12
    1244:	ce 2c       	mov	r12, r14
    1246:	e3 2c       	mov	r14, r3
    1248:	02 2d       	mov	r16, r2
    124a:	a3 01       	movw	r20, r6
    124c:	92 01       	movw	r18, r4
    124e:	69 81       	ldd	r22, Y+1	; 0x01
    1250:	c4 01       	movw	r24, r8
    1252:	0e 94 f7 07 	call	0xfee	; 0xfee <_ZN7MCP_CAN20mcp2515_write_canMsgEhmhhhPVKh>
    1256:	ff 20       	and	r15, r15
    1258:	b1 f0       	breq	.+44     	; 0x1286 <_ZN7MCP_CAN7sendMsgEmhhhPKhb+0xb6>
    125a:	00 e0       	ldi	r16, 0x00	; 0
    125c:	10 e0       	ldi	r17, 0x00	; 0
    125e:	0f 5f       	subi	r16, 0xFF	; 255
    1260:	1f 4f       	sbci	r17, 0xFF	; 255
    1262:	69 81       	ldd	r22, Y+1	; 0x01
    1264:	61 50       	subi	r22, 0x01	; 1
    1266:	c4 01       	movw	r24, r8
    1268:	0e 94 9e 04 	call	0x93c	; 0x93c <_ZN7MCP_CAN20mcp2515_readRegisterEh>
    126c:	83 ff       	sbrs	r24, 3
    126e:	08 c0       	rjmp	.+16     	; 0x1280 <_ZN7MCP_CAN7sendMsgEmhhhPKhb+0xb0>
    1270:	02 33       	cpi	r16, 0x32	; 50
    1272:	11 05       	cpc	r17, r1
    1274:	61 f0       	breq	.+24     	; 0x128e <_ZN7MCP_CAN7sendMsgEmhhhPKhb+0xbe>
    1276:	8a e0       	ldi	r24, 0x0A	; 10
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <delayMicroseconds>
    127e:	ef cf       	rjmp	.-34     	; 0x125e <_ZN7MCP_CAN7sendMsgEmhhhPKhb+0x8e>
    1280:	02 33       	cpi	r16, 0x32	; 50
    1282:	11 05       	cpc	r17, r1
    1284:	21 f0       	breq	.+8      	; 0x128e <_ZN7MCP_CAN7sendMsgEmhhhPKhb+0xbe>
    1286:	80 e0       	ldi	r24, 0x00	; 0
    1288:	03 c0       	rjmp	.+6      	; 0x1290 <_ZN7MCP_CAN7sendMsgEmhhhPKhb+0xc0>
    128a:	86 e0       	ldi	r24, 0x06	; 6
    128c:	01 c0       	rjmp	.+2      	; 0x1290 <_ZN7MCP_CAN7sendMsgEmhhhPKhb+0xc0>
    128e:	87 e0       	ldi	r24, 0x07	; 7
    1290:	0f 90       	pop	r0
    1292:	df 91       	pop	r29
    1294:	cf 91       	pop	r28
    1296:	1f 91       	pop	r17
    1298:	0f 91       	pop	r16
    129a:	ff 90       	pop	r15
    129c:	ef 90       	pop	r14
    129e:	df 90       	pop	r13
    12a0:	cf 90       	pop	r12
    12a2:	bf 90       	pop	r11
    12a4:	af 90       	pop	r10
    12a6:	9f 90       	pop	r9
    12a8:	8f 90       	pop	r8
    12aa:	7f 90       	pop	r7
    12ac:	6f 90       	pop	r6
    12ae:	5f 90       	pop	r5
    12b0:	4f 90       	pop	r4
    12b2:	3f 90       	pop	r3
    12b4:	2f 90       	pop	r2
    12b6:	08 95       	ret

000012b8 <_ZN7MCP_CAN10sendMsgBufEmhhPKhb>:
    12b8:	af 92       	push	r10
    12ba:	cf 92       	push	r12
    12bc:	df 92       	push	r13
    12be:	ef 92       	push	r14
    12c0:	ff 92       	push	r15
    12c2:	0f 93       	push	r16
    12c4:	ac 2c       	mov	r10, r12
    12c6:	67 01       	movw	r12, r14
    12c8:	e0 2e       	mov	r14, r16
    12ca:	00 e0       	ldi	r16, 0x00	; 0
    12cc:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <_ZN7MCP_CAN7sendMsgEmhhhPKhb>
    12d0:	0f 91       	pop	r16
    12d2:	ff 90       	pop	r15
    12d4:	ef 90       	pop	r14
    12d6:	df 90       	pop	r13
    12d8:	cf 90       	pop	r12
    12da:	af 90       	pop	r10
    12dc:	08 95       	ret

000012de <_ZN7MCP_CAN12readMsgBufIDEhPVmPVhS3_S3_S3_>:
    12de:	6f 92       	push	r6
    12e0:	7f 92       	push	r7
    12e2:	8f 92       	push	r8
    12e4:	9f 92       	push	r9
    12e6:	af 92       	push	r10
    12e8:	bf 92       	push	r11
    12ea:	cf 92       	push	r12
    12ec:	df 92       	push	r13
    12ee:	ef 92       	push	r14
    12f0:	ff 92       	push	r15
    12f2:	0f 93       	push	r16
    12f4:	1f 93       	push	r17
    12f6:	cf 93       	push	r28
    12f8:	df 93       	push	r29
    12fa:	ec 01       	movw	r28, r24
    12fc:	5a 01       	movw	r10, r20
    12fe:	49 01       	movw	r8, r18
    1300:	38 01       	movw	r6, r16
    1302:	60 ff       	sbrs	r22, 0
    1304:	02 c0       	rjmp	.+4      	; 0x130a <_ZN7MCP_CAN12readMsgBufIDEhPVmPVhS3_S3_S3_+0x2c>
    1306:	60 e9       	ldi	r22, 0x90	; 144
    1308:	03 c0       	rjmp	.+6      	; 0x1310 <_ZN7MCP_CAN12readMsgBufIDEhPVmPVhS3_S3_S3_+0x32>
    130a:	61 ff       	sbrs	r22, 1
    130c:	15 c0       	rjmp	.+42     	; 0x1338 <_ZN7MCP_CAN12readMsgBufIDEhPVmPVhS3_S3_S3_+0x5a>
    130e:	64 e9       	ldi	r22, 0x94	; 148
    1310:	ce 01       	movw	r24, r28
    1312:	0e 94 18 07 	call	0xe30	; 0xe30 <_ZN7MCP_CAN19mcp2515_read_canMsgEhPVmPVhS3_S3_S3_>
    1316:	f3 01       	movw	r30, r6
    1318:	80 81       	ld	r24, Z
    131a:	8d 83       	std	Y+5, r24	; 0x05
    131c:	f4 01       	movw	r30, r8
    131e:	80 81       	ld	r24, Z
    1320:	88 83       	st	Y, r24
    1322:	f5 01       	movw	r30, r10
    1324:	80 81       	ld	r24, Z
    1326:	91 81       	ldd	r25, Z+1	; 0x01
    1328:	a2 81       	ldd	r26, Z+2	; 0x02
    132a:	b3 81       	ldd	r27, Z+3	; 0x03
    132c:	89 83       	std	Y+1, r24	; 0x01
    132e:	9a 83       	std	Y+2, r25	; 0x02
    1330:	ab 83       	std	Y+3, r26	; 0x03
    1332:	bc 83       	std	Y+4, r27	; 0x04
    1334:	80 e0       	ldi	r24, 0x00	; 0
    1336:	03 c0       	rjmp	.+6      	; 0x133e <_ZN7MCP_CAN12readMsgBufIDEhPVmPVhS3_S3_S3_+0x60>
    1338:	f7 01       	movw	r30, r14
    133a:	10 82       	st	Z, r1
    133c:	84 e0       	ldi	r24, 0x04	; 4
    133e:	df 91       	pop	r29
    1340:	cf 91       	pop	r28
    1342:	1f 91       	pop	r17
    1344:	0f 91       	pop	r16
    1346:	ff 90       	pop	r15
    1348:	ef 90       	pop	r14
    134a:	df 90       	pop	r13
    134c:	cf 90       	pop	r12
    134e:	bf 90       	pop	r11
    1350:	af 90       	pop	r10
    1352:	9f 90       	pop	r9
    1354:	8f 90       	pop	r8
    1356:	7f 90       	pop	r7
    1358:	6f 90       	pop	r6
    135a:	08 95       	ret

0000135c <_ZN7MCP_CAN14readRxTxStatusEv>:
    135c:	0e 94 0a 05 	call	0xa14	; 0xa14 <_ZN7MCP_CAN18mcp2515_readStatusEv>
    1360:	38 2f       	mov	r19, r24
    1362:	3b 7a       	andi	r19, 0xAB	; 171
    1364:	83 fd       	sbrc	r24, 3
    1366:	02 c0       	rjmp	.+4      	; 0x136c <_ZN7MCP_CAN14readRxTxStatusEv+0x10>
    1368:	20 e0       	ldi	r18, 0x00	; 0
    136a:	01 c0       	rjmp	.+2      	; 0x136e <_ZN7MCP_CAN14readRxTxStatusEv+0x12>
    136c:	24 e0       	ldi	r18, 0x04	; 4
    136e:	85 fd       	sbrc	r24, 5
    1370:	02 c0       	rjmp	.+4      	; 0x1376 <_ZN7MCP_CAN14readRxTxStatusEv+0x1a>
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	01 c0       	rjmp	.+2      	; 0x1378 <_ZN7MCP_CAN14readRxTxStatusEv+0x1c>
    1376:	98 e0       	ldi	r25, 0x08	; 8
    1378:	83 2f       	mov	r24, r19
    137a:	88 1f       	adc	r24, r24
    137c:	88 27       	eor	r24, r24
    137e:	88 1f       	adc	r24, r24
    1380:	82 95       	swap	r24
    1382:	80 7f       	andi	r24, 0xF0	; 240
    1384:	33 70       	andi	r19, 0x03	; 3
    1386:	23 2b       	or	r18, r19
    1388:	92 2b       	or	r25, r18
    138a:	89 2b       	or	r24, r25
    138c:	08 95       	ret

0000138e <_ZN7MCP_CAN10readMsgBufEPhS0_>:
    138e:	cf 92       	push	r12
    1390:	df 92       	push	r13
    1392:	ef 92       	push	r14
    1394:	ff 92       	push	r15
    1396:	0f 93       	push	r16
    1398:	1f 93       	push	r17
    139a:	cf 93       	push	r28
    139c:	df 93       	push	r29
    139e:	ec 01       	movw	r28, r24
    13a0:	7b 01       	movw	r14, r22
    13a2:	6a 01       	movw	r12, r20
    13a4:	0e 94 ae 09 	call	0x135c	; 0x135c <_ZN7MCP_CAN14readRxTxStatusEv>
    13a8:	8e 01       	movw	r16, r28
    13aa:	0b 5f       	subi	r16, 0xFB	; 251
    13ac:	1f 4f       	sbci	r17, 0xFF	; 255
    13ae:	ae 01       	movw	r20, r28
    13b0:	4f 5f       	subi	r20, 0xFF	; 255
    13b2:	5f 4f       	sbci	r21, 0xFF	; 255
    13b4:	9e 01       	movw	r18, r28
    13b6:	68 2f       	mov	r22, r24
    13b8:	ce 01       	movw	r24, r28
    13ba:	0e 94 6f 09 	call	0x12de	; 0x12de <_ZN7MCP_CAN12readMsgBufIDEhPVmPVhS3_S3_S3_>
    13be:	df 91       	pop	r29
    13c0:	cf 91       	pop	r28
    13c2:	1f 91       	pop	r17
    13c4:	0f 91       	pop	r16
    13c6:	ff 90       	pop	r15
    13c8:	ef 90       	pop	r14
    13ca:	df 90       	pop	r13
    13cc:	cf 90       	pop	r12
    13ce:	08 95       	ret

000013d0 <_ZN7MCP_CAN12checkReceiveEv>:
    13d0:	0e 94 0a 05 	call	0xa14	; 0xa14 <_ZN7MCP_CAN18mcp2515_readStatusEv>
    13d4:	83 70       	andi	r24, 0x03	; 3
    13d6:	11 f4       	brne	.+4      	; 0x13dc <_ZN7MCP_CAN12checkReceiveEv+0xc>
    13d8:	84 e0       	ldi	r24, 0x04	; 4
    13da:	08 95       	ret
    13dc:	83 e0       	ldi	r24, 0x03	; 3
    13de:	08 95       	ret

000013e0 <_ZN7MCP_CAN10mcpPinModeEhh>:
/*********************************************************************************************************
** Function name:           mcpPinMode
** Descriptions:            switch supported pins between HiZ, interrupt, output or input
*********************************************************************************************************/
bool MCP_CAN::mcpPinMode(const byte pin, const byte mode)
{
    13e0:	0f 93       	push	r16
    13e2:	1f 93       	push	r17
    13e4:	cf 93       	push	r28
    13e6:	8c 01       	movw	r16, r24
    13e8:	c4 2f       	mov	r28, r20
    byte res;
    bool ret=true;

    switch(pin)
    13ea:	62 30       	cpi	r22, 0x02	; 2
    13ec:	79 f1       	breq	.+94     	; 0x144c <_ZN7MCP_CAN10mcpPinModeEhh+0x6c>
    13ee:	28 f4       	brcc	.+10     	; 0x13fa <_ZN7MCP_CAN10mcpPinModeEhh+0x1a>
    13f0:	66 23       	and	r22, r22
    13f2:	51 f0       	breq	.+20     	; 0x1408 <_ZN7MCP_CAN10mcpPinModeEhh+0x28>
    13f4:	61 30       	cpi	r22, 0x01	; 1
    13f6:	a9 f0       	breq	.+42     	; 0x1422 <_ZN7MCP_CAN10mcpPinModeEhh+0x42>
    13f8:	6c c0       	rjmp	.+216    	; 0x14d2 <_ZN7MCP_CAN10mcpPinModeEhh+0xf2>
    13fa:	63 30       	cpi	r22, 0x03	; 3
    13fc:	09 f4       	brne	.+2      	; 0x1400 <_ZN7MCP_CAN10mcpPinModeEhh+0x20>
    13fe:	48 c0       	rjmp	.+144    	; 0x1490 <_ZN7MCP_CAN10mcpPinModeEhh+0xb0>
    1400:	64 30       	cpi	r22, 0x04	; 4
    1402:	09 f4       	brne	.+2      	; 0x1406 <_ZN7MCP_CAN10mcpPinModeEhh+0x26>
    1404:	58 c0       	rjmp	.+176    	; 0x14b6 <_ZN7MCP_CAN10mcpPinModeEhh+0xd6>
    1406:	65 c0       	rjmp	.+202    	; 0x14d2 <_ZN7MCP_CAN10mcpPinModeEhh+0xf2>
    {
        case MCP_RX0BF:
            switch(mode) {
    1408:	41 30       	cpi	r20, 0x01	; 1
    140a:	41 f0       	breq	.+16     	; 0x141c <_ZN7MCP_CAN10mcpPinModeEhh+0x3c>
    140c:	20 f0       	brcs	.+8      	; 0x1416 <_ZN7MCP_CAN10mcpPinModeEhh+0x36>
    140e:	42 30       	cpi	r20, 0x02	; 2
    1410:	d1 f4       	brne	.+52     	; 0x1446 <_ZN7MCP_CAN10mcpPinModeEhh+0x66>
                break;
                case MCP_PIN_INT:
                    mcp2515_modifyRegister(MCP_BFPCTRL, B0BFM | B0BFE, B0BFM | B0BFE);
                break;
                case MCP_PIN_OUT:
                    mcp2515_modifyRegister(MCP_BFPCTRL, B0BFM | B0BFE, B0BFE);
    1412:	24 e0       	ldi	r18, 0x04	; 4
    1414:	04 c0       	rjmp	.+8      	; 0x141e <_ZN7MCP_CAN10mcpPinModeEhh+0x3e>
    switch(pin)
    {
        case MCP_RX0BF:
            switch(mode) {
                case MCP_PIN_HIZ:
                    mcp2515_modifyRegister(MCP_BFPCTRL, B0BFE, 0);
    1416:	20 e0       	ldi	r18, 0x00	; 0
    1418:	44 e0       	ldi	r20, 0x04	; 4
    141a:	0f c0       	rjmp	.+30     	; 0x143a <_ZN7MCP_CAN10mcpPinModeEhh+0x5a>
                break;
                case MCP_PIN_INT:
                    mcp2515_modifyRegister(MCP_BFPCTRL, B0BFM | B0BFE, B0BFM | B0BFE);
    141c:	25 e0       	ldi	r18, 0x05	; 5
                break;
                case MCP_PIN_OUT:
                    mcp2515_modifyRegister(MCP_BFPCTRL, B0BFM | B0BFE, B0BFE);
    141e:	45 e0       	ldi	r20, 0x05	; 5
    1420:	0c c0       	rjmp	.+24     	; 0x143a <_ZN7MCP_CAN10mcpPinModeEhh+0x5a>
                    return false;
            }
            return true;
        break;
        case MCP_RX1BF:
            switch(mode) {
    1422:	41 30       	cpi	r20, 0x01	; 1
    1424:	41 f0       	breq	.+16     	; 0x1436 <_ZN7MCP_CAN10mcpPinModeEhh+0x56>
    1426:	20 f0       	brcs	.+8      	; 0x1430 <_ZN7MCP_CAN10mcpPinModeEhh+0x50>
    1428:	42 30       	cpi	r20, 0x02	; 2
    142a:	69 f4       	brne	.+26     	; 0x1446 <_ZN7MCP_CAN10mcpPinModeEhh+0x66>
                break;
                case MCP_PIN_INT:
                    mcp2515_modifyRegister(MCP_BFPCTRL, B1BFM | B1BFE, B1BFM | B1BFE);
                break;
                case MCP_PIN_OUT:
                    mcp2515_modifyRegister(MCP_BFPCTRL, B1BFM | B1BFE, B1BFE);
    142c:	28 e0       	ldi	r18, 0x08	; 8
    142e:	04 c0       	rjmp	.+8      	; 0x1438 <_ZN7MCP_CAN10mcpPinModeEhh+0x58>
            return true;
        break;
        case MCP_RX1BF:
            switch(mode) {
                case MCP_PIN_HIZ:
                    mcp2515_modifyRegister(MCP_BFPCTRL, B1BFE, 0);
    1430:	20 e0       	ldi	r18, 0x00	; 0
    1432:	48 e0       	ldi	r20, 0x08	; 8
    1434:	02 c0       	rjmp	.+4      	; 0x143a <_ZN7MCP_CAN10mcpPinModeEhh+0x5a>
                break;
                case MCP_PIN_INT:
                    mcp2515_modifyRegister(MCP_BFPCTRL, B1BFM | B1BFE, B1BFM | B1BFE);
    1436:	2a e0       	ldi	r18, 0x0A	; 10
                break;
                case MCP_PIN_OUT:
                    mcp2515_modifyRegister(MCP_BFPCTRL, B1BFM | B1BFE, B1BFE);
    1438:	4a e0       	ldi	r20, 0x0A	; 10
    143a:	6c e0       	ldi	r22, 0x0C	; 12
    143c:	c8 01       	movw	r24, r16
    143e:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>
#if DEBUG_EN
                    Serial.print("Invalid pin mode request\r\n");
#endif
                    return false;
            }
            return true;
    1442:	81 e0       	ldi	r24, 0x01	; 1
                case MCP_PIN_INT:
                    mcp2515_modifyRegister(MCP_BFPCTRL, B1BFM | B1BFE, B1BFM | B1BFE);
                break;
                case MCP_PIN_OUT:
                    mcp2515_modifyRegister(MCP_BFPCTRL, B1BFM | B1BFE, B1BFE);
                break;
    1444:	4f c0       	rjmp	.+158    	; 0x14e4 <_ZN7MCP_CAN10mcpPinModeEhh+0x104>
                default:
#if DEBUG_EN
                    Serial.print("Invalid pin mode request\r\n");
    1446:	65 e5       	ldi	r22, 0x55	; 85
    1448:	72 e0       	ldi	r23, 0x02	; 2
    144a:	45 c0       	rjmp	.+138    	; 0x14d6 <_ZN7MCP_CAN10mcpPinModeEhh+0xf6>
                    return false;
            }
            return true;
        break;
        case MCP_TX0RTS:
            res = mcp2515_setCANCTRL_Mode(MODE_CONFIG);
    144c:	60 e8       	ldi	r22, 0x80	; 128
    144e:	0e 94 70 05 	call	0xae0	; 0xae0 <_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh>
            if(res > 0)
    1452:	88 23       	and	r24, r24
    1454:	19 f0       	breq	.+6      	; 0x145c <_ZN7MCP_CAN10mcpPinModeEhh+0x7c>
            {
#if DEBUG_EN
                Serial.print("Entering Configuration Mode Failure...\r\n");
    1456:	60 e7       	ldi	r22, 0x70	; 112
    1458:	72 e0       	ldi	r23, 0x02	; 2
    145a:	3d c0       	rjmp	.+122    	; 0x14d6 <_ZN7MCP_CAN10mcpPinModeEhh+0xf6>
#else
                delay(10);
#endif
                return false;
            }
            switch(mode) {
    145c:	c1 30       	cpi	r28, 0x01	; 1
    145e:	21 f0       	breq	.+8      	; 0x1468 <_ZN7MCP_CAN10mcpPinModeEhh+0x88>
    1460:	c3 30       	cpi	r28, 0x03	; 3
    1462:	29 f4       	brne	.+10     	; 0x146e <_ZN7MCP_CAN10mcpPinModeEhh+0x8e>
                case MCP_PIN_INT:
                    mcp2515_modifyRegister(MCP_TXRTSCTRL, B0RTSM, B0RTSM);
                break;
                case MCP_PIN_IN:
                    mcp2515_modifyRegister(MCP_TXRTSCTRL, B0RTSM, 0);
    1464:	20 e0       	ldi	r18, 0x00	; 0
    1466:	01 c0       	rjmp	.+2      	; 0x146a <_ZN7MCP_CAN10mcpPinModeEhh+0x8a>
#endif
                return false;
            }
            switch(mode) {
                case MCP_PIN_INT:
                    mcp2515_modifyRegister(MCP_TXRTSCTRL, B0RTSM, B0RTSM);
    1468:	21 e0       	ldi	r18, 0x01	; 1
                break;
                case MCP_PIN_IN:
                    mcp2515_modifyRegister(MCP_TXRTSCTRL, B0RTSM, 0);
    146a:	41 e0       	ldi	r20, 0x01	; 1
    146c:	1e c0       	rjmp	.+60     	; 0x14aa <_ZN7MCP_CAN10mcpPinModeEhh+0xca>
                break;
                default:
#if DEBUG_EN
                    Serial.print("Invalid pin mode request\r\n");
    146e:	65 e5       	ldi	r22, 0x55	; 85
    1470:	72 e0       	ldi	r23, 0x02	; 2
    1472:	8a e6       	ldi	r24, 0x6A	; 106
    1474:	93 e0       	ldi	r25, 0x03	; 3
    1476:	0e 94 9a 0b 	call	0x1734	; 0x1734 <_ZN5Print5printEPKc>
#endif
                    ret=false;
    147a:	c0 e0       	ldi	r28, 0x00	; 0
            }
            res = mcp2515_setCANCTRL_Mode(mcpMode);
    147c:	f8 01       	movw	r30, r16
    147e:	62 85       	ldd	r22, Z+10	; 0x0a
    1480:	c8 01       	movw	r24, r16
    1482:	0e 94 70 05 	call	0xae0	; 0xae0 <_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh>
            if(res)
    1486:	88 23       	and	r24, r24
    1488:	61 f1       	breq	.+88     	; 0x14e2 <_ZN7MCP_CAN10mcpPinModeEhh+0x102>
            {
#if DEBUG_EN
                Serial.print("`Setting ID Mode Failure...\r\n");
    148a:	69 e9       	ldi	r22, 0x99	; 153
    148c:	72 e0       	ldi	r23, 0x02	; 2
    148e:	23 c0       	rjmp	.+70     	; 0x14d6 <_ZN7MCP_CAN10mcpPinModeEhh+0xf6>
                return false;
            }
            return ret;
        break;
        case MCP_TX1RTS:
            res = mcp2515_setCANCTRL_Mode(MODE_CONFIG);
    1490:	60 e8       	ldi	r22, 0x80	; 128
    1492:	0e 94 70 05 	call	0xae0	; 0xae0 <_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh>
            if(res > 0)
    1496:	81 11       	cpse	r24, r1
    1498:	de cf       	rjmp	.-68     	; 0x1456 <_ZN7MCP_CAN10mcpPinModeEhh+0x76>
#else
                delay(10);
#endif
                return false;
            }
            switch(mode) {
    149a:	c1 30       	cpi	r28, 0x01	; 1
    149c:	21 f0       	breq	.+8      	; 0x14a6 <_ZN7MCP_CAN10mcpPinModeEhh+0xc6>
    149e:	c3 30       	cpi	r28, 0x03	; 3
    14a0:	31 f7       	brne	.-52     	; 0x146e <_ZN7MCP_CAN10mcpPinModeEhh+0x8e>
                case MCP_PIN_INT:
                    mcp2515_modifyRegister(MCP_TXRTSCTRL, B1RTSM, B1RTSM);
                break;
                case MCP_PIN_IN:
                    mcp2515_modifyRegister(MCP_TXRTSCTRL, B1RTSM, 0);
    14a2:	20 e0       	ldi	r18, 0x00	; 0
    14a4:	01 c0       	rjmp	.+2      	; 0x14a8 <_ZN7MCP_CAN10mcpPinModeEhh+0xc8>
#endif
                return false;
            }
            switch(mode) {
                case MCP_PIN_INT:
                    mcp2515_modifyRegister(MCP_TXRTSCTRL, B1RTSM, B1RTSM);
    14a6:	22 e0       	ldi	r18, 0x02	; 2
                break;
                case MCP_PIN_IN:
                    mcp2515_modifyRegister(MCP_TXRTSCTRL, B1RTSM, 0);
    14a8:	42 e0       	ldi	r20, 0x02	; 2
    14aa:	6d e0       	ldi	r22, 0x0D	; 13
    14ac:	c8 01       	movw	r24, r16
    14ae:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>
** Descriptions:            switch supported pins between HiZ, interrupt, output or input
*********************************************************************************************************/
bool MCP_CAN::mcpPinMode(const byte pin, const byte mode)
{
    byte res;
    bool ret=true;
    14b2:	c1 e0       	ldi	r28, 0x01	; 1
                case MCP_PIN_INT:
                    mcp2515_modifyRegister(MCP_TXRTSCTRL, B1RTSM, B1RTSM);
                break;
                case MCP_PIN_IN:
                    mcp2515_modifyRegister(MCP_TXRTSCTRL, B1RTSM, 0);
                break;
    14b4:	e3 cf       	rjmp	.-58     	; 0x147c <_ZN7MCP_CAN10mcpPinModeEhh+0x9c>
                return false;
            }
            return ret;
        break;
        case MCP_TX2RTS:
            res = mcp2515_setCANCTRL_Mode(MODE_CONFIG);
    14b6:	60 e8       	ldi	r22, 0x80	; 128
    14b8:	0e 94 70 05 	call	0xae0	; 0xae0 <_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh>
            if(res > 0)
    14bc:	81 11       	cpse	r24, r1
    14be:	cb cf       	rjmp	.-106    	; 0x1456 <_ZN7MCP_CAN10mcpPinModeEhh+0x76>
#else
                delay(10);
#endif
                return false;
            }
            switch(mode) {
    14c0:	c1 30       	cpi	r28, 0x01	; 1
    14c2:	21 f0       	breq	.+8      	; 0x14cc <_ZN7MCP_CAN10mcpPinModeEhh+0xec>
    14c4:	c3 30       	cpi	r28, 0x03	; 3
    14c6:	99 f6       	brne	.-90     	; 0x146e <_ZN7MCP_CAN10mcpPinModeEhh+0x8e>
                case MCP_PIN_INT:
                    mcp2515_modifyRegister(MCP_TXRTSCTRL, B2RTSM, B2RTSM);
                break;
                case MCP_PIN_IN:
                    mcp2515_modifyRegister(MCP_TXRTSCTRL, B2RTSM, 0);
    14c8:	20 e0       	ldi	r18, 0x00	; 0
    14ca:	01 c0       	rjmp	.+2      	; 0x14ce <_ZN7MCP_CAN10mcpPinModeEhh+0xee>
#endif
                return false;
            }
            switch(mode) {
                case MCP_PIN_INT:
                    mcp2515_modifyRegister(MCP_TXRTSCTRL, B2RTSM, B2RTSM);
    14cc:	24 e0       	ldi	r18, 0x04	; 4
                break;
                case MCP_PIN_IN:
                    mcp2515_modifyRegister(MCP_TXRTSCTRL, B2RTSM, 0);
    14ce:	44 e0       	ldi	r20, 0x04	; 4
    14d0:	ec cf       	rjmp	.-40     	; 0x14aa <_ZN7MCP_CAN10mcpPinModeEhh+0xca>
            }
            return ret;
        break;
        default:
#if DEBUG_EN
            Serial.print("Invalid pin for mode request\r\n");
    14d2:	67 eb       	ldi	r22, 0xB7	; 183
    14d4:	72 e0       	ldi	r23, 0x02	; 2
    14d6:	8a e6       	ldi	r24, 0x6A	; 106
    14d8:	93 e0       	ldi	r25, 0x03	; 3
    14da:	0e 94 9a 0b 	call	0x1734	; 0x1734 <_ZN5Print5printEPKc>
#endif
            return false;
    14de:	80 e0       	ldi	r24, 0x00	; 0
    14e0:	01 c0       	rjmp	.+2      	; 0x14e4 <_ZN7MCP_CAN10mcpPinModeEhh+0x104>
#else
                delay(10);
#endif
                return false;
            }
            return ret;
    14e2:	8c 2f       	mov	r24, r28
#if DEBUG_EN
            Serial.print("Invalid pin for mode request\r\n");
#endif
            return false;
    }
}
    14e4:	cf 91       	pop	r28
    14e6:	1f 91       	pop	r17
    14e8:	0f 91       	pop	r16
    14ea:	08 95       	ret

000014ec <_ZN7MCP_CAN15mcpDigitalWriteEhh>:
/*********************************************************************************************************
** Function name:           mcpDigitalWrite
** Descriptions:            write HIGH or LOW to RX0BF/RX1BF
*********************************************************************************************************/
bool MCP_CAN::mcpDigitalWrite(const byte pin, const byte mode) {
    switch(pin)
    14ec:	66 23       	and	r22, r22
    14ee:	19 f0       	breq	.+6      	; 0x14f6 <_ZN7MCP_CAN15mcpDigitalWriteEhh+0xa>
    14f0:	61 30       	cpi	r22, 0x01	; 1
    14f2:	61 f0       	breq	.+24     	; 0x150c <_ZN7MCP_CAN15mcpDigitalWriteEhh+0x20>
    14f4:	12 c0       	rjmp	.+36     	; 0x151a <_ZN7MCP_CAN15mcpDigitalWriteEhh+0x2e>
    {
        case MCP_RX0BF:
            switch(mode) {
    14f6:	41 30       	cpi	r20, 0x01	; 1
    14f8:	11 f4       	brne	.+4      	; 0x14fe <_ZN7MCP_CAN15mcpDigitalWriteEhh+0x12>
                case HIGH:
                    mcp2515_modifyRegister(MCP_BFPCTRL, B0BFS, B0BFS);
    14fa:	20 e1       	ldi	r18, 0x10	; 16
    14fc:	01 c0       	rjmp	.+2      	; 0x1500 <_ZN7MCP_CAN15mcpDigitalWriteEhh+0x14>
                    return true;
                break;
                default:
                    mcp2515_modifyRegister(MCP_BFPCTRL, B0BFS, 0);
    14fe:	20 e0       	ldi	r18, 0x00	; 0
    1500:	40 e1       	ldi	r20, 0x10	; 16
    1502:	6c e0       	ldi	r22, 0x0C	; 12
    1504:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>
                    return true;
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	08 95       	ret
            }
        break;
        case MCP_RX1BF:
            switch(mode) {
    150c:	41 30       	cpi	r20, 0x01	; 1
    150e:	11 f4       	brne	.+4      	; 0x1514 <_ZN7MCP_CAN15mcpDigitalWriteEhh+0x28>
                case HIGH:
                    mcp2515_modifyRegister(MCP_BFPCTRL, B1BFS, B1BFS);
    1510:	20 e2       	ldi	r18, 0x20	; 32
    1512:	01 c0       	rjmp	.+2      	; 0x1516 <_ZN7MCP_CAN15mcpDigitalWriteEhh+0x2a>
                    return true;
                break;
                default:
                    mcp2515_modifyRegister(MCP_BFPCTRL, B1BFS, 0);
    1514:	20 e0       	ldi	r18, 0x00	; 0
    1516:	40 e2       	ldi	r20, 0x20	; 32
    1518:	f4 cf       	rjmp	.-24     	; 0x1502 <_ZN7MCP_CAN15mcpDigitalWriteEhh+0x16>
                    return true;
            }
        break;
        default:
#if DEBUG_EN
            Serial.print("Invalid pin for mcpDigitalWrite\r\n");
    151a:	66 ed       	ldi	r22, 0xD6	; 214
    151c:	72 e0       	ldi	r23, 0x02	; 2
    151e:	8a e6       	ldi	r24, 0x6A	; 106
    1520:	93 e0       	ldi	r25, 0x03	; 3
    1522:	0e 94 9a 0b 	call	0x1734	; 0x1734 <_ZN5Print5printEPKc>
#endif
            return false;
    1526:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    1528:	08 95       	ret

0000152a <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    152a:	cf 93       	push	r28
  uint8_t sreg = SREG;
    152c:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    152e:	f8 94       	cli
  if (!initialized) {
    1530:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <_ZN8SPIClass11initializedE>
    1534:	81 11       	cpse	r24, r1
    1536:	27 c0       	rjmp	.+78     	; 0x1586 <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    1538:	e2 ee       	ldi	r30, 0xE2	; 226
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    153e:	ee ec       	ldi	r30, 0xCE	; 206
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    1544:	e8 2f       	mov	r30, r24
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	ee 0f       	add	r30, r30
    154a:	ff 1f       	adc	r31, r31
    154c:	ea 50       	subi	r30, 0x0A	; 10
    154e:	ff 4f       	sbci	r31, 0xFF	; 255
    1550:	a5 91       	lpm	r26, Z+
    1552:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    1554:	ec 91       	ld	r30, X
    1556:	e9 23       	and	r30, r25
    1558:	21 f4       	brne	.+8      	; 0x1562 <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    155a:	61 e0       	ldi	r22, 0x01	; 1
    155c:	8a e0       	ldi	r24, 0x0A	; 10
    155e:	0e 94 05 04 	call	0x80a	; 0x80a <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    1562:	61 e0       	ldi	r22, 0x01	; 1
    1564:	8a e0       	ldi	r24, 0x0A	; 10
    1566:	0e 94 c9 03 	call	0x792	; 0x792 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    156a:	8c b5       	in	r24, 0x2c	; 44
    156c:	80 61       	ori	r24, 0x10	; 16
    156e:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    1570:	8c b5       	in	r24, 0x2c	; 44
    1572:	80 64       	ori	r24, 0x40	; 64
    1574:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    1576:	61 e0       	ldi	r22, 0x01	; 1
    1578:	8d e0       	ldi	r24, 0x0D	; 13
    157a:	0e 94 c9 03 	call	0x792	; 0x792 <pinMode>
    pinMode(MOSI, OUTPUT);
    157e:	61 e0       	ldi	r22, 0x01	; 1
    1580:	8b e0       	ldi	r24, 0x0B	; 11
    1582:	0e 94 c9 03 	call	0x792	; 0x792 <pinMode>
  }
  initialized++; // reference count
    1586:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <_ZN8SPIClass11initializedE>
    158a:	8f 5f       	subi	r24, 0xFF	; 255
    158c:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    1590:	cf bf       	out	0x3f, r28	; 63
}
    1592:	cf 91       	pop	r28
    1594:	08 95       	ret

00001596 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1596:	1f 92       	push	r1
    1598:	0f 92       	push	r0
    159a:	0f b6       	in	r0, 0x3f	; 63
    159c:	0f 92       	push	r0
    159e:	11 24       	eor	r1, r1
    15a0:	2f 93       	push	r18
    15a2:	8f 93       	push	r24
    15a4:	9f 93       	push	r25
    15a6:	ef 93       	push	r30
    15a8:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    15aa:	e0 91 7a 03 	lds	r30, 0x037A	; 0x80037a <Serial+0x10>
    15ae:	f0 91 7b 03 	lds	r31, 0x037B	; 0x80037b <Serial+0x11>
    15b2:	80 81       	ld	r24, Z
    15b4:	e0 91 80 03 	lds	r30, 0x0380	; 0x800380 <Serial+0x16>
    15b8:	f0 91 81 03 	lds	r31, 0x0381	; 0x800381 <Serial+0x17>
    15bc:	82 fd       	sbrc	r24, 2
    15be:	12 c0       	rjmp	.+36     	; 0x15e4 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    15c0:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    15c2:	80 91 83 03 	lds	r24, 0x0383	; 0x800383 <Serial+0x19>
    15c6:	8f 5f       	subi	r24, 0xFF	; 255
    15c8:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    15ca:	20 91 84 03 	lds	r18, 0x0384	; 0x800384 <Serial+0x1a>
    15ce:	82 17       	cp	r24, r18
    15d0:	51 f0       	breq	.+20     	; 0x15e6 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    15d2:	e0 91 83 03 	lds	r30, 0x0383	; 0x800383 <Serial+0x19>
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	e6 59       	subi	r30, 0x96	; 150
    15da:	fc 4f       	sbci	r31, 0xFC	; 252
    15dc:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    15de:	80 93 83 03 	sts	0x0383, r24	; 0x800383 <Serial+0x19>
    15e2:	01 c0       	rjmp	.+2      	; 0x15e6 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    15e4:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    15e6:	ff 91       	pop	r31
    15e8:	ef 91       	pop	r30
    15ea:	9f 91       	pop	r25
    15ec:	8f 91       	pop	r24
    15ee:	2f 91       	pop	r18
    15f0:	0f 90       	pop	r0
    15f2:	0f be       	out	0x3f, r0	; 63
    15f4:	0f 90       	pop	r0
    15f6:	1f 90       	pop	r1
    15f8:	18 95       	reti

000015fa <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    15fa:	1f 92       	push	r1
    15fc:	0f 92       	push	r0
    15fe:	0f b6       	in	r0, 0x3f	; 63
    1600:	0f 92       	push	r0
    1602:	11 24       	eor	r1, r1
    1604:	2f 93       	push	r18
    1606:	3f 93       	push	r19
    1608:	4f 93       	push	r20
    160a:	5f 93       	push	r21
    160c:	6f 93       	push	r22
    160e:	7f 93       	push	r23
    1610:	8f 93       	push	r24
    1612:	9f 93       	push	r25
    1614:	af 93       	push	r26
    1616:	bf 93       	push	r27
    1618:	ef 93       	push	r30
    161a:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    161c:	8a e6       	ldi	r24, 0x6A	; 106
    161e:	93 e0       	ldi	r25, 0x03	; 3
    1620:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1624:	ff 91       	pop	r31
    1626:	ef 91       	pop	r30
    1628:	bf 91       	pop	r27
    162a:	af 91       	pop	r26
    162c:	9f 91       	pop	r25
    162e:	8f 91       	pop	r24
    1630:	7f 91       	pop	r23
    1632:	6f 91       	pop	r22
    1634:	5f 91       	pop	r21
    1636:	4f 91       	pop	r20
    1638:	3f 91       	pop	r19
    163a:	2f 91       	pop	r18
    163c:	0f 90       	pop	r0
    163e:	0f be       	out	0x3f, r0	; 63
    1640:	0f 90       	pop	r0
    1642:	1f 90       	pop	r1
    1644:	18 95       	reti

00001646 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1646:	8a e6       	ldi	r24, 0x6A	; 106
    1648:	93 e0       	ldi	r25, 0x03	; 3
    164a:	0e 94 9c 0b 	call	0x1738	; 0x1738 <_ZN14HardwareSerial9availableEv>
    164e:	21 e0       	ldi	r18, 0x01	; 1
    1650:	89 2b       	or	r24, r25
    1652:	09 f4       	brne	.+2      	; 0x1656 <_Z17Serial0_availablev+0x10>
    1654:	20 e0       	ldi	r18, 0x00	; 0
}
    1656:	82 2f       	mov	r24, r18
    1658:	08 95       	ret

0000165a <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    165a:	ea e6       	ldi	r30, 0x6A	; 106
    165c:	f3 e0       	ldi	r31, 0x03	; 3
    165e:	13 82       	std	Z+3, r1	; 0x03
    1660:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1662:	88 ee       	ldi	r24, 0xE8	; 232
    1664:	93 e0       	ldi	r25, 0x03	; 3
    1666:	a0 e0       	ldi	r26, 0x00	; 0
    1668:	b0 e0       	ldi	r27, 0x00	; 0
    166a:	84 83       	std	Z+4, r24	; 0x04
    166c:	95 83       	std	Z+5, r25	; 0x05
    166e:	a6 83       	std	Z+6, r26	; 0x06
    1670:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1672:	86 e2       	ldi	r24, 0x26	; 38
    1674:	93 e0       	ldi	r25, 0x03	; 3
    1676:	91 83       	std	Z+1, r25	; 0x01
    1678:	80 83       	st	Z, r24
    167a:	85 ec       	ldi	r24, 0xC5	; 197
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	95 87       	std	Z+13, r25	; 0x0d
    1680:	84 87       	std	Z+12, r24	; 0x0c
    1682:	84 ec       	ldi	r24, 0xC4	; 196
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	97 87       	std	Z+15, r25	; 0x0f
    1688:	86 87       	std	Z+14, r24	; 0x0e
    168a:	80 ec       	ldi	r24, 0xC0	; 192
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	91 8b       	std	Z+17, r25	; 0x11
    1690:	80 8b       	std	Z+16, r24	; 0x10
    1692:	81 ec       	ldi	r24, 0xC1	; 193
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	93 8b       	std	Z+19, r25	; 0x13
    1698:	82 8b       	std	Z+18, r24	; 0x12
    169a:	82 ec       	ldi	r24, 0xC2	; 194
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	95 8b       	std	Z+21, r25	; 0x15
    16a0:	84 8b       	std	Z+20, r24	; 0x14
    16a2:	86 ec       	ldi	r24, 0xC6	; 198
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	97 8b       	std	Z+23, r25	; 0x17
    16a8:	86 8b       	std	Z+22, r24	; 0x16
    16aa:	11 8e       	std	Z+25, r1	; 0x19
    16ac:	12 8e       	std	Z+26, r1	; 0x1a
    16ae:	13 8e       	std	Z+27, r1	; 0x1b
    16b0:	14 8e       	std	Z+28, r1	; 0x1c
    16b2:	08 95       	ret

000016b4 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    16b4:	08 95       	ret

000016b6 <_ZN5Print5writeEPKhj>:
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
    16b6:	cf 92       	push	r12
    16b8:	df 92       	push	r13
    16ba:	ef 92       	push	r14
    16bc:	ff 92       	push	r15
    16be:	0f 93       	push	r16
    16c0:	1f 93       	push	r17
    16c2:	cf 93       	push	r28
    16c4:	df 93       	push	r29
    16c6:	6c 01       	movw	r12, r24
    16c8:	7a 01       	movw	r14, r20
    16ca:	8b 01       	movw	r16, r22
    16cc:	c0 e0       	ldi	r28, 0x00	; 0
    16ce:	d0 e0       	ldi	r29, 0x00	; 0
    16d0:	ce 15       	cp	r28, r14
    16d2:	df 05       	cpc	r29, r15
    16d4:	81 f0       	breq	.+32     	; 0x16f6 <_ZN5Print5writeEPKhj+0x40>
    16d6:	d8 01       	movw	r26, r16
    16d8:	6d 91       	ld	r22, X+
    16da:	8d 01       	movw	r16, r26
    16dc:	d6 01       	movw	r26, r12
    16de:	ed 91       	ld	r30, X+
    16e0:	fc 91       	ld	r31, X
    16e2:	01 90       	ld	r0, Z+
    16e4:	f0 81       	ld	r31, Z
    16e6:	e0 2d       	mov	r30, r0
    16e8:	c6 01       	movw	r24, r12
    16ea:	09 95       	icall
    16ec:	89 2b       	or	r24, r25
    16ee:	11 f0       	breq	.+4      	; 0x16f4 <_ZN5Print5writeEPKhj+0x3e>
    16f0:	21 96       	adiw	r28, 0x01	; 1
    16f2:	ee cf       	rjmp	.-36     	; 0x16d0 <_ZN5Print5writeEPKhj+0x1a>
    16f4:	7e 01       	movw	r14, r28
    16f6:	c7 01       	movw	r24, r14
    16f8:	df 91       	pop	r29
    16fa:	cf 91       	pop	r28
    16fc:	1f 91       	pop	r17
    16fe:	0f 91       	pop	r16
    1700:	ff 90       	pop	r15
    1702:	ef 90       	pop	r14
    1704:	df 90       	pop	r13
    1706:	cf 90       	pop	r12
    1708:	08 95       	ret

0000170a <_ZN5Print5writeEPKc>:
    170a:	61 15       	cp	r22, r1
    170c:	71 05       	cpc	r23, r1
    170e:	79 f0       	breq	.+30     	; 0x172e <_ZN5Print5writeEPKc+0x24>
    1710:	fb 01       	movw	r30, r22
    1712:	01 90       	ld	r0, Z+
    1714:	00 20       	and	r0, r0
    1716:	e9 f7       	brne	.-6      	; 0x1712 <_ZN5Print5writeEPKc+0x8>
    1718:	31 97       	sbiw	r30, 0x01	; 1
    171a:	af 01       	movw	r20, r30
    171c:	46 1b       	sub	r20, r22
    171e:	57 0b       	sbc	r21, r23
    1720:	dc 01       	movw	r26, r24
    1722:	ed 91       	ld	r30, X+
    1724:	fc 91       	ld	r31, X
    1726:	02 80       	ldd	r0, Z+2	; 0x02
    1728:	f3 81       	ldd	r31, Z+3	; 0x03
    172a:	e0 2d       	mov	r30, r0
    172c:	09 94       	ijmp
    172e:	80 e0       	ldi	r24, 0x00	; 0
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	08 95       	ret

00001734 <_ZN5Print5printEPKc>:
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1734:	0c 94 85 0b 	jmp	0x170a	; 0x170a <_ZN5Print5writeEPKc>

00001738 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1738:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    173a:	91 8d       	ldd	r25, Z+25	; 0x19
    173c:	22 8d       	ldd	r18, Z+26	; 0x1a
    173e:	89 2f       	mov	r24, r25
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	80 5c       	subi	r24, 0xC0	; 192
    1744:	9f 4f       	sbci	r25, 0xFF	; 255
    1746:	82 1b       	sub	r24, r18
    1748:	91 09       	sbc	r25, r1
}
    174a:	8f 73       	andi	r24, 0x3F	; 63
    174c:	99 27       	eor	r25, r25
    174e:	08 95       	ret

00001750 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    1750:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    1752:	91 8d       	ldd	r25, Z+25	; 0x19
    1754:	82 8d       	ldd	r24, Z+26	; 0x1a
    1756:	98 17       	cp	r25, r24
    1758:	31 f0       	breq	.+12     	; 0x1766 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    175a:	82 8d       	ldd	r24, Z+26	; 0x1a
    175c:	e8 0f       	add	r30, r24
    175e:	f1 1d       	adc	r31, r1
    1760:	85 8d       	ldd	r24, Z+29	; 0x1d
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1766:	8f ef       	ldi	r24, 0xFF	; 255
    1768:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    176a:	08 95       	ret

0000176c <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    176c:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    176e:	91 8d       	ldd	r25, Z+25	; 0x19
    1770:	82 8d       	ldd	r24, Z+26	; 0x1a
    1772:	98 17       	cp	r25, r24
    1774:	61 f0       	breq	.+24     	; 0x178e <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1776:	82 8d       	ldd	r24, Z+26	; 0x1a
    1778:	df 01       	movw	r26, r30
    177a:	a8 0f       	add	r26, r24
    177c:	b1 1d       	adc	r27, r1
    177e:	5d 96       	adiw	r26, 0x1d	; 29
    1780:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1782:	92 8d       	ldd	r25, Z+26	; 0x1a
    1784:	9f 5f       	subi	r25, 0xFF	; 255
    1786:	9f 73       	andi	r25, 0x3F	; 63
    1788:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    178e:	8f ef       	ldi	r24, 0xFF	; 255
    1790:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1792:	08 95       	ret

00001794 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    1794:	fc 01       	movw	r30, r24
    1796:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    1798:	44 8d       	ldd	r20, Z+28	; 0x1c
    179a:	25 2f       	mov	r18, r21
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	84 2f       	mov	r24, r20
    17a0:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    17a2:	82 1b       	sub	r24, r18
    17a4:	93 0b       	sbc	r25, r19
    17a6:	54 17       	cp	r21, r20
    17a8:	10 f0       	brcs	.+4      	; 0x17ae <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    17aa:	cf 96       	adiw	r24, 0x3f	; 63
    17ac:	08 95       	ret
  return tail - head - 1;
    17ae:	01 97       	sbiw	r24, 0x01	; 1
}
    17b0:	08 95       	ret

000017b2 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    17b2:	83 e2       	ldi	r24, 0x23	; 35
    17b4:	9b e0       	ldi	r25, 0x0B	; 11
    17b6:	89 2b       	or	r24, r25
    17b8:	49 f0       	breq	.+18     	; 0x17cc <_Z14serialEventRunv+0x1a>
    17ba:	80 e0       	ldi	r24, 0x00	; 0
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	89 2b       	or	r24, r25
    17c0:	29 f0       	breq	.+10     	; 0x17cc <_Z14serialEventRunv+0x1a>
    17c2:	0e 94 23 0b 	call	0x1646	; 0x1646 <_Z17Serial0_availablev>
    17c6:	81 11       	cpse	r24, r1
    17c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    17cc:	08 95       	ret

000017ce <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    17ce:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    17d0:	84 8d       	ldd	r24, Z+28	; 0x1c
    17d2:	df 01       	movw	r26, r30
    17d4:	a8 0f       	add	r26, r24
    17d6:	b1 1d       	adc	r27, r1
    17d8:	a3 5a       	subi	r26, 0xA3	; 163
    17da:	bf 4f       	sbci	r27, 0xFF	; 255
    17dc:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    17de:	84 8d       	ldd	r24, Z+28	; 0x1c
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	01 96       	adiw	r24, 0x01	; 1
    17e4:	8f 73       	andi	r24, 0x3F	; 63
    17e6:	99 27       	eor	r25, r25
    17e8:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    17ea:	a6 89       	ldd	r26, Z+22	; 0x16
    17ec:	b7 89       	ldd	r27, Z+23	; 0x17
    17ee:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    17f0:	a0 89       	ldd	r26, Z+16	; 0x10
    17f2:	b1 89       	ldd	r27, Z+17	; 0x11
    17f4:	8c 91       	ld	r24, X
    17f6:	83 70       	andi	r24, 0x03	; 3
    17f8:	80 64       	ori	r24, 0x40	; 64
    17fa:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    17fc:	93 8d       	ldd	r25, Z+27	; 0x1b
    17fe:	84 8d       	ldd	r24, Z+28	; 0x1c
    1800:	98 13       	cpse	r25, r24
    1802:	06 c0       	rjmp	.+12     	; 0x1810 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1804:	02 88       	ldd	r0, Z+18	; 0x12
    1806:	f3 89       	ldd	r31, Z+19	; 0x13
    1808:	e0 2d       	mov	r30, r0
    180a:	80 81       	ld	r24, Z
    180c:	8f 7d       	andi	r24, 0xDF	; 223
    180e:	80 83       	st	Z, r24
    1810:	08 95       	ret

00001812 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    1812:	ef 92       	push	r14
    1814:	ff 92       	push	r15
    1816:	0f 93       	push	r16
    1818:	1f 93       	push	r17
    181a:	cf 93       	push	r28
    181c:	df 93       	push	r29
    181e:	ec 01       	movw	r28, r24
  _written = true;
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1824:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1826:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1828:	98 13       	cpse	r25, r24
    182a:	05 c0       	rjmp	.+10     	; 0x1836 <_ZN14HardwareSerial5writeEh+0x24>
    182c:	e8 89       	ldd	r30, Y+16	; 0x10
    182e:	f9 89       	ldd	r31, Y+17	; 0x11
    1830:	80 81       	ld	r24, Z
    1832:	85 fd       	sbrc	r24, 5
    1834:	26 c0       	rjmp	.+76     	; 0x1882 <_ZN14HardwareSerial5writeEh+0x70>
    1836:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1838:	0b 8d       	ldd	r16, Y+27	; 0x1b
    183a:	10 e0       	ldi	r17, 0x00	; 0
    183c:	0f 5f       	subi	r16, 0xFF	; 255
    183e:	1f 4f       	sbci	r17, 0xFF	; 255
    1840:	0f 73       	andi	r16, 0x3F	; 63
    1842:	11 27       	eor	r17, r17
    1844:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1846:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1848:	e8 12       	cpse	r14, r24
    184a:	0c c0       	rjmp	.+24     	; 0x1864 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    184c:	0f b6       	in	r0, 0x3f	; 63
    184e:	07 fc       	sbrc	r0, 7
    1850:	fa cf       	rjmp	.-12     	; 0x1846 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1852:	e8 89       	ldd	r30, Y+16	; 0x10
    1854:	f9 89       	ldd	r31, Y+17	; 0x11
    1856:	80 81       	ld	r24, Z
    1858:	85 ff       	sbrs	r24, 5
    185a:	f5 cf       	rjmp	.-22     	; 0x1846 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    185c:	ce 01       	movw	r24, r28
    185e:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1862:	f1 cf       	rjmp	.-30     	; 0x1846 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1864:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1866:	fe 01       	movw	r30, r28
    1868:	e8 0f       	add	r30, r24
    186a:	f1 1d       	adc	r31, r1
    186c:	e3 5a       	subi	r30, 0xA3	; 163
    186e:	ff 4f       	sbci	r31, 0xFF	; 255
    1870:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1872:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1874:	f8 94       	cli
    _tx_buffer_head = i;
    1876:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    1878:	ea 89       	ldd	r30, Y+18	; 0x12
    187a:	fb 89       	ldd	r31, Y+19	; 0x13
    187c:	80 81       	ld	r24, Z
    187e:	80 62       	ori	r24, 0x20	; 32
    1880:	0a c0       	rjmp	.+20     	; 0x1896 <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1882:	9f b7       	in	r25, 0x3f	; 63
    1884:	f8 94       	cli
      *_udr = c;
    1886:	ee 89       	ldd	r30, Y+22	; 0x16
    1888:	ff 89       	ldd	r31, Y+23	; 0x17
    188a:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    188c:	e8 89       	ldd	r30, Y+16	; 0x10
    188e:	f9 89       	ldd	r31, Y+17	; 0x11
    1890:	80 81       	ld	r24, Z
    1892:	83 70       	andi	r24, 0x03	; 3
    1894:	80 64       	ori	r24, 0x40	; 64
    1896:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1898:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    189a:	81 e0       	ldi	r24, 0x01	; 1
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	df 91       	pop	r29
    18a0:	cf 91       	pop	r28
    18a2:	1f 91       	pop	r17
    18a4:	0f 91       	pop	r16
    18a6:	ff 90       	pop	r15
    18a8:	ef 90       	pop	r14
    18aa:	08 95       	ret

000018ac <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    18ac:	cf 93       	push	r28
    18ae:	df 93       	push	r29
    18b0:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    18b2:	88 8d       	ldd	r24, Y+24	; 0x18
    18b4:	88 23       	and	r24, r24
    18b6:	c9 f0       	breq	.+50     	; 0x18ea <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    18b8:	ea 89       	ldd	r30, Y+18	; 0x12
    18ba:	fb 89       	ldd	r31, Y+19	; 0x13
    18bc:	80 81       	ld	r24, Z
    18be:	85 fd       	sbrc	r24, 5
    18c0:	05 c0       	rjmp	.+10     	; 0x18cc <_ZN14HardwareSerial5flushEv+0x20>
    18c2:	a8 89       	ldd	r26, Y+16	; 0x10
    18c4:	b9 89       	ldd	r27, Y+17	; 0x11
    18c6:	8c 91       	ld	r24, X
    18c8:	86 fd       	sbrc	r24, 6
    18ca:	0f c0       	rjmp	.+30     	; 0x18ea <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    18cc:	0f b6       	in	r0, 0x3f	; 63
    18ce:	07 fc       	sbrc	r0, 7
    18d0:	f5 cf       	rjmp	.-22     	; 0x18bc <_ZN14HardwareSerial5flushEv+0x10>
    18d2:	80 81       	ld	r24, Z
    18d4:	85 ff       	sbrs	r24, 5
    18d6:	f2 cf       	rjmp	.-28     	; 0x18bc <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    18d8:	a8 89       	ldd	r26, Y+16	; 0x10
    18da:	b9 89       	ldd	r27, Y+17	; 0x11
    18dc:	8c 91       	ld	r24, X
    18de:	85 ff       	sbrs	r24, 5
    18e0:	ed cf       	rjmp	.-38     	; 0x18bc <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    18e2:	ce 01       	movw	r24, r28
    18e4:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    18e8:	e7 cf       	rjmp	.-50     	; 0x18b8 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    18ea:	df 91       	pop	r29
    18ec:	cf 91       	pop	r28
    18ee:	08 95       	ret

000018f0 <__tablejump2__>:
    18f0:	ee 0f       	add	r30, r30
    18f2:	ff 1f       	adc	r31, r31
    18f4:	05 90       	lpm	r0, Z+
    18f6:	f4 91       	lpm	r31, Z
    18f8:	e0 2d       	mov	r30, r0
    18fa:	09 94       	ijmp

000018fc <_exit>:
    18fc:	f8 94       	cli

000018fe <__stop_program>:
    18fe:	ff cf       	rjmp	.-2      	; 0x18fe <__stop_program>
