
dio-module-code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000234  00800100  0000188c  00001920  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000188c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000cf  00800334  00800334  00001b54  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001b54  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001b84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000540  00000000  00000000  00001bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c77a  00000000  00000000  00002104  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002372  00000000  00000000  0000e87e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003347  00000000  00000000  00010bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001224  00000000  00000000  00013f38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000031a3  00000000  00000000  0001515c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000711f  00000000  00000000  000182ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004d8  00000000  00000000  0001f41e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 82 00 	jmp	0x104	; 0x104 <__ctors_end>
       4:	0c 94 1b 02 	jmp	0x436	; 0x436 <__vector_1>
       8:	0c 94 42 02 	jmp	0x484	; 0x484 <__vector_2>
       c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      10:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      14:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      18:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      1c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      20:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      24:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      28:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      2c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      30:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      34:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      38:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      3c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      40:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__vector_16>
      44:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      48:	0c 94 91 0a 	jmp	0x1522	; 0x1522 <__vector_18>
      4c:	0c 94 c3 0a 	jmp	0x1586	; 0x1586 <__vector_19>
      50:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      54:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      58:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      5c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      60:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      64:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      68:	1d 06       	cpc	r1, r29
      6a:	b6 05       	cpc	r27, r6
      6c:	21 06       	cpc	r2, r17
      6e:	b9 05       	cpc	r27, r9
      70:	bc 05       	cpc	r27, r12
      72:	bf 05       	cpc	r27, r15
      74:	c3 05       	cpc	r28, r3
      76:	c6 05       	cpc	r28, r6
      78:	c9 05       	cpc	r28, r9
      7a:	cc 05       	cpc	r28, r12
      7c:	cf 05       	cpc	r28, r15
      7e:	d2 05       	cpc	r29, r2
      80:	d5 05       	cpc	r29, r5
      82:	d8 05       	cpc	r29, r8
      84:	db 05       	cpc	r29, r11
      86:	df 05       	cpc	r29, r15
      88:	e2 05       	cpc	r30, r2
      8a:	e5 05       	cpc	r30, r5
      8c:	25 06       	cpc	r2, r21
      8e:	f3 05       	cpc	r31, r3
      90:	f6 05       	cpc	r31, r6
      92:	1b 06       	cpc	r1, r27
      94:	f9 05       	cpc	r31, r9
      96:	1b 06       	cpc	r1, r27
      98:	fd 05       	cpc	r31, r13
      9a:	00 06       	cpc	r0, r16
      9c:	04 06       	cpc	r0, r20
      9e:	1b 06       	cpc	r1, r27
      a0:	1b 06       	cpc	r1, r27
      a2:	07 06       	cpc	r0, r23
      a4:	0b 06       	cpc	r0, r27
      a6:	0e 06       	cpc	r0, r30
      a8:	12 06       	cpc	r1, r18
      aa:	15 06       	cpc	r1, r21
      ac:	1b 06       	cpc	r1, r27
      ae:	18 06       	cpc	r1, r24

000000b0 <__trampolines_end>:
      b0:	00 00       	nop
      b2:	00 08       	sbc	r0, r0
      b4:	00 02       	muls	r16, r16
      b6:	01 00       	.word	0x0001	; ????
      b8:	00 03       	mulsu	r16, r16
      ba:	04 07       	cpc	r16, r20
	...

000000c4 <digital_pin_to_bit_mask_PGM>:
      c4:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      d4:	04 08 10 20                                         ... 

000000d8 <digital_pin_to_port_PGM>:
      d8:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      e8:	03 03 03 03                                         ....

000000ec <port_to_output_PGM>:
      ec:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000f6 <port_to_mode_PGM>:
      f6:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000100 <__ctors_start>:
     100:	e5 01       	movw	r28, r10
     102:	f3 0a       	sbc	r15, r19

00000104 <__ctors_end>:
     104:	11 24       	eor	r1, r1
     106:	1f be       	out	0x3f, r1	; 63
     108:	cf ef       	ldi	r28, 0xFF	; 255
     10a:	d8 e0       	ldi	r29, 0x08	; 8
     10c:	de bf       	out	0x3e, r29	; 62
     10e:	cd bf       	out	0x3d, r28	; 61

00000110 <__do_copy_data>:
     110:	13 e0       	ldi	r17, 0x03	; 3
     112:	a0 e0       	ldi	r26, 0x00	; 0
     114:	b1 e0       	ldi	r27, 0x01	; 1
     116:	ec e8       	ldi	r30, 0x8C	; 140
     118:	f8 e1       	ldi	r31, 0x18	; 24
     11a:	02 c0       	rjmp	.+4      	; 0x120 <__do_copy_data+0x10>
     11c:	05 90       	lpm	r0, Z+
     11e:	0d 92       	st	X+, r0
     120:	a4 33       	cpi	r26, 0x34	; 52
     122:	b1 07       	cpc	r27, r17
     124:	d9 f7       	brne	.-10     	; 0x11c <__do_copy_data+0xc>

00000126 <__do_clear_bss>:
     126:	24 e0       	ldi	r18, 0x04	; 4
     128:	a4 e3       	ldi	r26, 0x34	; 52
     12a:	b3 e0       	ldi	r27, 0x03	; 3
     12c:	01 c0       	rjmp	.+2      	; 0x130 <.do_clear_bss_start>

0000012e <.do_clear_bss_loop>:
     12e:	1d 92       	st	X+, r1

00000130 <.do_clear_bss_start>:
     130:	a3 30       	cpi	r26, 0x03	; 3
     132:	b2 07       	cpc	r27, r18
     134:	e1 f7       	brne	.-8      	; 0x12e <.do_clear_bss_loop>

00000136 <__do_global_ctors>:
     136:	10 e0       	ldi	r17, 0x00	; 0
     138:	c2 e8       	ldi	r28, 0x82	; 130
     13a:	d0 e0       	ldi	r29, 0x00	; 0
     13c:	04 c0       	rjmp	.+8      	; 0x146 <__do_global_ctors+0x10>
     13e:	21 97       	sbiw	r28, 0x01	; 1
     140:	fe 01       	movw	r30, r28
     142:	0e 94 3e 0c 	call	0x187c	; 0x187c <__tablejump2__>
     146:	c0 38       	cpi	r28, 0x80	; 128
     148:	d1 07       	cpc	r29, r17
     14a:	c9 f7       	brne	.-14     	; 0x13e <__do_global_ctors+0x8>
     14c:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <main>
     150:	0c 94 44 0c 	jmp	0x1888	; 0x1888 <_exit>

00000154 <__bad_interrupt>:
     154:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000158 <_Z11MCP2515_ISRv>:
	
}

void MCP2515_ISR()
{
	flagRecv = 1;
     158:	81 e0       	ldi	r24, 0x01	; 1
     15a:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <flagRecv>
     15e:	08 95       	ret

00000160 <_ZL19set_digital_outputsh>:
			PORTD &= ~(1 << pin);  // turn off output
		}
	}
}

static inline void set_digital_outputs(uint8_t do_data) {
     160:	cf 93       	push	r28
     162:	df 93       	push	r29
     164:	00 d0       	rcall	.+0      	; 0x166 <_ZL19set_digital_outputsh+0x6>
     166:	00 d0       	rcall	.+0      	; 0x168 <_ZL19set_digital_outputsh+0x8>
     168:	00 d0       	rcall	.+0      	; 0x16a <_ZL19set_digital_outputsh+0xa>
     16a:	cd b7       	in	r28, 0x3d	; 61
     16c:	de b7       	in	r29, 0x3e	; 62
     16e:	89 83       	std	Y+1, r24	; 0x01
	CAN_output_address = 0x010 | base_address;
}

static inline void set_output(uint8_t do_data, uint8_t ch_from_can, uint8_t port, uint8_t pin) {
	
	if (bit_is_set(do_data, ch_from_can)) {
     170:	99 81       	ldd	r25, Y+1	; 0x01
     172:	90 ff       	sbrs	r25, 0
     174:	02 c0       	rjmp	.+4      	; 0x17a <_ZL19set_digital_outputsh+0x1a>
		if (port == 0) {  // port 0 represents PORTB
			PORTB |= (1 << pin);  // turn on output
     176:	28 9a       	sbi	0x05, 0	; 5
     178:	01 c0       	rjmp	.+2      	; 0x17c <_ZL19set_digital_outputsh+0x1c>
			PORTD |= (1 << pin);  // turn on output
		}
	}
	else {
		if (port == 0) {
			PORTB &= ~(1 << pin);  // turn off output
     17a:	28 98       	cbi	0x05, 0	; 5
     17c:	8a 83       	std	Y+2, r24	; 0x02
	CAN_output_address = 0x010 | base_address;
}

static inline void set_output(uint8_t do_data, uint8_t ch_from_can, uint8_t port, uint8_t pin) {
	
	if (bit_is_set(do_data, ch_from_can)) {
     17e:	9a 81       	ldd	r25, Y+2	; 0x02
     180:	91 ff       	sbrs	r25, 1
     182:	02 c0       	rjmp	.+4      	; 0x188 <_ZL19set_digital_outputsh+0x28>
		if (port == 0) {  // port 0 represents PORTB
			PORTB |= (1 << pin);  // turn on output
     184:	29 9a       	sbi	0x05, 1	; 5
     186:	01 c0       	rjmp	.+2      	; 0x18a <_ZL19set_digital_outputsh+0x2a>
			PORTD |= (1 << pin);  // turn on output
		}
	}
	else {
		if (port == 0) {
			PORTB &= ~(1 << pin);  // turn off output
     188:	29 98       	cbi	0x05, 1	; 5
     18a:	8b 83       	std	Y+3, r24	; 0x03
	CAN_output_address = 0x010 | base_address;
}

static inline void set_output(uint8_t do_data, uint8_t ch_from_can, uint8_t port, uint8_t pin) {
	
	if (bit_is_set(do_data, ch_from_can)) {
     18c:	9b 81       	ldd	r25, Y+3	; 0x03
     18e:	92 ff       	sbrs	r25, 2
     190:	02 c0       	rjmp	.+4      	; 0x196 <_ZL19set_digital_outputsh+0x36>
		if (port == 0) {  // port 0 represents PORTB
			PORTB |= (1 << pin);  // turn on output
		}
		else {  // anything else represents PORTD
			PORTD |= (1 << pin);  // turn on output
     192:	5b 9a       	sbi	0x0b, 3	; 11
     194:	01 c0       	rjmp	.+2      	; 0x198 <_ZL19set_digital_outputsh+0x38>
	else {
		if (port == 0) {
			PORTB &= ~(1 << pin);  // turn off output
		}
		else {
			PORTD &= ~(1 << pin);  // turn off output
     196:	5b 98       	cbi	0x0b, 3	; 11
     198:	8c 83       	std	Y+4, r24	; 0x04
	CAN_output_address = 0x010 | base_address;
}

static inline void set_output(uint8_t do_data, uint8_t ch_from_can, uint8_t port, uint8_t pin) {
	
	if (bit_is_set(do_data, ch_from_can)) {
     19a:	9c 81       	ldd	r25, Y+4	; 0x04
     19c:	93 ff       	sbrs	r25, 3
     19e:	02 c0       	rjmp	.+4      	; 0x1a4 <_ZL19set_digital_outputsh+0x44>
		if (port == 0) {  // port 0 represents PORTB
			PORTB |= (1 << pin);  // turn on output
		}
		else {  // anything else represents PORTD
			PORTD |= (1 << pin);  // turn on output
     1a0:	5c 9a       	sbi	0x0b, 4	; 11
     1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <_ZL19set_digital_outputsh+0x46>
	else {
		if (port == 0) {
			PORTB &= ~(1 << pin);  // turn off output
		}
		else {
			PORTD &= ~(1 << pin);  // turn off output
     1a4:	5c 98       	cbi	0x0b, 4	; 11
     1a6:	8d 83       	std	Y+5, r24	; 0x05
	CAN_output_address = 0x010 | base_address;
}

static inline void set_output(uint8_t do_data, uint8_t ch_from_can, uint8_t port, uint8_t pin) {
	
	if (bit_is_set(do_data, ch_from_can)) {
     1a8:	9d 81       	ldd	r25, Y+5	; 0x05
     1aa:	94 ff       	sbrs	r25, 4
     1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <_ZL19set_digital_outputsh+0x52>
		if (port == 0) {  // port 0 represents PORTB
			PORTB |= (1 << pin);  // turn on output
		}
		else {  // anything else represents PORTD
			PORTD |= (1 << pin);  // turn on output
     1ae:	5d 9a       	sbi	0x0b, 5	; 11
     1b0:	01 c0       	rjmp	.+2      	; 0x1b4 <_ZL19set_digital_outputsh+0x54>
	else {
		if (port == 0) {
			PORTB &= ~(1 << pin);  // turn off output
		}
		else {
			PORTD &= ~(1 << pin);  // turn off output
     1b2:	5d 98       	cbi	0x0b, 5	; 11
     1b4:	8e 83       	std	Y+6, r24	; 0x06
	CAN_output_address = 0x010 | base_address;
}

static inline void set_output(uint8_t do_data, uint8_t ch_from_can, uint8_t port, uint8_t pin) {
	
	if (bit_is_set(do_data, ch_from_can)) {
     1b6:	8e 81       	ldd	r24, Y+6	; 0x06
     1b8:	85 ff       	sbrs	r24, 5
     1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <_ZL19set_digital_outputsh+0x60>
		if (port == 0) {  // port 0 represents PORTB
			PORTB |= (1 << pin);  // turn on output
		}
		else {  // anything else represents PORTD
			PORTD |= (1 << pin);  // turn on output
     1bc:	5e 9a       	sbi	0x0b, 6	; 11
     1be:	01 c0       	rjmp	.+2      	; 0x1c2 <_ZL19set_digital_outputsh+0x62>
	else {
		if (port == 0) {
			PORTB &= ~(1 << pin);  // turn off output
		}
		else {
			PORTD &= ~(1 << pin);  // turn off output
     1c0:	5e 98       	cbi	0x0b, 6	; 11
	set_output(do_data, 2, 1, PIND3); // set output PD3, DO2
	set_output(do_data, 3, 1, PIND4); // set output PD4, DO3
	set_output(do_data, 4, 1, PIND5); // set output PD5, DO4
	set_output(do_data, 5, 1, PIND6); // set output PD6, DO5
	
}
     1c2:	26 96       	adiw	r28, 0x06	; 6
     1c4:	0f b6       	in	r0, 0x3f	; 63
     1c6:	f8 94       	cli
     1c8:	de bf       	out	0x3e, r29	; 62
     1ca:	0f be       	out	0x3f, r0	; 63
     1cc:	cd bf       	out	0x3d, r28	; 61
     1ce:	df 91       	pop	r29
     1d0:	cf 91       	pop	r28
     1d2:	08 95       	ret

000001d4 <_Z14read_ADC_as_DIh>:
	
}

uint8_t read_ADC_as_DI(uint8_t channel) {
	
	ADMUX = (1 << REFS0) | channel;  // set reference AVCC = 5V
     1d4:	80 64       	ori	r24, 0x40	; 64
     1d6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA |= (1<<ADSC);         // start conversion
     1da:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     1de:	80 64       	ori	r24, 0x40	; 64
     1e0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	loop_until_bit_is_clear(ADCSRA,ADSC); // wait for conversion complete
     1e4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     1e8:	86 fd       	sbrc	r24, 6
     1ea:	fc cf       	rjmp	.-8      	; 0x1e4 <_Z14read_ADC_as_DIh+0x10>
	if (ADC > 512) {  // >2.5V
     1ec:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     1f0:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     1f4:	81 e0       	ldi	r24, 0x01	; 1
     1f6:	21 30       	cpi	r18, 0x01	; 1
     1f8:	32 40       	sbci	r19, 0x02	; 2
     1fa:	08 f4       	brcc	.+2      	; 0x1fe <_Z14read_ADC_as_DIh+0x2a>
     1fc:	80 e0       	ldi	r24, 0x00	; 0
		return 1;
	}
	else {
		return 0;
	}
}
     1fe:	08 95       	ret

00000200 <setup>:
uint16_t CAN_input_address;
uint16_t CAN_output_address;

static inline void initOutputs(void) {
	
	DDRB |= (1 << DDB0);  //set PB0 as output DO0
     200:	20 9a       	sbi	0x04, 0	; 4
	DDRB |= (1 << DDB1);  //set PB1 as output DO1
     202:	21 9a       	sbi	0x04, 1	; 4
	DDRD |= (1 << DDD3);  //set PD3 as output DO2
     204:	53 9a       	sbi	0x0a, 3	; 10
	DDRD |= (1 << DDD4);  //set PD4 as output DO3
     206:	54 9a       	sbi	0x0a, 4	; 10
	DDRD |= (1 << DDD5);  //set PD5 as output DO4
     208:	55 9a       	sbi	0x0a, 5	; 10
	DDRD |= (1 << DDD6);  //set PD6 as output DO5
     20a:	56 9a       	sbi	0x0a, 6	; 10
	
}

static inline void initInputs(void) {
	
	DDRC &= ~(1 << PINC0);  //set PINB0 to input, DI0
     20c:	38 98       	cbi	0x07, 0	; 7
	DDRC &= ~(1 << PINC1);  //set PINB1 to input, DI1
     20e:	39 98       	cbi	0x07, 1	; 7
	DDRC &= ~(1 << PINC2);  //set PINB2 to input, DI2
     210:	3a 98       	cbi	0x07, 2	; 7
	DDRC &= ~(1 << PINC3);  //set PINB3 to input, DI3
     212:	3b 98       	cbi	0x07, 3	; 7
	DDRC &= ~(1 << PINC4);  //set PINB4 to input, DI4
     214:	3c 98       	cbi	0x07, 4	; 7
	DDRC &= ~(1 << PINC5);  //set PINB5 to input, DI5
     216:	3d 98       	cbi	0x07, 5	; 7

}

static inline void initADC(void) {
	
	ADCSRA |= (1 << ADPS0);       /* ADC clock prescaler /128 */
     218:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     21c:	81 60       	ori	r24, 0x01	; 1
     21e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADCSRA |= (1 << ADPS1);       /* ADC clock prescaler /128 */
     222:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     226:	82 60       	ori	r24, 0x02	; 2
     228:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADCSRA |= (1 << ADPS2);       /* ADC clock prescaler /128 */
     22c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     230:	84 60       	ori	r24, 0x04	; 4
     232:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADCSRA |= (1 << ADEN);        /* enable ADC */
     236:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     23a:	80 68       	ori	r24, 0x80	; 128
     23c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	}
}

static inline void initCANaddresses(void) {
	//create CAN addresses
	DDRD &= ~(1 << PIND7);  // set PIND7 to input, for CAN ADDR_0
     240:	57 98       	cbi	0x0a, 7	; 10
	PORTD |= (1 << PIND7);  // set PIND7 pull-up resistor
     242:	5f 9a       	sbi	0x0b, 7	; 11
	DDRD &= ~(1 << PIND0);  // set PIND0 to input, for CAN ADDR_2
     244:	50 98       	cbi	0x0a, 0	; 10
	PORTD |= (1 << PIND0);  // set PIND0 pull-up resistor
     246:	58 9a       	sbi	0x0b, 0	; 11
	uint8_t adc7_as_di = read_ADC_as_DI(7);  // CAN_ADDR_1
     248:	87 e0       	ldi	r24, 0x07	; 7
     24a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_Z14read_ADC_as_DIh>
	uint8_t base_address = ((~PIND & 0b10000000) >> 7) | ((~PIND & 0b00000001) << 2) | (adc7_as_di << 1);
     24e:	29 b1       	in	r18, 0x09	; 9
     250:	30 e0       	ldi	r19, 0x00	; 0
     252:	20 95       	com	r18
     254:	30 95       	com	r19
     256:	27 fb       	bst	r18, 7
     258:	33 27       	eor	r19, r19
     25a:	30 f9       	bld	r19, 0
     25c:	48 9b       	sbis	0x09, 0	; 9
     25e:	02 c0       	rjmp	.+4      	; 0x264 <setup+0x64>
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	01 c0       	rjmp	.+2      	; 0x266 <setup+0x66>
     264:	94 e0       	ldi	r25, 0x04	; 4
     266:	88 0f       	add	r24, r24
     268:	83 2b       	or	r24, r19
     26a:	89 2b       	or	r24, r25
	CAN_input_address = base_address;
     26c:	28 2f       	mov	r18, r24
     26e:	30 e0       	ldi	r19, 0x00	; 0
     270:	30 93 37 03 	sts	0x0337, r19	; 0x800337 <CAN_input_address+0x1>
     274:	20 93 36 03 	sts	0x0336, r18	; 0x800336 <CAN_input_address>
	CAN_output_address = 0x010 | base_address;
     278:	80 61       	ori	r24, 0x10	; 16
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	90 93 35 03 	sts	0x0335, r25	; 0x800335 <__data_end+0x1>
     280:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <__data_end>
	initInputs();
	initADC();
	initCANaddresses();
	
	//CAN setup
	CAN.begin(CAN_500KBPS, MCP_16MHz);
     284:	41 e0       	ldi	r20, 0x01	; 1
     286:	60 e1       	ldi	r22, 0x10	; 16
     288:	83 e4       	ldi	r24, 0x43	; 67
     28a:	93 e0       	ldi	r25, 0x03	; 3
     28c:	0e 94 96 08 	call	0x112c	; 0x112c <_ZN7MCP_CAN5beginEhh>
	// attach interrupt
	pinMode(CAN_INT, INPUT);
     290:	60 e0       	ldi	r22, 0x00	; 0
     292:	82 e0       	ldi	r24, 0x02	; 2
     294:	0e 94 8f 03 	call	0x71e	; 0x71e <pinMode>
	attachInterrupt(digitalPinToInterrupt(CAN_INT), MCP2515_ISR, FALLING);
     298:	42 e0       	ldi	r20, 0x02	; 2
     29a:	50 e0       	ldi	r21, 0x00	; 0
     29c:	6c ea       	ldi	r22, 0xAC	; 172
     29e:	70 e0       	ldi	r23, 0x00	; 0
     2a0:	80 e0       	ldi	r24, 0x00	; 0
     2a2:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <attachInterrupt>
	CAN.setSleepWakeup(1);                                   // this tells the MCP2515 to wake up on incoming messages
     2a6:	61 e0       	ldi	r22, 0x01	; 1
     2a8:	83 e4       	ldi	r24, 0x43	; 67
     2aa:	93 e0       	ldi	r25, 0x03	; 3
     2ac:	0e 94 ee 04 	call	0x9dc	; 0x9dc <_ZN7MCP_CAN14setSleepWakeupEh>
	
	// Pull the Rs pin of the MCP2551 transceiver low to enable it:
    if(RS_TO_MCP2515) 
    {
      CAN.mcpPinMode(MCP_RX0BF, MCP_PIN_OUT);
     2b0:	42 e0       	ldi	r20, 0x02	; 2
     2b2:	60 e0       	ldi	r22, 0x00	; 0
     2b4:	83 e4       	ldi	r24, 0x43	; 67
     2b6:	93 e0       	ldi	r25, 0x03	; 3
     2b8:	0e 94 b6 09 	call	0x136c	; 0x136c <_ZN7MCP_CAN10mcpPinModeEhh>
      CAN.mcpDigitalWrite(RS_OUTPUT, LOW);
     2bc:	40 e0       	ldi	r20, 0x00	; 0
     2be:	60 e0       	ldi	r22, 0x00	; 0
     2c0:	83 e4       	ldi	r24, 0x43	; 67
     2c2:	93 e0       	ldi	r25, 0x03	; 3
     2c4:	0c 94 3c 0a 	jmp	0x1478	; 0x1478 <_ZN7MCP_CAN15mcpDigitalWriteEhh>

000002c8 <loop>:
    }
	
}


void loop() {  // must use this Arduino loop() and setup() for CAN to work.  It must have something to do with initializing libraries.
     2c8:	d1 e0       	ldi	r29, 0x01	; 1
	uint8_t ignition;
	uint8_t prev_ign;
	
	while(1) {
		
		ignition = (~PINC & 0b00000001);  // THIS NEEDS TO CHANGE TO ADC6!!!
     2ca:	86 b1       	in	r24, 0x06	; 6
     2cc:	81 70       	andi	r24, 0x01	; 1
     2ce:	c8 2f       	mov	r28, r24
     2d0:	cd 27       	eor	r28, r29
		
		if (flagRecv) {
     2d2:	20 91 4e 03 	lds	r18, 0x034E	; 0x80034e <flagRecv>
     2d6:	22 23       	and	r18, r18
     2d8:	e9 f0       	breq	.+58     	; 0x314 <loop+0x4c>
			
			flagRecv = 0;                   // clear flag
     2da:	10 92 4e 03 	sts	0x034E, r1	; 0x80034e <flagRecv>
			
			while (CAN_MSGAVAIL == CAN.checkReceive()) {
     2de:	83 e4       	ldi	r24, 0x43	; 67
     2e0:	93 e0       	ldi	r25, 0x03	; 3
     2e2:	0e 94 ae 09 	call	0x135c	; 0x135c <_ZN7MCP_CAN12checkReceiveEv>
     2e6:	83 30       	cpi	r24, 0x03	; 3
     2e8:	09 f0       	breq	.+2      	; 0x2ec <loop+0x24>
     2ea:	46 c0       	rjmp	.+140    	; 0x378 <loop+0xb0>
				CAN.readMsgBuf(&len, rxBuf); // Read data: len = data length, buf = data byte(s)
     2ec:	4f e4       	ldi	r20, 0x4F	; 79
     2ee:	53 e0       	ldi	r21, 0x03	; 3
     2f0:	67 e5       	ldi	r22, 0x57	; 87
     2f2:	73 e0       	ldi	r23, 0x03	; 3
     2f4:	83 e4       	ldi	r24, 0x43	; 67
     2f6:	93 e0       	ldi	r25, 0x03	; 3
     2f8:	0e 94 8d 09 	call	0x131a	; 0x131a <_ZN7MCP_CAN10readMsgBufEPhS0_>
				do_data = rxBuf[7];  // Digital output data is contained in byte 7
     2fc:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <rxBuf+0x7>
     300:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <do_data>
				if ((~PINC & 0b00000001) == 0) {  // if ignition is zero, then turn off all digital outputs  // THIS NEEDS TO CHANGE TO ADC6!!!!
     304:	30 99       	sbic	0x06, 0	; 6
					do_data = 0;
     306:	10 92 38 03 	sts	0x0338, r1	; 0x800338 <do_data>
				}
				set_digital_outputs(do_data);
     30a:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <do_data>
     30e:	0e 94 b0 00 	call	0x160	; 0x160 <_ZL19set_digital_outputsh>
		
		if (flagRecv) {
			
			flagRecv = 0;                   // clear flag
			
			while (CAN_MSGAVAIL == CAN.checkReceive()) {
     312:	e5 cf       	rjmp	.-54     	; 0x2de <loop+0x16>
				}
				set_digital_outputs(do_data);
			}
			
		}
		else if ((ignition == 0) && (prev_ign == 1)) {  // if ignition was on and now off, turn off all digital outputs
     314:	88 23       	and	r24, r24
     316:	81 f1       	breq	.+96     	; 0x378 <loop+0xb0>
     318:	91 30       	cpi	r25, 0x01	; 1
     31a:	71 f5       	brne	.+92     	; 0x378 <loop+0xb0>
			set_digital_outputs(0);
     31c:	80 e0       	ldi	r24, 0x00	; 0
     31e:	0e 94 b0 00 	call	0x160	; 0x160 <_ZL19set_digital_outputsh>
			CAN.sleep();
     322:	83 e4       	ldi	r24, 0x43	; 67
     324:	93 e0       	ldi	r25, 0x03	; 3
     326:	0e 94 78 05 	call	0xaf0	; 0xaf0 <_ZN7MCP_CAN5sleepEv>
			
			// Put the transceiver into standby (by pulling Rs high):
			if (RS_TO_MCP2515) {
				CAN.mcpDigitalWrite(RS_OUTPUT, HIGH);
     32a:	41 e0       	ldi	r20, 0x01	; 1
     32c:	60 e0       	ldi	r22, 0x00	; 0
     32e:	83 e4       	ldi	r24, 0x43	; 67
     330:	93 e0       	ldi	r25, 0x03	; 3
     332:	0e 94 3c 0a 	call	0x1478	; 0x1478 <_ZN7MCP_CAN15mcpDigitalWriteEhh>
			}
			else {
				digitalWrite(RS_OUTPUT, HIGH);
			}
			
			cli(); // Disable interrupts
     336:	f8 94       	cli
			if(!flagRecv) // Make sure we havn't missed an interrupt between the check above and now. If an interrupt happens between now and sei()/sleep_cpu() then sleep_cpu() will immediately wake up again
     338:	80 91 4e 03 	lds	r24, 0x034E	; 0x80034e <flagRecv>
     33c:	81 11       	cpse	r24, r1
     33e:	11 c0       	rjmp	.+34     	; 0x362 <loop+0x9a>
			{
				set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     340:	83 b7       	in	r24, 0x33	; 51
     342:	81 7f       	andi	r24, 0xF1	; 241
     344:	84 60       	ori	r24, 0x04	; 4
     346:	83 bf       	out	0x33, r24	; 51
				sleep_enable();
     348:	83 b7       	in	r24, 0x33	; 51
     34a:	81 60       	ori	r24, 0x01	; 1
     34c:	83 bf       	out	0x33, r24	; 51
				sleep_bod_disable();
     34e:	85 b7       	in	r24, 0x35	; 53
     350:	80 66       	ori	r24, 0x60	; 96
     352:	85 bf       	out	0x35, r24	; 53
     354:	8f 7d       	andi	r24, 0xDF	; 223
     356:	85 bf       	out	0x35, r24	; 53
				sei();
     358:	78 94       	sei
				sleep_cpu();
     35a:	88 95       	sleep
				// Now the Arduino sleeps until the next message arrives...
				sleep_disable();
     35c:	83 b7       	in	r24, 0x33	; 51
     35e:	8e 7f       	andi	r24, 0xFE	; 254
     360:	83 bf       	out	0x33, r24	; 51
			}
			sei();
     362:	78 94       	sei
			CAN.wake();
     364:	83 e4       	ldi	r24, 0x43	; 67
     366:	93 e0       	ldi	r25, 0x03	; 3
     368:	0e 94 89 05 	call	0xb12	; 0xb12 <_ZN7MCP_CAN4wakeEv>
			
			// Wake up the transceiver:
			if(RS_TO_MCP2515) {
				CAN.mcpDigitalWrite(RS_OUTPUT, LOW);
     36c:	40 e0       	ldi	r20, 0x00	; 0
     36e:	60 e0       	ldi	r22, 0x00	; 0
     370:	83 e4       	ldi	r24, 0x43	; 67
     372:	93 e0       	ldi	r25, 0x03	; 3
     374:	0e 94 3c 0a 	call	0x1478	; 0x1478 <_ZN7MCP_CAN15mcpDigitalWriteEhh>
			} 
			
		}
		prev_ign = ignition;
			
		message[0] = (~PINC & 0b00111111);  // put digital inputs into CAN message
     378:	86 b1       	in	r24, 0x06	; 6
     37a:	80 95       	com	r24
     37c:	8f 73       	andi	r24, 0x3F	; 63
     37e:	80 93 3b 03 	sts	0x033B, r24	; 0x80033b <message>
		
		cli();
     382:	f8 94       	cli
		sent_msg = CAN.sendMsgBuf(CAN_output_address, 0, 8, message);  //id, standard frame, data len, data bu
     384:	40 91 34 03 	lds	r20, 0x0334	; 0x800334 <__data_end>
     388:	50 91 35 03 	lds	r21, 0x0335	; 0x800335 <__data_end+0x1>
     38c:	60 e0       	ldi	r22, 0x00	; 0
     38e:	70 e0       	ldi	r23, 0x00	; 0
     390:	cc 24       	eor	r12, r12
     392:	c3 94       	inc	r12
     394:	8b e3       	ldi	r24, 0x3B	; 59
     396:	e8 2e       	mov	r14, r24
     398:	83 e0       	ldi	r24, 0x03	; 3
     39a:	f8 2e       	mov	r15, r24
     39c:	08 e0       	ldi	r16, 0x08	; 8
     39e:	20 e0       	ldi	r18, 0x00	; 0
     3a0:	83 e4       	ldi	r24, 0x43	; 67
     3a2:	93 e0       	ldi	r25, 0x03	; 3
     3a4:	0e 94 22 09 	call	0x1244	; 0x1244 <_ZN7MCP_CAN10sendMsgBufEmhhPKhb>
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	90 93 3a 03 	sts	0x033A, r25	; 0x80033a <sent_msg+0x1>
     3ae:	80 93 39 03 	sts	0x0339, r24	; 0x800339 <sent_msg>
		sei();
     3b2:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3b4:	2f ef       	ldi	r18, 0xFF	; 255
     3b6:	81 ee       	ldi	r24, 0xE1	; 225
     3b8:	94 e0       	ldi	r25, 0x04	; 4
     3ba:	21 50       	subi	r18, 0x01	; 1
     3bc:	80 40       	sbci	r24, 0x00	; 0
     3be:	90 40       	sbci	r25, 0x00	; 0
     3c0:	e1 f7       	brne	.-8      	; 0x3ba <loop+0xf2>
     3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <loop+0xfc>
     3c4:	00 00       	nop
			else {
				digitalWrite(RS_OUTPUT, LOW);
			} 
			
		}
		prev_ign = ignition;
     3c6:	9c 2f       	mov	r25, r28
     3c8:	80 cf       	rjmp	.-256    	; 0x2ca <loop+0x2>

000003ca <_GLOBAL__sub_I_rxId>:
unsigned char len = 0;
unsigned char rxBuf[8];
unsigned char flagRecv = 0;
const int SPI_CS_PIN = 10;
#define CAN_INT 2                                            // Set INT to pin 2
MCP_CAN CAN(SPI_CS_PIN);                                    // Set CS pin
     3ca:	6a e0       	ldi	r22, 0x0A	; 10
     3cc:	83 e4       	ldi	r24, 0x43	; 67
     3ce:	93 e0       	ldi	r25, 0x03	; 3
     3d0:	0c 94 8e 08 	jmp	0x111c	; 0x111c <_ZN7MCP_CANC1Eh>

000003d4 <initVariant>:
     3d4:	08 95       	ret

000003d6 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     3d6:	0e 94 2b 03 	call	0x656	; 0x656 <init>

	initVariant();
     3da:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     3de:	0e 94 00 01 	call	0x200	; 0x200 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     3e2:	cf e9       	ldi	r28, 0x9F	; 159
     3e4:	db e0       	ldi	r29, 0x0B	; 11
#endif
	
	setup();
    
	for (;;) {
		loop();
     3e6:	0e 94 64 01 	call	0x2c8	; 0x2c8 <loop>
		if (serialEventRun) serialEventRun();
     3ea:	20 97       	sbiw	r28, 0x00	; 0
     3ec:	e1 f3       	breq	.-8      	; 0x3e6 <main+0x10>
     3ee:	0e 94 9f 0b 	call	0x173e	; 0x173e <_Z14serialEventRunv>
     3f2:	f9 cf       	rjmp	.-14     	; 0x3e6 <main+0x10>

000003f4 <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
     3f4:	08 95       	ret

000003f6 <attachInterrupt>:
     3f6:	82 30       	cpi	r24, 0x02	; 2
     3f8:	e8 f4       	brcc	.+58     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     3fa:	e8 2f       	mov	r30, r24
     3fc:	f0 e0       	ldi	r31, 0x00	; 0
     3fe:	ee 0f       	add	r30, r30
     400:	ff 1f       	adc	r31, r31
     402:	e0 50       	subi	r30, 0x00	; 0
     404:	ff 4f       	sbci	r31, 0xFF	; 255
     406:	71 83       	std	Z+1, r23	; 0x01
     408:	60 83       	st	Z, r22
     40a:	81 30       	cpi	r24, 0x01	; 1
     40c:	41 f0       	breq	.+16     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     40e:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     412:	8c 7f       	andi	r24, 0xFC	; 252
     414:	48 2b       	or	r20, r24
     416:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     41a:	e8 9a       	sbi	0x1d, 0	; 29
     41c:	08 95       	ret
     41e:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     422:	83 7f       	andi	r24, 0xF3	; 243
     424:	44 0f       	add	r20, r20
     426:	55 1f       	adc	r21, r21
     428:	44 0f       	add	r20, r20
     42a:	55 1f       	adc	r21, r21
     42c:	48 2b       	or	r20, r24
     42e:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     432:	e9 9a       	sbi	0x1d, 1	; 29
     434:	08 95       	ret

00000436 <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
     436:	1f 92       	push	r1
     438:	0f 92       	push	r0
     43a:	0f b6       	in	r0, 0x3f	; 63
     43c:	0f 92       	push	r0
     43e:	11 24       	eor	r1, r1
     440:	2f 93       	push	r18
     442:	3f 93       	push	r19
     444:	4f 93       	push	r20
     446:	5f 93       	push	r21
     448:	6f 93       	push	r22
     44a:	7f 93       	push	r23
     44c:	8f 93       	push	r24
     44e:	9f 93       	push	r25
     450:	af 93       	push	r26
     452:	bf 93       	push	r27
     454:	ef 93       	push	r30
     456:	ff 93       	push	r31
     458:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
     45c:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
     460:	09 95       	icall
     462:	ff 91       	pop	r31
     464:	ef 91       	pop	r30
     466:	bf 91       	pop	r27
     468:	af 91       	pop	r26
     46a:	9f 91       	pop	r25
     46c:	8f 91       	pop	r24
     46e:	7f 91       	pop	r23
     470:	6f 91       	pop	r22
     472:	5f 91       	pop	r21
     474:	4f 91       	pop	r20
     476:	3f 91       	pop	r19
     478:	2f 91       	pop	r18
     47a:	0f 90       	pop	r0
     47c:	0f be       	out	0x3f, r0	; 63
     47e:	0f 90       	pop	r0
     480:	1f 90       	pop	r1
     482:	18 95       	reti

00000484 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
     484:	1f 92       	push	r1
     486:	0f 92       	push	r0
     488:	0f b6       	in	r0, 0x3f	; 63
     48a:	0f 92       	push	r0
     48c:	11 24       	eor	r1, r1
     48e:	2f 93       	push	r18
     490:	3f 93       	push	r19
     492:	4f 93       	push	r20
     494:	5f 93       	push	r21
     496:	6f 93       	push	r22
     498:	7f 93       	push	r23
     49a:	8f 93       	push	r24
     49c:	9f 93       	push	r25
     49e:	af 93       	push	r26
     4a0:	bf 93       	push	r27
     4a2:	ef 93       	push	r30
     4a4:	ff 93       	push	r31
     4a6:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_start+0x2>
     4aa:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <__data_start+0x3>
     4ae:	09 95       	icall
     4b0:	ff 91       	pop	r31
     4b2:	ef 91       	pop	r30
     4b4:	bf 91       	pop	r27
     4b6:	af 91       	pop	r26
     4b8:	9f 91       	pop	r25
     4ba:	8f 91       	pop	r24
     4bc:	7f 91       	pop	r23
     4be:	6f 91       	pop	r22
     4c0:	5f 91       	pop	r21
     4c2:	4f 91       	pop	r20
     4c4:	3f 91       	pop	r19
     4c6:	2f 91       	pop	r18
     4c8:	0f 90       	pop	r0
     4ca:	0f be       	out	0x3f, r0	; 63
     4cc:	0f 90       	pop	r0
     4ce:	1f 90       	pop	r1
     4d0:	18 95       	reti

000004d2 <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     4d2:	1f 92       	push	r1
     4d4:	0f 92       	push	r0
     4d6:	0f b6       	in	r0, 0x3f	; 63
     4d8:	0f 92       	push	r0
     4da:	11 24       	eor	r1, r1
     4dc:	2f 93       	push	r18
     4de:	3f 93       	push	r19
     4e0:	8f 93       	push	r24
     4e2:	9f 93       	push	r25
     4e4:	af 93       	push	r26
     4e6:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     4e8:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <timer0_millis>
     4ec:	90 91 5a 03 	lds	r25, 0x035A	; 0x80035a <timer0_millis+0x1>
     4f0:	a0 91 5b 03 	lds	r26, 0x035B	; 0x80035b <timer0_millis+0x2>
     4f4:	b0 91 5c 03 	lds	r27, 0x035C	; 0x80035c <timer0_millis+0x3>
	unsigned char f = timer0_fract;
     4f8:	30 91 58 03 	lds	r19, 0x0358	; 0x800358 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
     4fc:	23 e0       	ldi	r18, 0x03	; 3
     4fe:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
     500:	2d 37       	cpi	r18, 0x7D	; 125
     502:	20 f4       	brcc	.+8      	; 0x50c <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
     504:	01 96       	adiw	r24, 0x01	; 1
     506:	a1 1d       	adc	r26, r1
     508:	b1 1d       	adc	r27, r1
     50a:	05 c0       	rjmp	.+10     	; 0x516 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
     50c:	26 e8       	ldi	r18, 0x86	; 134
     50e:	23 0f       	add	r18, r19
		m += 1;
     510:	02 96       	adiw	r24, 0x02	; 2
     512:	a1 1d       	adc	r26, r1
     514:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
     516:	20 93 58 03 	sts	0x0358, r18	; 0x800358 <timer0_fract>
	timer0_millis = m;
     51a:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <timer0_millis>
     51e:	90 93 5a 03 	sts	0x035A, r25	; 0x80035a <timer0_millis+0x1>
     522:	a0 93 5b 03 	sts	0x035B, r26	; 0x80035b <timer0_millis+0x2>
     526:	b0 93 5c 03 	sts	0x035C, r27	; 0x80035c <timer0_millis+0x3>
	timer0_overflow_count++;
     52a:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <timer0_overflow_count>
     52e:	90 91 5e 03 	lds	r25, 0x035E	; 0x80035e <timer0_overflow_count+0x1>
     532:	a0 91 5f 03 	lds	r26, 0x035F	; 0x80035f <timer0_overflow_count+0x2>
     536:	b0 91 60 03 	lds	r27, 0x0360	; 0x800360 <timer0_overflow_count+0x3>
     53a:	01 96       	adiw	r24, 0x01	; 1
     53c:	a1 1d       	adc	r26, r1
     53e:	b1 1d       	adc	r27, r1
     540:	80 93 5d 03 	sts	0x035D, r24	; 0x80035d <timer0_overflow_count>
     544:	90 93 5e 03 	sts	0x035E, r25	; 0x80035e <timer0_overflow_count+0x1>
     548:	a0 93 5f 03 	sts	0x035F, r26	; 0x80035f <timer0_overflow_count+0x2>
     54c:	b0 93 60 03 	sts	0x0360, r27	; 0x800360 <timer0_overflow_count+0x3>
}
     550:	bf 91       	pop	r27
     552:	af 91       	pop	r26
     554:	9f 91       	pop	r25
     556:	8f 91       	pop	r24
     558:	3f 91       	pop	r19
     55a:	2f 91       	pop	r18
     55c:	0f 90       	pop	r0
     55e:	0f be       	out	0x3f, r0	; 63
     560:	0f 90       	pop	r0
     562:	1f 90       	pop	r1
     564:	18 95       	reti

00000566 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
     566:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
     568:	f8 94       	cli
	m = timer0_millis;
     56a:	60 91 59 03 	lds	r22, 0x0359	; 0x800359 <timer0_millis>
     56e:	70 91 5a 03 	lds	r23, 0x035A	; 0x80035a <timer0_millis+0x1>
     572:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <timer0_millis+0x2>
     576:	90 91 5c 03 	lds	r25, 0x035C	; 0x80035c <timer0_millis+0x3>
	SREG = oldSREG;
     57a:	2f bf       	out	0x3f, r18	; 63

	return m;
}
     57c:	08 95       	ret

0000057e <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     57e:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
     580:	f8 94       	cli
	m = timer0_overflow_count;
     582:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <timer0_overflow_count>
     586:	90 91 5e 03 	lds	r25, 0x035E	; 0x80035e <timer0_overflow_count+0x1>
     58a:	a0 91 5f 03 	lds	r26, 0x035F	; 0x80035f <timer0_overflow_count+0x2>
     58e:	b0 91 60 03 	lds	r27, 0x0360	; 0x800360 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
     592:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     594:	a8 9b       	sbis	0x15, 0	; 21
     596:	05 c0       	rjmp	.+10     	; 0x5a2 <micros+0x24>
     598:	2f 3f       	cpi	r18, 0xFF	; 255
     59a:	19 f0       	breq	.+6      	; 0x5a2 <micros+0x24>
		m++;
     59c:	01 96       	adiw	r24, 0x01	; 1
     59e:	a1 1d       	adc	r26, r1
     5a0:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     5a2:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     5a4:	ba 2f       	mov	r27, r26
     5a6:	a9 2f       	mov	r26, r25
     5a8:	98 2f       	mov	r25, r24
     5aa:	88 27       	eor	r24, r24
     5ac:	82 0f       	add	r24, r18
     5ae:	91 1d       	adc	r25, r1
     5b0:	a1 1d       	adc	r26, r1
     5b2:	b1 1d       	adc	r27, r1
     5b4:	bc 01       	movw	r22, r24
     5b6:	cd 01       	movw	r24, r26
     5b8:	42 e0       	ldi	r20, 0x02	; 2
     5ba:	66 0f       	add	r22, r22
     5bc:	77 1f       	adc	r23, r23
     5be:	88 1f       	adc	r24, r24
     5c0:	99 1f       	adc	r25, r25
     5c2:	4a 95       	dec	r20
     5c4:	d1 f7       	brne	.-12     	; 0x5ba <micros+0x3c>
}
     5c6:	08 95       	ret

000005c8 <delay>:

void delay(unsigned long ms)
{
     5c8:	8f 92       	push	r8
     5ca:	9f 92       	push	r9
     5cc:	af 92       	push	r10
     5ce:	bf 92       	push	r11
     5d0:	cf 92       	push	r12
     5d2:	df 92       	push	r13
     5d4:	ef 92       	push	r14
     5d6:	ff 92       	push	r15
     5d8:	6b 01       	movw	r12, r22
     5da:	7c 01       	movw	r14, r24
	uint32_t start = micros();
     5dc:	0e 94 bf 02 	call	0x57e	; 0x57e <micros>
     5e0:	4b 01       	movw	r8, r22
     5e2:	5c 01       	movw	r10, r24

	while (ms > 0) {
     5e4:	c1 14       	cp	r12, r1
     5e6:	d1 04       	cpc	r13, r1
     5e8:	e1 04       	cpc	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 f1       	breq	.+64     	; 0x62e <delay+0x66>
		yield();
     5ee:	0e 94 20 0b 	call	0x1640	; 0x1640 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
     5f2:	0e 94 bf 02 	call	0x57e	; 0x57e <micros>
     5f6:	dc 01       	movw	r26, r24
     5f8:	cb 01       	movw	r24, r22
     5fa:	88 19       	sub	r24, r8
     5fc:	99 09       	sbc	r25, r9
     5fe:	aa 09       	sbc	r26, r10
     600:	bb 09       	sbc	r27, r11
     602:	88 3e       	cpi	r24, 0xE8	; 232
     604:	93 40       	sbci	r25, 0x03	; 3
     606:	a1 05       	cpc	r26, r1
     608:	b1 05       	cpc	r27, r1
     60a:	60 f3       	brcs	.-40     	; 0x5e4 <delay+0x1c>
			ms--;
     60c:	21 e0       	ldi	r18, 0x01	; 1
     60e:	c2 1a       	sub	r12, r18
     610:	d1 08       	sbc	r13, r1
     612:	e1 08       	sbc	r14, r1
     614:	f1 08       	sbc	r15, r1
			start += 1000;
     616:	88 ee       	ldi	r24, 0xE8	; 232
     618:	88 0e       	add	r8, r24
     61a:	83 e0       	ldi	r24, 0x03	; 3
     61c:	98 1e       	adc	r9, r24
     61e:	a1 1c       	adc	r10, r1
     620:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
     622:	c1 14       	cp	r12, r1
     624:	d1 04       	cpc	r13, r1
     626:	e1 04       	cpc	r14, r1
     628:	f1 04       	cpc	r15, r1
     62a:	19 f7       	brne	.-58     	; 0x5f2 <delay+0x2a>
     62c:	db cf       	rjmp	.-74     	; 0x5e4 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
     62e:	ff 90       	pop	r15
     630:	ef 90       	pop	r14
     632:	df 90       	pop	r13
     634:	cf 90       	pop	r12
     636:	bf 90       	pop	r11
     638:	af 90       	pop	r10
     63a:	9f 90       	pop	r9
     63c:	8f 90       	pop	r8
     63e:	08 95       	ret

00000640 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
     640:	82 30       	cpi	r24, 0x02	; 2
     642:	91 05       	cpc	r25, r1
     644:	38 f0       	brcs	.+14     	; 0x654 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
     646:	88 0f       	add	r24, r24
     648:	99 1f       	adc	r25, r25
     64a:	88 0f       	add	r24, r24
     64c:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
     64e:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
     650:	01 97       	sbiw	r24, 0x01	; 1
     652:	f1 f7       	brne	.-4      	; 0x650 <delayMicroseconds+0x10>
     654:	08 95       	ret

00000656 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     656:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     658:	84 b5       	in	r24, 0x24	; 36
     65a:	82 60       	ori	r24, 0x02	; 2
     65c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     65e:	84 b5       	in	r24, 0x24	; 36
     660:	81 60       	ori	r24, 0x01	; 1
     662:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     664:	85 b5       	in	r24, 0x25	; 37
     666:	82 60       	ori	r24, 0x02	; 2
     668:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     66a:	85 b5       	in	r24, 0x25	; 37
     66c:	81 60       	ori	r24, 0x01	; 1
     66e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     670:	ee e6       	ldi	r30, 0x6E	; 110
     672:	f0 e0       	ldi	r31, 0x00	; 0
     674:	80 81       	ld	r24, Z
     676:	81 60       	ori	r24, 0x01	; 1
     678:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     67a:	e1 e8       	ldi	r30, 0x81	; 129
     67c:	f0 e0       	ldi	r31, 0x00	; 0
     67e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     680:	80 81       	ld	r24, Z
     682:	82 60       	ori	r24, 0x02	; 2
     684:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     686:	80 81       	ld	r24, Z
     688:	81 60       	ori	r24, 0x01	; 1
     68a:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     68c:	e0 e8       	ldi	r30, 0x80	; 128
     68e:	f0 e0       	ldi	r31, 0x00	; 0
     690:	80 81       	ld	r24, Z
     692:	81 60       	ori	r24, 0x01	; 1
     694:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     696:	e1 eb       	ldi	r30, 0xB1	; 177
     698:	f0 e0       	ldi	r31, 0x00	; 0
     69a:	80 81       	ld	r24, Z
     69c:	84 60       	ori	r24, 0x04	; 4
     69e:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     6a0:	e0 eb       	ldi	r30, 0xB0	; 176
     6a2:	f0 e0       	ldi	r31, 0x00	; 0
     6a4:	80 81       	ld	r24, Z
     6a6:	81 60       	ori	r24, 0x01	; 1
     6a8:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     6aa:	ea e7       	ldi	r30, 0x7A	; 122
     6ac:	f0 e0       	ldi	r31, 0x00	; 0
     6ae:	80 81       	ld	r24, Z
     6b0:	84 60       	ori	r24, 0x04	; 4
     6b2:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     6b4:	80 81       	ld	r24, Z
     6b6:	82 60       	ori	r24, 0x02	; 2
     6b8:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     6ba:	80 81       	ld	r24, Z
     6bc:	81 60       	ori	r24, 0x01	; 1
     6be:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     6c0:	80 81       	ld	r24, Z
     6c2:	80 68       	ori	r24, 0x80	; 128
     6c4:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     6c6:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     6ca:	08 95       	ret

000006cc <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     6cc:	83 30       	cpi	r24, 0x03	; 3
     6ce:	81 f0       	breq	.+32     	; 0x6f0 <turnOffPWM+0x24>
     6d0:	28 f4       	brcc	.+10     	; 0x6dc <turnOffPWM+0x10>
     6d2:	81 30       	cpi	r24, 0x01	; 1
     6d4:	99 f0       	breq	.+38     	; 0x6fc <turnOffPWM+0x30>
     6d6:	82 30       	cpi	r24, 0x02	; 2
     6d8:	a1 f0       	breq	.+40     	; 0x702 <turnOffPWM+0x36>
     6da:	08 95       	ret
     6dc:	87 30       	cpi	r24, 0x07	; 7
     6de:	a9 f0       	breq	.+42     	; 0x70a <turnOffPWM+0x3e>
     6e0:	88 30       	cpi	r24, 0x08	; 8
     6e2:	b9 f0       	breq	.+46     	; 0x712 <turnOffPWM+0x46>
     6e4:	84 30       	cpi	r24, 0x04	; 4
     6e6:	d1 f4       	brne	.+52     	; 0x71c <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     6e8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     6ec:	8f 7d       	andi	r24, 0xDF	; 223
     6ee:	03 c0       	rjmp	.+6      	; 0x6f6 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     6f0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     6f4:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     6f6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     6fa:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     6fc:	84 b5       	in	r24, 0x24	; 36
     6fe:	8f 77       	andi	r24, 0x7F	; 127
     700:	02 c0       	rjmp	.+4      	; 0x706 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     702:	84 b5       	in	r24, 0x24	; 36
     704:	8f 7d       	andi	r24, 0xDF	; 223
     706:	84 bd       	out	0x24, r24	; 36
     708:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     70a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     70e:	8f 77       	andi	r24, 0x7F	; 127
     710:	03 c0       	rjmp	.+6      	; 0x718 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     712:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     716:	8f 7d       	andi	r24, 0xDF	; 223
     718:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     71c:	08 95       	ret

0000071e <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     71e:	cf 93       	push	r28
     720:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	fc 01       	movw	r30, r24
     726:	ec 53       	subi	r30, 0x3C	; 60
     728:	ff 4f       	sbci	r31, 0xFF	; 255
     72a:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     72c:	fc 01       	movw	r30, r24
     72e:	e8 52       	subi	r30, 0x28	; 40
     730:	ff 4f       	sbci	r31, 0xFF	; 255
     732:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     734:	88 23       	and	r24, r24
     736:	61 f1       	breq	.+88     	; 0x790 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	88 0f       	add	r24, r24
     73c:	99 1f       	adc	r25, r25
     73e:	fc 01       	movw	r30, r24
     740:	ea 50       	subi	r30, 0x0A	; 10
     742:	ff 4f       	sbci	r31, 0xFF	; 255
     744:	c5 91       	lpm	r28, Z+
     746:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
     748:	fc 01       	movw	r30, r24
     74a:	e4 51       	subi	r30, 0x14	; 20
     74c:	ff 4f       	sbci	r31, 0xFF	; 255
     74e:	a5 91       	lpm	r26, Z+
     750:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
     752:	61 11       	cpse	r22, r1
     754:	09 c0       	rjmp	.+18     	; 0x768 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
     756:	9f b7       	in	r25, 0x3f	; 63
                cli();
     758:	f8 94       	cli
		*reg &= ~bit;
     75a:	88 81       	ld	r24, Y
     75c:	20 95       	com	r18
     75e:	82 23       	and	r24, r18
     760:	88 83       	st	Y, r24
		*out &= ~bit;
     762:	ec 91       	ld	r30, X
     764:	2e 23       	and	r18, r30
     766:	0b c0       	rjmp	.+22     	; 0x77e <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     768:	62 30       	cpi	r22, 0x02	; 2
     76a:	61 f4       	brne	.+24     	; 0x784 <pinMode+0x66>
		uint8_t oldSREG = SREG;
     76c:	9f b7       	in	r25, 0x3f	; 63
                cli();
     76e:	f8 94       	cli
		*reg &= ~bit;
     770:	88 81       	ld	r24, Y
     772:	32 2f       	mov	r19, r18
     774:	30 95       	com	r19
     776:	83 23       	and	r24, r19
     778:	88 83       	st	Y, r24
		*out |= bit;
     77a:	ec 91       	ld	r30, X
     77c:	2e 2b       	or	r18, r30
     77e:	2c 93       	st	X, r18
		SREG = oldSREG;
     780:	9f bf       	out	0x3f, r25	; 63
     782:	06 c0       	rjmp	.+12     	; 0x790 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
     784:	8f b7       	in	r24, 0x3f	; 63
                cli();
     786:	f8 94       	cli
		*reg |= bit;
     788:	e8 81       	ld	r30, Y
     78a:	2e 2b       	or	r18, r30
     78c:	28 83       	st	Y, r18
		SREG = oldSREG;
     78e:	8f bf       	out	0x3f, r24	; 63
	}
}
     790:	df 91       	pop	r29
     792:	cf 91       	pop	r28
     794:	08 95       	ret

00000796 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     796:	1f 93       	push	r17
     798:	cf 93       	push	r28
     79a:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     79c:	28 2f       	mov	r18, r24
     79e:	30 e0       	ldi	r19, 0x00	; 0
     7a0:	f9 01       	movw	r30, r18
     7a2:	e0 55       	subi	r30, 0x50	; 80
     7a4:	ff 4f       	sbci	r31, 0xFF	; 255
     7a6:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     7a8:	f9 01       	movw	r30, r18
     7aa:	ec 53       	subi	r30, 0x3C	; 60
     7ac:	ff 4f       	sbci	r31, 0xFF	; 255
     7ae:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     7b0:	f9 01       	movw	r30, r18
     7b2:	e8 52       	subi	r30, 0x28	; 40
     7b4:	ff 4f       	sbci	r31, 0xFF	; 255
     7b6:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     7b8:	cc 23       	and	r28, r28
     7ba:	c1 f0       	breq	.+48     	; 0x7ec <digitalWrite+0x56>
     7bc:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     7be:	81 11       	cpse	r24, r1
     7c0:	0e 94 66 03 	call	0x6cc	; 0x6cc <turnOffPWM>

	out = portOutputRegister(port);
     7c4:	ec 2f       	mov	r30, r28
     7c6:	f0 e0       	ldi	r31, 0x00	; 0
     7c8:	ee 0f       	add	r30, r30
     7ca:	ff 1f       	adc	r31, r31
     7cc:	e4 51       	subi	r30, 0x14	; 20
     7ce:	ff 4f       	sbci	r31, 0xFF	; 255
     7d0:	a5 91       	lpm	r26, Z+
     7d2:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     7d4:	9f b7       	in	r25, 0x3f	; 63
	cli();
     7d6:	f8 94       	cli

	if (val == LOW) {
     7d8:	11 11       	cpse	r17, r1
     7da:	04 c0       	rjmp	.+8      	; 0x7e4 <digitalWrite+0x4e>
		*out &= ~bit;
     7dc:	8c 91       	ld	r24, X
     7de:	d0 95       	com	r29
     7e0:	d8 23       	and	r29, r24
     7e2:	02 c0       	rjmp	.+4      	; 0x7e8 <digitalWrite+0x52>
	} else {
		*out |= bit;
     7e4:	ec 91       	ld	r30, X
     7e6:	de 2b       	or	r29, r30
     7e8:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
     7ea:	9f bf       	out	0x3f, r25	; 63
}
     7ec:	df 91       	pop	r29
     7ee:	cf 91       	pop	r28
     7f0:	1f 91       	pop	r17
     7f2:	08 95       	ret

000007f4 <_ZN8SPIClass16beginTransactionE11SPISettings>:
** Descriptions:            did we just receive standard 11bit frame or extended 29bit? 0 = std, 1 = ext
*********************************************************************************************************/
byte MCP_CAN::isExtendedFrame(void)
{
    return ext_flg;
}
     7f4:	20 91 63 03 	lds	r18, 0x0363	; 0x800363 <_ZN8SPIClass13interruptModeE>
     7f8:	22 23       	and	r18, r18
     7fa:	99 f0       	breq	.+38     	; 0x822 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
     7fc:	4f b7       	in	r20, 0x3f	; 63
     7fe:	f8 94       	cli
     800:	20 91 63 03 	lds	r18, 0x0363	; 0x800363 <_ZN8SPIClass13interruptModeE>
     804:	21 30       	cpi	r18, 0x01	; 1
     806:	59 f4       	brne	.+22     	; 0x81e <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
     808:	2d b3       	in	r18, 0x1d	; 29
     80a:	20 93 61 03 	sts	0x0361, r18	; 0x800361 <_ZN8SPIClass13interruptSaveE>
     80e:	3d b3       	in	r19, 0x1d	; 29
     810:	20 91 62 03 	lds	r18, 0x0362	; 0x800362 <_ZN8SPIClass13interruptMaskE>
     814:	20 95       	com	r18
     816:	23 23       	and	r18, r19
     818:	2d bb       	out	0x1d, r18	; 29
     81a:	4f bf       	out	0x3f, r20	; 63
     81c:	02 c0       	rjmp	.+4      	; 0x822 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
     81e:	40 93 61 03 	sts	0x0361, r20	; 0x800361 <_ZN8SPIClass13interruptSaveE>
     822:	8c bd       	out	0x2c, r24	; 44
     824:	9d bd       	out	0x2d, r25	; 45
     826:	08 95       	ret

00000828 <_ZN8SPIClass8transferEh>:
     828:	8e bd       	out	0x2e, r24	; 46
     82a:	00 00       	nop
     82c:	0d b4       	in	r0, 0x2d	; 45
     82e:	07 fe       	sbrs	r0, 7
     830:	fd cf       	rjmp	.-6      	; 0x82c <_ZN8SPIClass8transferEh+0x4>
     832:	8e b5       	in	r24, 0x2e	; 46
     834:	08 95       	ret

00000836 <_ZN8SPIClass14endTransactionEv>:
     836:	80 91 63 03 	lds	r24, 0x0363	; 0x800363 <_ZN8SPIClass13interruptModeE>
     83a:	88 23       	and	r24, r24
     83c:	61 f0       	breq	.+24     	; 0x856 <_ZN8SPIClass14endTransactionEv+0x20>
     83e:	9f b7       	in	r25, 0x3f	; 63
     840:	f8 94       	cli
     842:	20 91 63 03 	lds	r18, 0x0363	; 0x800363 <_ZN8SPIClass13interruptModeE>
     846:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <_ZN8SPIClass13interruptSaveE>
     84a:	21 30       	cpi	r18, 0x01	; 1
     84c:	19 f4       	brne	.+6      	; 0x854 <_ZN8SPIClass14endTransactionEv+0x1e>
     84e:	8d bb       	out	0x1d, r24	; 29
     850:	9f bf       	out	0x3f, r25	; 63
     852:	08 95       	ret
     854:	8f bf       	out	0x3f, r24	; 63
     856:	08 95       	ret

00000858 <_Z11txSidhToRTSh>:
     858:	81 34       	cpi	r24, 0x41	; 65
     85a:	31 f0       	breq	.+12     	; 0x868 <_Z11txSidhToRTSh+0x10>
     85c:	81 35       	cpi	r24, 0x51	; 81
     85e:	31 f0       	breq	.+12     	; 0x86c <_Z11txSidhToRTSh+0x14>
     860:	81 33       	cpi	r24, 0x31	; 49
     862:	31 f0       	breq	.+12     	; 0x870 <_Z11txSidhToRTSh+0x18>
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	08 95       	ret
     868:	82 e8       	ldi	r24, 0x82	; 130
     86a:	08 95       	ret
     86c:	84 e8       	ldi	r24, 0x84	; 132
     86e:	08 95       	ret
     870:	81 e8       	ldi	r24, 0x81	; 129
     872:	08 95       	ret

00000874 <_Z14txSidhToTxLoadh>:
     874:	81 34       	cpi	r24, 0x41	; 65
     876:	31 f0       	breq	.+12     	; 0x884 <_Z14txSidhToTxLoadh+0x10>
     878:	81 35       	cpi	r24, 0x51	; 81
     87a:	31 f0       	breq	.+12     	; 0x888 <_Z14txSidhToTxLoadh+0x14>
     87c:	81 33       	cpi	r24, 0x31	; 49
     87e:	31 f0       	breq	.+12     	; 0x88c <_Z14txSidhToTxLoadh+0x18>
     880:	80 e0       	ldi	r24, 0x00	; 0
     882:	08 95       	ret
     884:	82 e4       	ldi	r24, 0x42	; 66
     886:	08 95       	ret
     888:	84 e4       	ldi	r24, 0x44	; 68
     88a:	08 95       	ret
     88c:	80 e4       	ldi	r24, 0x40	; 64
     88e:	08 95       	ret

00000890 <_ZN7MCP_CAN13mcp2515_resetEv>:
     890:	cf 93       	push	r28
     892:	df 93       	push	r29
     894:	ec 01       	movw	r28, r24
     896:	80 e5       	ldi	r24, 0x50	; 80
     898:	91 e0       	ldi	r25, 0x01	; 1
     89a:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <_ZN8SPIClass16beginTransactionE11SPISettings>
     89e:	60 e0       	ldi	r22, 0x00	; 0
     8a0:	8e 81       	ldd	r24, Y+6	; 0x06
     8a2:	0e 94 cb 03 	call	0x796	; 0x796 <digitalWrite>
     8a6:	80 ec       	ldi	r24, 0xC0	; 192
     8a8:	0e 94 14 04 	call	0x828	; 0x828 <_ZN8SPIClass8transferEh>
     8ac:	61 e0       	ldi	r22, 0x01	; 1
     8ae:	8e 81       	ldd	r24, Y+6	; 0x06
     8b0:	0e 94 cb 03 	call	0x796	; 0x796 <digitalWrite>
     8b4:	0e 94 1b 04 	call	0x836	; 0x836 <_ZN8SPIClass14endTransactionEv>
     8b8:	6a e0       	ldi	r22, 0x0A	; 10
     8ba:	70 e0       	ldi	r23, 0x00	; 0
     8bc:	80 e0       	ldi	r24, 0x00	; 0
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	df 91       	pop	r29
     8c2:	cf 91       	pop	r28
     8c4:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <delay>

000008c8 <_ZN7MCP_CAN20mcp2515_readRegisterEh>:
     8c8:	1f 93       	push	r17
     8ca:	cf 93       	push	r28
     8cc:	df 93       	push	r29
     8ce:	ec 01       	movw	r28, r24
     8d0:	16 2f       	mov	r17, r22
     8d2:	80 e5       	ldi	r24, 0x50	; 80
     8d4:	91 e0       	ldi	r25, 0x01	; 1
     8d6:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <_ZN8SPIClass16beginTransactionE11SPISettings>
     8da:	60 e0       	ldi	r22, 0x00	; 0
     8dc:	8e 81       	ldd	r24, Y+6	; 0x06
     8de:	0e 94 cb 03 	call	0x796	; 0x796 <digitalWrite>
     8e2:	83 e0       	ldi	r24, 0x03	; 3
     8e4:	0e 94 14 04 	call	0x828	; 0x828 <_ZN8SPIClass8transferEh>
     8e8:	81 2f       	mov	r24, r17
     8ea:	0e 94 14 04 	call	0x828	; 0x828 <_ZN8SPIClass8transferEh>
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	0e 94 14 04 	call	0x828	; 0x828 <_ZN8SPIClass8transferEh>
     8f4:	18 2f       	mov	r17, r24
     8f6:	61 e0       	ldi	r22, 0x01	; 1
     8f8:	8e 81       	ldd	r24, Y+6	; 0x06
     8fa:	0e 94 cb 03 	call	0x796	; 0x796 <digitalWrite>
     8fe:	0e 94 1b 04 	call	0x836	; 0x836 <_ZN8SPIClass14endTransactionEv>
     902:	81 2f       	mov	r24, r17
     904:	df 91       	pop	r29
     906:	cf 91       	pop	r28
     908:	1f 91       	pop	r17
     90a:	08 95       	ret

0000090c <_ZN7MCP_CAN19mcp2515_setRegisterEhh>:
     90c:	0f 93       	push	r16
     90e:	1f 93       	push	r17
     910:	cf 93       	push	r28
     912:	df 93       	push	r29
     914:	ec 01       	movw	r28, r24
     916:	06 2f       	mov	r16, r22
     918:	14 2f       	mov	r17, r20
     91a:	80 e5       	ldi	r24, 0x50	; 80
     91c:	91 e0       	ldi	r25, 0x01	; 1
     91e:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <_ZN8SPIClass16beginTransactionE11SPISettings>
     922:	60 e0       	ldi	r22, 0x00	; 0
     924:	8e 81       	ldd	r24, Y+6	; 0x06
     926:	0e 94 cb 03 	call	0x796	; 0x796 <digitalWrite>
     92a:	82 e0       	ldi	r24, 0x02	; 2
     92c:	0e 94 14 04 	call	0x828	; 0x828 <_ZN8SPIClass8transferEh>
     930:	80 2f       	mov	r24, r16
     932:	0e 94 14 04 	call	0x828	; 0x828 <_ZN8SPIClass8transferEh>
     936:	81 2f       	mov	r24, r17
     938:	0e 94 14 04 	call	0x828	; 0x828 <_ZN8SPIClass8transferEh>
     93c:	61 e0       	ldi	r22, 0x01	; 1
     93e:	8e 81       	ldd	r24, Y+6	; 0x06
     940:	0e 94 cb 03 	call	0x796	; 0x796 <digitalWrite>
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	1f 91       	pop	r17
     94a:	0f 91       	pop	r16
     94c:	0c 94 1b 04 	jmp	0x836	; 0x836 <_ZN8SPIClass14endTransactionEv>

00000950 <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>:
     950:	ff 92       	push	r15
     952:	0f 93       	push	r16
     954:	1f 93       	push	r17
     956:	cf 93       	push	r28
     958:	df 93       	push	r29
     95a:	ec 01       	movw	r28, r24
     95c:	f6 2e       	mov	r15, r22
     95e:	04 2f       	mov	r16, r20
     960:	12 2f       	mov	r17, r18
     962:	80 e5       	ldi	r24, 0x50	; 80
     964:	91 e0       	ldi	r25, 0x01	; 1
     966:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <_ZN8SPIClass16beginTransactionE11SPISettings>
     96a:	60 e0       	ldi	r22, 0x00	; 0
     96c:	8e 81       	ldd	r24, Y+6	; 0x06
     96e:	0e 94 cb 03 	call	0x796	; 0x796 <digitalWrite>
     972:	85 e0       	ldi	r24, 0x05	; 5
     974:	0e 94 14 04 	call	0x828	; 0x828 <_ZN8SPIClass8transferEh>
     978:	8f 2d       	mov	r24, r15
     97a:	0e 94 14 04 	call	0x828	; 0x828 <_ZN8SPIClass8transferEh>
     97e:	80 2f       	mov	r24, r16
     980:	0e 94 14 04 	call	0x828	; 0x828 <_ZN8SPIClass8transferEh>
     984:	81 2f       	mov	r24, r17
     986:	0e 94 14 04 	call	0x828	; 0x828 <_ZN8SPIClass8transferEh>
     98a:	61 e0       	ldi	r22, 0x01	; 1
     98c:	8e 81       	ldd	r24, Y+6	; 0x06
     98e:	0e 94 cb 03 	call	0x796	; 0x796 <digitalWrite>
     992:	df 91       	pop	r29
     994:	cf 91       	pop	r28
     996:	1f 91       	pop	r17
     998:	0f 91       	pop	r16
     99a:	ff 90       	pop	r15
     99c:	0c 94 1b 04 	jmp	0x836	; 0x836 <_ZN8SPIClass14endTransactionEv>

000009a0 <_ZN7MCP_CAN18mcp2515_readStatusEv>:
     9a0:	1f 93       	push	r17
     9a2:	cf 93       	push	r28
     9a4:	df 93       	push	r29
     9a6:	ec 01       	movw	r28, r24
     9a8:	80 e5       	ldi	r24, 0x50	; 80
     9aa:	91 e0       	ldi	r25, 0x01	; 1
     9ac:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <_ZN8SPIClass16beginTransactionE11SPISettings>
     9b0:	60 e0       	ldi	r22, 0x00	; 0
     9b2:	8e 81       	ldd	r24, Y+6	; 0x06
     9b4:	0e 94 cb 03 	call	0x796	; 0x796 <digitalWrite>
     9b8:	80 ea       	ldi	r24, 0xA0	; 160
     9ba:	0e 94 14 04 	call	0x828	; 0x828 <_ZN8SPIClass8transferEh>
     9be:	80 e0       	ldi	r24, 0x00	; 0
     9c0:	0e 94 14 04 	call	0x828	; 0x828 <_ZN8SPIClass8transferEh>
     9c4:	18 2f       	mov	r17, r24
     9c6:	61 e0       	ldi	r22, 0x01	; 1
     9c8:	8e 81       	ldd	r24, Y+6	; 0x06
     9ca:	0e 94 cb 03 	call	0x796	; 0x796 <digitalWrite>
     9ce:	0e 94 1b 04 	call	0x836	; 0x836 <_ZN8SPIClass14endTransactionEv>
     9d2:	81 2f       	mov	r24, r17
     9d4:	df 91       	pop	r29
     9d6:	cf 91       	pop	r28
     9d8:	1f 91       	pop	r17
     9da:	08 95       	ret

000009dc <_ZN7MCP_CAN14setSleepWakeupEh>:
     9dc:	61 11       	cpse	r22, r1
     9de:	02 c0       	rjmp	.+4      	; 0x9e4 <_ZN7MCP_CAN14setSleepWakeupEh+0x8>
     9e0:	20 e0       	ldi	r18, 0x00	; 0
     9e2:	01 c0       	rjmp	.+2      	; 0x9e6 <_ZN7MCP_CAN14setSleepWakeupEh+0xa>
     9e4:	20 e4       	ldi	r18, 0x40	; 64
     9e6:	40 e4       	ldi	r20, 0x40	; 64
     9e8:	6b e2       	ldi	r22, 0x2B	; 43
     9ea:	0c 94 a8 04 	jmp	0x950	; 0x950 <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>

000009ee <_ZN7MCP_CAN7getModeEv>:
     9ee:	6e e0       	ldi	r22, 0x0E	; 14
     9f0:	0e 94 64 04 	call	0x8c8	; 0x8c8 <_ZN7MCP_CAN20mcp2515_readRegisterEh>
     9f4:	80 7e       	andi	r24, 0xE0	; 224
     9f6:	08 95       	ret

000009f8 <_ZN7MCP_CAN22mcp2515_requestNewModeEh>:
     9f8:	bf 92       	push	r11
     9fa:	cf 92       	push	r12
     9fc:	df 92       	push	r13
     9fe:	ef 92       	push	r14
     a00:	ff 92       	push	r15
     a02:	0f 93       	push	r16
     a04:	1f 93       	push	r17
     a06:	cf 93       	push	r28
     a08:	df 93       	push	r29
     a0a:	ec 01       	movw	r28, r24
     a0c:	b6 2e       	mov	r11, r22
     a0e:	0e 94 b3 02 	call	0x566	; 0x566 <millis>
     a12:	6b 01       	movw	r12, r22
     a14:	7c 01       	movw	r14, r24
     a16:	0b 2d       	mov	r16, r11
     a18:	10 e0       	ldi	r17, 0x00	; 0
     a1a:	2b 2d       	mov	r18, r11
     a1c:	40 ee       	ldi	r20, 0xE0	; 224
     a1e:	6f e0       	ldi	r22, 0x0F	; 15
     a20:	ce 01       	movw	r24, r28
     a22:	0e 94 a8 04 	call	0x950	; 0x950 <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>
     a26:	6e e0       	ldi	r22, 0x0E	; 14
     a28:	ce 01       	movw	r24, r28
     a2a:	0e 94 64 04 	call	0x8c8	; 0x8c8 <_ZN7MCP_CAN20mcp2515_readRegisterEh>
     a2e:	80 7e       	andi	r24, 0xE0	; 224
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	80 17       	cp	r24, r16
     a34:	91 07       	cpc	r25, r17
     a36:	79 f0       	breq	.+30     	; 0xa56 <_ZN7MCP_CAN22mcp2515_requestNewModeEh+0x5e>
     a38:	0e 94 b3 02 	call	0x566	; 0x566 <millis>
     a3c:	dc 01       	movw	r26, r24
     a3e:	cb 01       	movw	r24, r22
     a40:	8c 19       	sub	r24, r12
     a42:	9d 09       	sbc	r25, r13
     a44:	ae 09       	sbc	r26, r14
     a46:	bf 09       	sbc	r27, r15
     a48:	89 3c       	cpi	r24, 0xC9	; 201
     a4a:	91 05       	cpc	r25, r1
     a4c:	a1 05       	cpc	r26, r1
     a4e:	b1 05       	cpc	r27, r1
     a50:	20 f3       	brcs	.-56     	; 0xa1a <_ZN7MCP_CAN22mcp2515_requestNewModeEh+0x22>
     a52:	81 e0       	ldi	r24, 0x01	; 1
     a54:	01 c0       	rjmp	.+2      	; 0xa58 <_ZN7MCP_CAN22mcp2515_requestNewModeEh+0x60>
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	df 91       	pop	r29
     a5a:	cf 91       	pop	r28
     a5c:	1f 91       	pop	r17
     a5e:	0f 91       	pop	r16
     a60:	ff 90       	pop	r15
     a62:	ef 90       	pop	r14
     a64:	df 90       	pop	r13
     a66:	cf 90       	pop	r12
     a68:	bf 90       	pop	r11
     a6a:	08 95       	ret

00000a6c <_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh>:
     a6c:	0f 93       	push	r16
     a6e:	1f 93       	push	r17
     a70:	cf 93       	push	r28
     a72:	df 93       	push	r29
     a74:	ec 01       	movw	r28, r24
     a76:	16 2f       	mov	r17, r22
     a78:	0e 94 f7 04 	call	0x9ee	; 0x9ee <_ZN7MCP_CAN7getModeEv>
     a7c:	80 32       	cpi	r24, 0x20	; 32
     a7e:	21 f5       	brne	.+72     	; 0xac8 <_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh+0x5c>
     a80:	10 32       	cpi	r17, 0x20	; 32
     a82:	11 f1       	breq	.+68     	; 0xac8 <_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh+0x5c>
     a84:	6b e2       	ldi	r22, 0x2B	; 43
     a86:	ce 01       	movw	r24, r28
     a88:	0e 94 64 04 	call	0x8c8	; 0x8c8 <_ZN7MCP_CAN20mcp2515_readRegisterEh>
     a8c:	08 2f       	mov	r16, r24
     a8e:	00 74       	andi	r16, 0x40	; 64
     a90:	86 fd       	sbrc	r24, 6
     a92:	06 c0       	rjmp	.+12     	; 0xaa0 <_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh+0x34>
     a94:	20 e4       	ldi	r18, 0x40	; 64
     a96:	40 e4       	ldi	r20, 0x40	; 64
     a98:	6b e2       	ldi	r22, 0x2B	; 43
     a9a:	ce 01       	movw	r24, r28
     a9c:	0e 94 a8 04 	call	0x950	; 0x950 <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>
     aa0:	20 e4       	ldi	r18, 0x40	; 64
     aa2:	40 e4       	ldi	r20, 0x40	; 64
     aa4:	6c e2       	ldi	r22, 0x2C	; 44
     aa6:	ce 01       	movw	r24, r28
     aa8:	0e 94 a8 04 	call	0x950	; 0x950 <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>
     aac:	60 e6       	ldi	r22, 0x60	; 96
     aae:	ce 01       	movw	r24, r28
     ab0:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <_ZN7MCP_CAN22mcp2515_requestNewModeEh>
     ab4:	81 11       	cpse	r24, r1
     ab6:	16 c0       	rjmp	.+44     	; 0xae4 <_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh+0x78>
     ab8:	01 11       	cpse	r16, r1
     aba:	06 c0       	rjmp	.+12     	; 0xac8 <_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh+0x5c>
     abc:	20 e0       	ldi	r18, 0x00	; 0
     abe:	40 e4       	ldi	r20, 0x40	; 64
     ac0:	6b e2       	ldi	r22, 0x2B	; 43
     ac2:	ce 01       	movw	r24, r28
     ac4:	0e 94 a8 04 	call	0x950	; 0x950 <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>
     ac8:	20 e0       	ldi	r18, 0x00	; 0
     aca:	40 e4       	ldi	r20, 0x40	; 64
     acc:	6c e2       	ldi	r22, 0x2C	; 44
     ace:	ce 01       	movw	r24, r28
     ad0:	0e 94 a8 04 	call	0x950	; 0x950 <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>
     ad4:	61 2f       	mov	r22, r17
     ad6:	ce 01       	movw	r24, r28
     ad8:	df 91       	pop	r29
     ada:	cf 91       	pop	r28
     adc:	1f 91       	pop	r17
     ade:	0f 91       	pop	r16
     ae0:	0c 94 fc 04 	jmp	0x9f8	; 0x9f8 <_ZN7MCP_CAN22mcp2515_requestNewModeEh>
     ae4:	81 e0       	ldi	r24, 0x01	; 1
     ae6:	df 91       	pop	r29
     ae8:	cf 91       	pop	r28
     aea:	1f 91       	pop	r17
     aec:	0f 91       	pop	r16
     aee:	08 95       	ret

00000af0 <_ZN7MCP_CAN5sleepEv>:
     af0:	cf 93       	push	r28
     af2:	df 93       	push	r29
     af4:	ec 01       	movw	r28, r24
     af6:	0e 94 f7 04 	call	0x9ee	; 0x9ee <_ZN7MCP_CAN7getModeEv>
     afa:	80 32       	cpi	r24, 0x20	; 32
     afc:	31 f0       	breq	.+12     	; 0xb0a <_ZN7MCP_CAN5sleepEv+0x1a>
     afe:	60 e2       	ldi	r22, 0x20	; 32
     b00:	ce 01       	movw	r24, r28
     b02:	df 91       	pop	r29
     b04:	cf 91       	pop	r28
     b06:	0c 94 36 05 	jmp	0xa6c	; 0xa6c <_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh>
     b0a:	80 e0       	ldi	r24, 0x00	; 0
     b0c:	df 91       	pop	r29
     b0e:	cf 91       	pop	r28
     b10:	08 95       	ret

00000b12 <_ZN7MCP_CAN4wakeEv>:
     b12:	cf 93       	push	r28
     b14:	df 93       	push	r29
     b16:	ec 01       	movw	r28, r24
     b18:	0e 94 f7 04 	call	0x9ee	; 0x9ee <_ZN7MCP_CAN7getModeEv>
     b1c:	6a 85       	ldd	r22, Y+10	; 0x0a
     b1e:	86 17       	cp	r24, r22
     b20:	29 f0       	breq	.+10     	; 0xb2c <_ZN7MCP_CAN4wakeEv+0x1a>
     b22:	ce 01       	movw	r24, r28
     b24:	df 91       	pop	r29
     b26:	cf 91       	pop	r28
     b28:	0c 94 36 05 	jmp	0xa6c	; 0xa6c <_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh>
     b2c:	80 e0       	ldi	r24, 0x00	; 0
     b2e:	df 91       	pop	r29
     b30:	cf 91       	pop	r28
     b32:	08 95       	ret

00000b34 <_ZN7MCP_CAN7setModeEh>:
     b34:	60 32       	cpi	r22, 0x20	; 32
     b36:	11 f0       	breq	.+4      	; 0xb3c <_ZN7MCP_CAN7setModeEh+0x8>
     b38:	fc 01       	movw	r30, r24
     b3a:	62 87       	std	Z+10, r22	; 0x0a
     b3c:	0c 94 36 05 	jmp	0xa6c	; 0xa6c <_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh>

00000b40 <_ZN7MCP_CAN18mcp2515_configRateEhh>:
     b40:	0f 93       	push	r16
     b42:	1f 93       	push	r17
     b44:	cf 93       	push	r28
     b46:	df 93       	push	r29
     b48:	41 30       	cpi	r20, 0x01	; 1
     b4a:	21 f0       	breq	.+8      	; 0xb54 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x14>
     b4c:	42 30       	cpi	r20, 0x02	; 2
     b4e:	09 f4       	brne	.+2      	; 0xb52 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x12>
     b50:	3f c0       	rjmp	.+126    	; 0xbd0 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x90>
     b52:	71 c0       	rjmp	.+226    	; 0xc36 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xf6>
     b54:	46 2f       	mov	r20, r22
     b56:	50 e0       	ldi	r21, 0x00	; 0
     b58:	fa 01       	movw	r30, r20
     b5a:	31 97       	sbiw	r30, 0x01	; 1
     b5c:	e2 31       	cpi	r30, 0x12	; 18
     b5e:	f1 05       	cpc	r31, r1
     b60:	08 f0       	brcs	.+2      	; 0xb64 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x24>
     b62:	69 c0       	rjmp	.+210    	; 0xc36 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xf6>
     b64:	ec 5c       	subi	r30, 0xCC	; 204
     b66:	ff 4f       	sbci	r31, 0xFF	; 255
     b68:	0c 94 3e 0c 	jmp	0x187c	; 0x187c <__tablejump2__>
     b6c:	c7 e8       	ldi	r28, 0x87	; 135
     b6e:	df ef       	ldi	r29, 0xFF	; 255
     b70:	6e c0       	rjmp	.+220    	; 0xc4e <_ZN7MCP_CAN18mcp2515_configRateEhh+0x10e>
     b72:	c7 e0       	ldi	r28, 0x07	; 7
     b74:	da eb       	ldi	r29, 0xBA	; 186
     b76:	67 c0       	rjmp	.+206    	; 0xc46 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x106>
     b78:	c5 e8       	ldi	r28, 0x85	; 133
     b7a:	d1 ef       	ldi	r29, 0xF1	; 241
     b7c:	64 c0       	rjmp	.+200    	; 0xc46 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x106>
     b7e:	c7 e0       	ldi	r28, 0x07	; 7
     b80:	de eb       	ldi	r29, 0xBE	; 190
     b82:	49 e0       	ldi	r20, 0x09	; 9
     b84:	65 c0       	rjmp	.+202    	; 0xc50 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x110>
     b86:	c7 e8       	ldi	r28, 0x87	; 135
     b88:	df ef       	ldi	r29, 0xFF	; 255
     b8a:	35 c0       	rjmp	.+106    	; 0xbf6 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xb6>
     b8c:	c7 e8       	ldi	r28, 0x87	; 135
     b8e:	da ef       	ldi	r29, 0xFA	; 250
     b90:	32 c0       	rjmp	.+100    	; 0xbf6 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xb6>
     b92:	c7 e8       	ldi	r28, 0x87	; 135
     b94:	df ef       	ldi	r29, 0xFF	; 255
     b96:	36 c0       	rjmp	.+108    	; 0xc04 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xc4>
     b98:	c7 e0       	ldi	r28, 0x07	; 7
     b9a:	de eb       	ldi	r29, 0xBE	; 190
     b9c:	33 c0       	rjmp	.+102    	; 0xc04 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xc4>
     b9e:	c7 e0       	ldi	r28, 0x07	; 7
     ba0:	dd ea       	ldi	r29, 0xAD	; 173
     ba2:	30 c0       	rjmp	.+96     	; 0xc04 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xc4>
     ba4:	c7 e8       	ldi	r28, 0x87	; 135
     ba6:	da ef       	ldi	r29, 0xFA	; 250
     ba8:	2d c0       	rjmp	.+90     	; 0xc04 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xc4>
     baa:	c6 e8       	ldi	r28, 0x86	; 134
     bac:	d0 ef       	ldi	r29, 0xF0	; 240
     bae:	2a c0       	rjmp	.+84     	; 0xc04 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xc4>
     bb0:	c7 e8       	ldi	r28, 0x87	; 135
     bb2:	da ef       	ldi	r29, 0xFA	; 250
     bb4:	2e c0       	rjmp	.+92     	; 0xc12 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xd2>
     bb6:	c5 e8       	ldi	r28, 0x85	; 133
     bb8:	d1 ef       	ldi	r29, 0xF1	; 241
     bba:	41 e4       	ldi	r20, 0x41	; 65
     bbc:	49 c0       	rjmp	.+146    	; 0xc50 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x110>
     bbe:	c6 e8       	ldi	r28, 0x86	; 134
     bc0:	d0 ef       	ldi	r29, 0xF0	; 240
     bc2:	2e c0       	rjmp	.+92     	; 0xc20 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xe0>
     bc4:	c4 e0       	ldi	r28, 0x04	; 4
     bc6:	d0 ea       	ldi	r29, 0xA0	; 160
     bc8:	2b c0       	rjmp	.+86     	; 0xc20 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xe0>
     bca:	c2 e8       	ldi	r28, 0x82	; 130
     bcc:	d0 ed       	ldi	r29, 0xD0	; 208
     bce:	28 c0       	rjmp	.+80     	; 0xc20 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xe0>
     bd0:	46 2f       	mov	r20, r22
     bd2:	50 e0       	ldi	r21, 0x00	; 0
     bd4:	fa 01       	movw	r30, r20
     bd6:	31 97       	sbiw	r30, 0x01	; 1
     bd8:	e2 31       	cpi	r30, 0x12	; 18
     bda:	f1 05       	cpc	r31, r1
     bdc:	60 f5       	brcc	.+88     	; 0xc36 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xf6>
     bde:	ea 5b       	subi	r30, 0xBA	; 186
     be0:	ff 4f       	sbci	r31, 0xFF	; 255
     be2:	0c 94 3e 0c 	jmp	0x187c	; 0x187c <__tablejump2__>
     be6:	c7 e0       	ldi	r28, 0x07	; 7
     be8:	df eb       	ldi	r29, 0xBF	; 191
     bea:	2d c0       	rjmp	.+90     	; 0xc46 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x106>
     bec:	c7 e0       	ldi	r28, 0x07	; 7
     bee:	df eb       	ldi	r29, 0xBF	; 191
     bf0:	02 c0       	rjmp	.+4      	; 0xbf6 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xb6>
     bf2:	c4 e0       	ldi	r28, 0x04	; 4
     bf4:	d4 ea       	ldi	r29, 0xA4	; 164
     bf6:	47 e0       	ldi	r20, 0x07	; 7
     bf8:	2b c0       	rjmp	.+86     	; 0xc50 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x110>
     bfa:	c7 e0       	ldi	r28, 0x07	; 7
     bfc:	df eb       	ldi	r29, 0xBF	; 191
     bfe:	02 c0       	rjmp	.+4      	; 0xc04 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xc4>
     c00:	c6 e0       	ldi	r28, 0x06	; 6
     c02:	d4 eb       	ldi	r29, 0xB4	; 180
     c04:	43 e0       	ldi	r20, 0x03	; 3
     c06:	24 c0       	rjmp	.+72     	; 0xc50 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x110>
     c08:	c7 e0       	ldi	r28, 0x07	; 7
     c0a:	df eb       	ldi	r29, 0xBF	; 191
     c0c:	02 c0       	rjmp	.+4      	; 0xc12 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xd2>
     c0e:	c6 e0       	ldi	r28, 0x06	; 6
     c10:	d4 eb       	ldi	r29, 0xB4	; 180
     c12:	41 e0       	ldi	r20, 0x01	; 1
     c14:	1d c0       	rjmp	.+58     	; 0xc50 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x110>
     c16:	c5 e0       	ldi	r28, 0x05	; 5
     c18:	d1 eb       	ldi	r29, 0xB1	; 177
     c1a:	fb cf       	rjmp	.-10     	; 0xc12 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xd2>
     c1c:	c6 e0       	ldi	r28, 0x06	; 6
     c1e:	d4 eb       	ldi	r29, 0xB4	; 180
     c20:	40 e0       	ldi	r20, 0x00	; 0
     c22:	16 c0       	rjmp	.+44     	; 0xc50 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x110>
     c24:	c5 e0       	ldi	r28, 0x05	; 5
     c26:	d1 eb       	ldi	r29, 0xB1	; 177
     c28:	fb cf       	rjmp	.-10     	; 0xc20 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xe0>
     c2a:	c2 e0       	ldi	r28, 0x02	; 2
     c2c:	d0 e9       	ldi	r29, 0x90	; 144
     c2e:	f8 cf       	rjmp	.-16     	; 0xc20 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xe0>
     c30:	c0 e0       	ldi	r28, 0x00	; 0
     c32:	d0 e8       	ldi	r29, 0x80	; 128
     c34:	f5 cf       	rjmp	.-22     	; 0xc20 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xe0>
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	1a c0       	rjmp	.+52     	; 0xc6e <_ZN7MCP_CAN18mcp2515_configRateEhh+0x12e>
     c3a:	c7 e8       	ldi	r28, 0x87	; 135
     c3c:	df ef       	ldi	r29, 0xFF	; 255
     c3e:	4f e3       	ldi	r20, 0x3F	; 63
     c40:	07 c0       	rjmp	.+14     	; 0xc50 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x110>
     c42:	c7 e8       	ldi	r28, 0x87	; 135
     c44:	df ef       	ldi	r29, 0xFF	; 255
     c46:	4f e0       	ldi	r20, 0x0F	; 15
     c48:	03 c0       	rjmp	.+6      	; 0xc50 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x110>
     c4a:	c7 e0       	ldi	r28, 0x07	; 7
     c4c:	df eb       	ldi	r29, 0xBF	; 191
     c4e:	4f e1       	ldi	r20, 0x1F	; 31
     c50:	8c 01       	movw	r16, r24
     c52:	6a e2       	ldi	r22, 0x2A	; 42
     c54:	0e 94 86 04 	call	0x90c	; 0x90c <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
     c58:	4d 2f       	mov	r20, r29
     c5a:	69 e2       	ldi	r22, 0x29	; 41
     c5c:	c8 01       	movw	r24, r16
     c5e:	0e 94 86 04 	call	0x90c	; 0x90c <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
     c62:	4c 2f       	mov	r20, r28
     c64:	68 e2       	ldi	r22, 0x28	; 40
     c66:	c8 01       	movw	r24, r16
     c68:	0e 94 86 04 	call	0x90c	; 0x90c <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
     c6c:	80 e0       	ldi	r24, 0x00	; 0
     c6e:	df 91       	pop	r29
     c70:	cf 91       	pop	r28
     c72:	1f 91       	pop	r17
     c74:	0f 91       	pop	r16
     c76:	08 95       	ret

00000c78 <_ZN7MCP_CAN22mcp2515_initCANBuffersEv>:
     c78:	0f 93       	push	r16
     c7a:	1f 93       	push	r17
     c7c:	cf 93       	push	r28
     c7e:	8c 01       	movw	r16, r24
     c80:	c0 e3       	ldi	r28, 0x30	; 48
     c82:	40 e0       	ldi	r20, 0x00	; 0
     c84:	6c 2f       	mov	r22, r28
     c86:	c8 01       	movw	r24, r16
     c88:	0e 94 86 04 	call	0x90c	; 0x90c <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
     c8c:	60 e1       	ldi	r22, 0x10	; 16
     c8e:	6c 0f       	add	r22, r28
     c90:	40 e0       	ldi	r20, 0x00	; 0
     c92:	c8 01       	movw	r24, r16
     c94:	0e 94 86 04 	call	0x90c	; 0x90c <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
     c98:	60 e2       	ldi	r22, 0x20	; 32
     c9a:	6c 0f       	add	r22, r28
     c9c:	40 e0       	ldi	r20, 0x00	; 0
     c9e:	c8 01       	movw	r24, r16
     ca0:	0e 94 86 04 	call	0x90c	; 0x90c <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
     ca4:	cf 5f       	subi	r28, 0xFF	; 255
     ca6:	ce 33       	cpi	r28, 0x3E	; 62
     ca8:	61 f7       	brne	.-40     	; 0xc82 <_ZN7MCP_CAN22mcp2515_initCANBuffersEv+0xa>
     caa:	40 e0       	ldi	r20, 0x00	; 0
     cac:	60 e6       	ldi	r22, 0x60	; 96
     cae:	c8 01       	movw	r24, r16
     cb0:	0e 94 86 04 	call	0x90c	; 0x90c <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
     cb4:	40 e0       	ldi	r20, 0x00	; 0
     cb6:	60 e7       	ldi	r22, 0x70	; 112
     cb8:	c8 01       	movw	r24, r16
     cba:	cf 91       	pop	r28
     cbc:	1f 91       	pop	r17
     cbe:	0f 91       	pop	r16
     cc0:	0c 94 86 04 	jmp	0x90c	; 0x90c <_ZN7MCP_CAN19mcp2515_setRegisterEhh>

00000cc4 <_ZN7MCP_CAN12mcp2515_initEhh>:
     cc4:	ff 92       	push	r15
     cc6:	0f 93       	push	r16
     cc8:	1f 93       	push	r17
     cca:	cf 93       	push	r28
     ccc:	df 93       	push	r29
     cce:	ec 01       	movw	r28, r24
     cd0:	06 2f       	mov	r16, r22
     cd2:	f4 2e       	mov	r15, r20
     cd4:	0e 94 48 04 	call	0x890	; 0x890 <_ZN7MCP_CAN13mcp2515_resetEv>
     cd8:	60 e8       	ldi	r22, 0x80	; 128
     cda:	ce 01       	movw	r24, r28
     cdc:	0e 94 36 05 	call	0xa6c	; 0xa6c <_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh>
     ce0:	18 2f       	mov	r17, r24
     ce2:	88 23       	and	r24, r24
     ce4:	19 f0       	breq	.+6      	; 0xcec <_ZN7MCP_CAN12mcp2515_initEhh+0x28>
     ce6:	64 e0       	ldi	r22, 0x04	; 4
     ce8:	71 e0       	ldi	r23, 0x01	; 1
     cea:	36 c0       	rjmp	.+108    	; 0xd58 <_ZN7MCP_CAN12mcp2515_initEhh+0x94>
     cec:	6e e1       	ldi	r22, 0x1E	; 30
     cee:	71 e0       	ldi	r23, 0x01	; 1
     cf0:	86 e6       	ldi	r24, 0x66	; 102
     cf2:	93 e0       	ldi	r25, 0x03	; 3
     cf4:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <_ZN5Print5printEPKc>
     cf8:	4f 2d       	mov	r20, r15
     cfa:	60 2f       	mov	r22, r16
     cfc:	ce 01       	movw	r24, r28
     cfe:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7MCP_CAN18mcp2515_configRateEhh>
     d02:	88 23       	and	r24, r24
     d04:	19 f0       	breq	.+6      	; 0xd0c <_ZN7MCP_CAN12mcp2515_initEhh+0x48>
     d06:	6c e3       	ldi	r22, 0x3C	; 60
     d08:	71 e0       	ldi	r23, 0x01	; 1
     d0a:	26 c0       	rjmp	.+76     	; 0xd58 <_ZN7MCP_CAN12mcp2515_initEhh+0x94>
     d0c:	6e e4       	ldi	r22, 0x4E	; 78
     d0e:	71 e0       	ldi	r23, 0x01	; 1
     d10:	86 e6       	ldi	r24, 0x66	; 102
     d12:	93 e0       	ldi	r25, 0x03	; 3
     d14:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <_ZN5Print5printEPKc>
     d18:	ce 01       	movw	r24, r28
     d1a:	0e 94 3c 06 	call	0xc78	; 0xc78 <_ZN7MCP_CAN22mcp2515_initCANBuffersEv>
     d1e:	43 e0       	ldi	r20, 0x03	; 3
     d20:	6b e2       	ldi	r22, 0x2B	; 43
     d22:	ce 01       	movw	r24, r28
     d24:	0e 94 86 04 	call	0x90c	; 0x90c <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
     d28:	24 e0       	ldi	r18, 0x04	; 4
     d2a:	44 e6       	ldi	r20, 0x64	; 100
     d2c:	60 e6       	ldi	r22, 0x60	; 96
     d2e:	ce 01       	movw	r24, r28
     d30:	0e 94 a8 04 	call	0x950	; 0x950 <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>
     d34:	20 e0       	ldi	r18, 0x00	; 0
     d36:	40 e6       	ldi	r20, 0x60	; 96
     d38:	60 e7       	ldi	r22, 0x70	; 112
     d3a:	ce 01       	movw	r24, r28
     d3c:	0e 94 a8 04 	call	0x950	; 0x950 <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>
     d40:	60 e0       	ldi	r22, 0x00	; 0
     d42:	ce 01       	movw	r24, r28
     d44:	0e 94 9a 05 	call	0xb34	; 0xb34 <_ZN7MCP_CAN7setModeEh>
     d48:	18 2f       	mov	r17, r24
     d4a:	88 23       	and	r24, r24
     d4c:	19 f0       	breq	.+6      	; 0xd54 <_ZN7MCP_CAN12mcp2515_initEhh+0x90>
     d4e:	63 e6       	ldi	r22, 0x63	; 99
     d50:	71 e0       	ldi	r23, 0x01	; 1
     d52:	02 c0       	rjmp	.+4      	; 0xd58 <_ZN7MCP_CAN12mcp2515_initEhh+0x94>
     d54:	6e e7       	ldi	r22, 0x7E	; 126
     d56:	71 e0       	ldi	r23, 0x01	; 1
     d58:	86 e6       	ldi	r24, 0x66	; 102
     d5a:	93 e0       	ldi	r25, 0x03	; 3
     d5c:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <_ZN5Print5printEPKc>
     d60:	81 2f       	mov	r24, r17
     d62:	df 91       	pop	r29
     d64:	cf 91       	pop	r28
     d66:	1f 91       	pop	r17
     d68:	0f 91       	pop	r16
     d6a:	ff 90       	pop	r15
     d6c:	08 95       	ret

00000d6e <_Z17mcp2515_id_to_bufhmPh>:
     d6e:	f9 01       	movw	r30, r18
     d70:	81 30       	cpi	r24, 0x01	; 1
     d72:	b1 f4       	brne	.+44     	; 0xda0 <_Z17mcp2515_id_to_bufhmPh+0x32>
     d74:	43 83       	std	Z+3, r20	; 0x03
     d76:	52 83       	std	Z+2, r21	; 0x02
     d78:	ab 01       	movw	r20, r22
     d7a:	66 27       	eor	r22, r22
     d7c:	77 27       	eor	r23, r23
     d7e:	94 2f       	mov	r25, r20
     d80:	9c 71       	andi	r25, 0x1C	; 28
     d82:	84 2f       	mov	r24, r20
     d84:	83 70       	andi	r24, 0x03	; 3
     d86:	28 e0       	ldi	r18, 0x08	; 8
     d88:	92 9f       	mul	r25, r18
     d8a:	80 0d       	add	r24, r0
     d8c:	11 24       	eor	r1, r1
     d8e:	88 60       	ori	r24, 0x08	; 8
     d90:	81 83       	std	Z+1, r24	; 0x01
     d92:	65 e0       	ldi	r22, 0x05	; 5
     d94:	56 95       	lsr	r21
     d96:	47 95       	ror	r20
     d98:	6a 95       	dec	r22
     d9a:	e1 f7       	brne	.-8      	; 0xd94 <_Z17mcp2515_id_to_bufhmPh+0x26>
     d9c:	40 83       	st	Z, r20
     d9e:	08 95       	ret
     da0:	ca 01       	movw	r24, r20
     da2:	23 e0       	ldi	r18, 0x03	; 3
     da4:	96 95       	lsr	r25
     da6:	87 95       	ror	r24
     da8:	2a 95       	dec	r18
     daa:	e1 f7       	brne	.-8      	; 0xda4 <_Z17mcp2515_id_to_bufhmPh+0x36>
     dac:	80 83       	st	Z, r24
     dae:	42 95       	swap	r20
     db0:	44 0f       	add	r20, r20
     db2:	40 7e       	andi	r20, 0xE0	; 224
     db4:	41 83       	std	Z+1, r20	; 0x01
     db6:	13 82       	std	Z+3, r1	; 0x03
     db8:	12 82       	std	Z+2, r1	; 0x02
     dba:	08 95       	ret

00000dbc <_ZN7MCP_CAN19mcp2515_read_canMsgEhPVmPVhS3_S3_S3_>:
     dbc:	2f 92       	push	r2
     dbe:	3f 92       	push	r3
     dc0:	4f 92       	push	r4
     dc2:	5f 92       	push	r5
     dc4:	6f 92       	push	r6
     dc6:	7f 92       	push	r7
     dc8:	8f 92       	push	r8
     dca:	9f 92       	push	r9
     dcc:	af 92       	push	r10
     dce:	bf 92       	push	r11
     dd0:	cf 92       	push	r12
     dd2:	df 92       	push	r13
     dd4:	ef 92       	push	r14
     dd6:	ff 92       	push	r15
     dd8:	0f 93       	push	r16
     dda:	1f 93       	push	r17
     ddc:	cf 93       	push	r28
     dde:	df 93       	push	r29
     de0:	00 d0       	rcall	.+0      	; 0xde2 <_ZN7MCP_CAN19mcp2515_read_canMsgEhPVmPVhS3_S3_S3_+0x26>
     de2:	00 d0       	rcall	.+0      	; 0xde4 <_ZN7MCP_CAN19mcp2515_read_canMsgEhPVmPVhS3_S3_S3_+0x28>
     de4:	1f 92       	push	r1
     de6:	cd b7       	in	r28, 0x3d	; 61
     de8:	de b7       	in	r29, 0x3e	; 62
     dea:	4c 01       	movw	r8, r24
     dec:	56 2e       	mov	r5, r22
     dee:	5a 01       	movw	r10, r20
     df0:	19 01       	movw	r2, r18
     df2:	38 01       	movw	r6, r16
     df4:	4c 2c       	mov	r4, r12
     df6:	dd 82       	std	Y+5, r13	; 0x05
     df8:	60 e0       	ldi	r22, 0x00	; 0
     dfa:	fc 01       	movw	r30, r24
     dfc:	86 81       	ldd	r24, Z+6	; 0x06
     dfe:	0e 94 cb 03 	call	0x796	; 0x796 <digitalWrite>
     e02:	85 2d       	mov	r24, r5
     e04:	0e 94 14 04 	call	0x828	; 0x828 <_ZN8SPIClass8transferEh>
     e08:	8e 01       	movw	r16, r28
     e0a:	0f 5f       	subi	r16, 0xFF	; 255
     e0c:	1f 4f       	sbci	r17, 0xFF	; 255
     e0e:	6e 01       	movw	r12, r28
     e10:	f5 e0       	ldi	r31, 0x05	; 5
     e12:	cf 0e       	add	r12, r31
     e14:	d1 1c       	adc	r13, r1
     e16:	80 e0       	ldi	r24, 0x00	; 0
     e18:	0e 94 14 04 	call	0x828	; 0x828 <_ZN8SPIClass8transferEh>
     e1c:	f8 01       	movw	r30, r16
     e1e:	81 93       	st	Z+, r24
     e20:	8f 01       	movw	r16, r30
     e22:	ec 15       	cp	r30, r12
     e24:	fd 05       	cpc	r31, r13
     e26:	b9 f7       	brne	.-18     	; 0xe16 <_ZN7MCP_CAN19mcp2515_read_canMsgEhPVmPVhS3_S3_S3_+0x5a>
     e28:	2a 81       	ldd	r18, Y+2	; 0x02
     e2a:	39 81       	ldd	r19, Y+1	; 0x01
     e2c:	82 2f       	mov	r24, r18
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	65 e0       	ldi	r22, 0x05	; 5
     e32:	95 95       	asr	r25
     e34:	87 95       	ror	r24
     e36:	6a 95       	dec	r22
     e38:	e1 f7       	brne	.-8      	; 0xe32 <_ZN7MCP_CAN19mcp2515_read_canMsgEhPVmPVhS3_S3_S3_+0x76>
     e3a:	f8 e0       	ldi	r31, 0x08	; 8
     e3c:	3f 9f       	mul	r19, r31
     e3e:	80 0d       	add	r24, r0
     e40:	91 1d       	adc	r25, r1
     e42:	11 24       	eor	r1, r1
     e44:	09 2e       	mov	r0, r25
     e46:	00 0c       	add	r0, r0
     e48:	aa 0b       	sbc	r26, r26
     e4a:	bb 0b       	sbc	r27, r27
     e4c:	f5 01       	movw	r30, r10
     e4e:	80 83       	st	Z, r24
     e50:	91 83       	std	Z+1, r25	; 0x01
     e52:	a2 83       	std	Z+2, r26	; 0x02
     e54:	b3 83       	std	Z+3, r27	; 0x03
     e56:	f1 01       	movw	r30, r2
     e58:	10 82       	st	Z, r1
     e5a:	23 ff       	sbrs	r18, 3
     e5c:	3a c0       	rjmp	.+116    	; 0xed2 <_ZN7MCP_CAN19mcp2515_read_canMsgEhPVmPVhS3_S3_S3_+0x116>
     e5e:	f5 01       	movw	r30, r10
     e60:	80 81       	ld	r24, Z
     e62:	91 81       	ldd	r25, Z+1	; 0x01
     e64:	a2 81       	ldd	r26, Z+2	; 0x02
     e66:	b3 81       	ldd	r27, Z+3	; 0x03
     e68:	32 e0       	ldi	r19, 0x02	; 2
     e6a:	88 0f       	add	r24, r24
     e6c:	99 1f       	adc	r25, r25
     e6e:	aa 1f       	adc	r26, r26
     e70:	bb 1f       	adc	r27, r27
     e72:	3a 95       	dec	r19
     e74:	d1 f7       	brne	.-12     	; 0xe6a <_ZN7MCP_CAN19mcp2515_read_canMsgEhPVmPVhS3_S3_S3_+0xae>
     e76:	23 70       	andi	r18, 0x03	; 3
     e78:	82 0f       	add	r24, r18
     e7a:	91 1d       	adc	r25, r1
     e7c:	a1 1d       	adc	r26, r1
     e7e:	b1 1d       	adc	r27, r1
     e80:	80 83       	st	Z, r24
     e82:	91 83       	std	Z+1, r25	; 0x01
     e84:	a2 83       	std	Z+2, r26	; 0x02
     e86:	b3 83       	std	Z+3, r27	; 0x03
     e88:	80 81       	ld	r24, Z
     e8a:	91 81       	ldd	r25, Z+1	; 0x01
     e8c:	a2 81       	ldd	r26, Z+2	; 0x02
     e8e:	b3 81       	ldd	r27, Z+3	; 0x03
     e90:	ba 2f       	mov	r27, r26
     e92:	a9 2f       	mov	r26, r25
     e94:	98 2f       	mov	r25, r24
     e96:	88 27       	eor	r24, r24
     e98:	2b 81       	ldd	r18, Y+3	; 0x03
     e9a:	82 0f       	add	r24, r18
     e9c:	91 1d       	adc	r25, r1
     e9e:	a1 1d       	adc	r26, r1
     ea0:	b1 1d       	adc	r27, r1
     ea2:	80 83       	st	Z, r24
     ea4:	91 83       	std	Z+1, r25	; 0x01
     ea6:	a2 83       	std	Z+2, r26	; 0x02
     ea8:	b3 83       	std	Z+3, r27	; 0x03
     eaa:	80 81       	ld	r24, Z
     eac:	91 81       	ldd	r25, Z+1	; 0x01
     eae:	a2 81       	ldd	r26, Z+2	; 0x02
     eb0:	b3 81       	ldd	r27, Z+3	; 0x03
     eb2:	ba 2f       	mov	r27, r26
     eb4:	a9 2f       	mov	r26, r25
     eb6:	98 2f       	mov	r25, r24
     eb8:	88 27       	eor	r24, r24
     eba:	2c 81       	ldd	r18, Y+4	; 0x04
     ebc:	82 0f       	add	r24, r18
     ebe:	91 1d       	adc	r25, r1
     ec0:	a1 1d       	adc	r26, r1
     ec2:	b1 1d       	adc	r27, r1
     ec4:	80 83       	st	Z, r24
     ec6:	91 83       	std	Z+1, r25	; 0x01
     ec8:	a2 83       	std	Z+2, r26	; 0x02
     eca:	b3 83       	std	Z+3, r27	; 0x03
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	f1 01       	movw	r30, r2
     ed0:	80 83       	st	Z, r24
     ed2:	80 e0       	ldi	r24, 0x00	; 0
     ed4:	0e 94 14 04 	call	0x828	; 0x828 <_ZN8SPIClass8transferEh>
     ed8:	98 2f       	mov	r25, r24
     eda:	9f 70       	andi	r25, 0x0F	; 15
     edc:	f7 01       	movw	r30, r14
     ede:	90 83       	st	Z, r25
     ee0:	86 fb       	bst	r24, 6
     ee2:	88 27       	eor	r24, r24
     ee4:	80 f9       	bld	r24, 0
     ee6:	f3 01       	movw	r30, r6
     ee8:	80 83       	st	Z, r24
     eea:	c4 2c       	mov	r12, r4
     eec:	dd 80       	ldd	r13, Y+5	; 0x05
     eee:	10 e0       	ldi	r17, 0x00	; 0
     ef0:	f7 01       	movw	r30, r14
     ef2:	80 81       	ld	r24, Z
     ef4:	18 17       	cp	r17, r24
     ef6:	50 f4       	brcc	.+20     	; 0xf0c <_ZN7MCP_CAN19mcp2515_read_canMsgEhPVmPVhS3_S3_S3_+0x150>
     ef8:	18 30       	cpi	r17, 0x08	; 8
     efa:	41 f0       	breq	.+16     	; 0xf0c <_ZN7MCP_CAN19mcp2515_read_canMsgEhPVmPVhS3_S3_S3_+0x150>
     efc:	80 e0       	ldi	r24, 0x00	; 0
     efe:	0e 94 14 04 	call	0x828	; 0x828 <_ZN8SPIClass8transferEh>
     f02:	f6 01       	movw	r30, r12
     f04:	81 93       	st	Z+, r24
     f06:	6f 01       	movw	r12, r30
     f08:	1f 5f       	subi	r17, 0xFF	; 255
     f0a:	f2 cf       	rjmp	.-28     	; 0xef0 <_ZN7MCP_CAN19mcp2515_read_canMsgEhPVmPVhS3_S3_S3_+0x134>
     f0c:	61 e0       	ldi	r22, 0x01	; 1
     f0e:	f4 01       	movw	r30, r8
     f10:	86 81       	ldd	r24, Z+6	; 0x06
     f12:	0f 90       	pop	r0
     f14:	0f 90       	pop	r0
     f16:	0f 90       	pop	r0
     f18:	0f 90       	pop	r0
     f1a:	0f 90       	pop	r0
     f1c:	df 91       	pop	r29
     f1e:	cf 91       	pop	r28
     f20:	1f 91       	pop	r17
     f22:	0f 91       	pop	r16
     f24:	ff 90       	pop	r15
     f26:	ef 90       	pop	r14
     f28:	df 90       	pop	r13
     f2a:	cf 90       	pop	r12
     f2c:	bf 90       	pop	r11
     f2e:	af 90       	pop	r10
     f30:	9f 90       	pop	r9
     f32:	8f 90       	pop	r8
     f34:	7f 90       	pop	r7
     f36:	6f 90       	pop	r6
     f38:	5f 90       	pop	r5
     f3a:	4f 90       	pop	r4
     f3c:	3f 90       	pop	r3
     f3e:	2f 90       	pop	r2
     f40:	0c 94 cb 03 	jmp	0x796	; 0x796 <digitalWrite>

00000f44 <_ZN7MCP_CAN22mcp2515_start_transmitEh>:
     f44:	1f 93       	push	r17
     f46:	cf 93       	push	r28
     f48:	df 93       	push	r29
     f4a:	ec 01       	movw	r28, r24
     f4c:	16 2f       	mov	r17, r22
     f4e:	80 e5       	ldi	r24, 0x50	; 80
     f50:	91 e0       	ldi	r25, 0x01	; 1
     f52:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <_ZN8SPIClass16beginTransactionE11SPISettings>
     f56:	60 e0       	ldi	r22, 0x00	; 0
     f58:	8e 81       	ldd	r24, Y+6	; 0x06
     f5a:	0e 94 cb 03 	call	0x796	; 0x796 <digitalWrite>
     f5e:	81 2f       	mov	r24, r17
     f60:	0e 94 2c 04 	call	0x858	; 0x858 <_Z11txSidhToRTSh>
     f64:	0e 94 14 04 	call	0x828	; 0x828 <_ZN8SPIClass8transferEh>
     f68:	61 e0       	ldi	r22, 0x01	; 1
     f6a:	8e 81       	ldd	r24, Y+6	; 0x06
     f6c:	0e 94 cb 03 	call	0x796	; 0x796 <digitalWrite>
     f70:	df 91       	pop	r29
     f72:	cf 91       	pop	r28
     f74:	1f 91       	pop	r17
     f76:	0c 94 1b 04 	jmp	0x836	; 0x836 <_ZN8SPIClass14endTransactionEv>

00000f7a <_ZN7MCP_CAN20mcp2515_write_canMsgEhmhhhPVKh>:
     f7a:	4f 92       	push	r4
     f7c:	5f 92       	push	r5
     f7e:	6f 92       	push	r6
     f80:	7f 92       	push	r7
     f82:	8f 92       	push	r8
     f84:	9f 92       	push	r9
     f86:	af 92       	push	r10
     f88:	bf 92       	push	r11
     f8a:	cf 92       	push	r12
     f8c:	df 92       	push	r13
     f8e:	ef 92       	push	r14
     f90:	ff 92       	push	r15
     f92:	0f 93       	push	r16
     f94:	1f 93       	push	r17
     f96:	cf 93       	push	r28
     f98:	df 93       	push	r29
     f9a:	00 d0       	rcall	.+0      	; 0xf9c <_ZN7MCP_CAN20mcp2515_write_canMsgEhmhhhPVKh+0x22>
     f9c:	00 d0       	rcall	.+0      	; 0xf9e <_ZN7MCP_CAN20mcp2515_write_canMsgEhmhhhPVKh+0x24>
     f9e:	cd b7       	in	r28, 0x3d	; 61
     fa0:	de b7       	in	r29, 0x3e	; 62
     fa2:	4c 01       	movw	r8, r24
     fa4:	d6 2e       	mov	r13, r22
     fa6:	29 01       	movw	r4, r18
     fa8:	3a 01       	movw	r6, r20
     faa:	86 2f       	mov	r24, r22
     fac:	0e 94 3a 04 	call	0x874	; 0x874 <_Z14txSidhToTxLoadh>
     fb0:	18 2f       	mov	r17, r24
     fb2:	e1 10       	cpse	r14, r1
     fb4:	02 c0       	rjmp	.+4      	; 0xfba <_ZN7MCP_CAN20mcp2515_write_canMsgEhmhhhPVKh+0x40>
     fb6:	f1 2c       	mov	r15, r1
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <_ZN7MCP_CAN20mcp2515_write_canMsgEhmhhhPVKh+0x44>
     fba:	80 e4       	ldi	r24, 0x40	; 64
     fbc:	f8 2e       	mov	r15, r24
     fbe:	9e 01       	movw	r18, r28
     fc0:	2f 5f       	subi	r18, 0xFF	; 255
     fc2:	3f 4f       	sbci	r19, 0xFF	; 255
     fc4:	b3 01       	movw	r22, r6
     fc6:	a2 01       	movw	r20, r4
     fc8:	80 2f       	mov	r24, r16
     fca:	0e 94 b7 06 	call	0xd6e	; 0xd6e <_Z17mcp2515_id_to_bufhmPh>
     fce:	80 e5       	ldi	r24, 0x50	; 80
     fd0:	91 e0       	ldi	r25, 0x01	; 1
     fd2:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <_ZN8SPIClass16beginTransactionE11SPISettings>
     fd6:	60 e0       	ldi	r22, 0x00	; 0
     fd8:	f4 01       	movw	r30, r8
     fda:	86 81       	ldd	r24, Z+6	; 0x06
     fdc:	0e 94 cb 03 	call	0x796	; 0x796 <digitalWrite>
     fe0:	81 2f       	mov	r24, r17
     fe2:	0e 94 14 04 	call	0x828	; 0x828 <_ZN8SPIClass8transferEh>
     fe6:	8e 01       	movw	r16, r28
     fe8:	0f 5f       	subi	r16, 0xFF	; 255
     fea:	1f 4f       	sbci	r17, 0xFF	; 255
     fec:	3e 01       	movw	r6, r28
     fee:	f5 e0       	ldi	r31, 0x05	; 5
     ff0:	6f 0e       	add	r6, r31
     ff2:	71 1c       	adc	r7, r1
     ff4:	f8 01       	movw	r30, r16
     ff6:	81 91       	ld	r24, Z+
     ff8:	8f 01       	movw	r16, r30
     ffa:	0e 94 14 04 	call	0x828	; 0x828 <_ZN8SPIClass8transferEh>
     ffe:	06 15       	cp	r16, r6
    1000:	17 05       	cpc	r17, r7
    1002:	c1 f7       	brne	.-16     	; 0xff4 <_ZN7MCP_CAN20mcp2515_write_canMsgEhmhhhPVKh+0x7a>
    1004:	8c 2d       	mov	r24, r12
    1006:	8f 29       	or	r24, r15
    1008:	0e 94 14 04 	call	0x828	; 0x828 <_ZN8SPIClass8transferEh>
    100c:	75 01       	movw	r14, r10
    100e:	10 e0       	ldi	r17, 0x00	; 0
    1010:	1c 15       	cp	r17, r12
    1012:	49 f0       	breq	.+18     	; 0x1026 <_ZN7MCP_CAN20mcp2515_write_canMsgEhmhhhPVKh+0xac>
    1014:	18 30       	cpi	r17, 0x08	; 8
    1016:	39 f0       	breq	.+14     	; 0x1026 <_ZN7MCP_CAN20mcp2515_write_canMsgEhmhhhPVKh+0xac>
    1018:	f7 01       	movw	r30, r14
    101a:	81 91       	ld	r24, Z+
    101c:	7f 01       	movw	r14, r30
    101e:	0e 94 14 04 	call	0x828	; 0x828 <_ZN8SPIClass8transferEh>
    1022:	1f 5f       	subi	r17, 0xFF	; 255
    1024:	f5 cf       	rjmp	.-22     	; 0x1010 <_ZN7MCP_CAN20mcp2515_write_canMsgEhmhhhPVKh+0x96>
    1026:	61 e0       	ldi	r22, 0x01	; 1
    1028:	f4 01       	movw	r30, r8
    102a:	86 81       	ldd	r24, Z+6	; 0x06
    102c:	0e 94 cb 03 	call	0x796	; 0x796 <digitalWrite>
    1030:	0e 94 1b 04 	call	0x836	; 0x836 <_ZN8SPIClass14endTransactionEv>
    1034:	6d 2d       	mov	r22, r13
    1036:	c4 01       	movw	r24, r8
    1038:	0e 94 a2 07 	call	0xf44	; 0xf44 <_ZN7MCP_CAN22mcp2515_start_transmitEh>
    103c:	0f 90       	pop	r0
    103e:	0f 90       	pop	r0
    1040:	0f 90       	pop	r0
    1042:	0f 90       	pop	r0
    1044:	df 91       	pop	r29
    1046:	cf 91       	pop	r28
    1048:	1f 91       	pop	r17
    104a:	0f 91       	pop	r16
    104c:	ff 90       	pop	r15
    104e:	ef 90       	pop	r14
    1050:	df 90       	pop	r13
    1052:	cf 90       	pop	r12
    1054:	bf 90       	pop	r11
    1056:	af 90       	pop	r10
    1058:	9f 90       	pop	r9
    105a:	8f 90       	pop	r8
    105c:	7f 90       	pop	r7
    105e:	6f 90       	pop	r6
    1060:	5f 90       	pop	r5
    1062:	4f 90       	pop	r4
    1064:	08 95       	ret

00001066 <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh>:
    1066:	ef 92       	push	r14
    1068:	ff 92       	push	r15
    106a:	0f 93       	push	r16
    106c:	1f 93       	push	r17
    106e:	cf 93       	push	r28
    1070:	8c 01       	movw	r16, r24
    1072:	7b 01       	movw	r14, r22
    1074:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <_ZN7MCP_CAN18mcp2515_readStatusEv>
    1078:	84 75       	andi	r24, 0x54	; 84
    107a:	f7 01       	movw	r30, r14
    107c:	10 82       	st	Z, r1
    107e:	84 35       	cpi	r24, 0x54	; 84
    1080:	91 f1       	breq	.+100    	; 0x10e6 <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh+0x80>
    1082:	f8 01       	movw	r30, r16
    1084:	91 85       	ldd	r25, Z+9	; 0x09
    1086:	43 e0       	ldi	r20, 0x03	; 3
    1088:	50 e0       	ldi	r21, 0x00	; 0
    108a:	49 1b       	sub	r20, r25
    108c:	51 09       	sbc	r21, r1
    108e:	e9 e1       	ldi	r30, 0x19	; 25
    1090:	f3 e0       	ldi	r31, 0x03	; 3
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	29 2f       	mov	r18, r25
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	24 17       	cp	r18, r20
    109a:	35 07       	cpc	r19, r21
    109c:	24 f5       	brge	.+72     	; 0x10e6 <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh+0x80>
    109e:	93 30       	cpi	r25, 0x03	; 3
    10a0:	10 f4       	brcc	.+4      	; 0x10a6 <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh+0x40>
    10a2:	c0 81       	ld	r28, Z
    10a4:	01 c0       	rjmp	.+2      	; 0x10a8 <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh+0x42>
    10a6:	cf ef       	ldi	r28, 0xFF	; 255
    10a8:	c8 23       	and	r28, r24
    10aa:	31 96       	adiw	r30, 0x01	; 1
    10ac:	c1 11       	cpse	r28, r1
    10ae:	19 c0       	rjmp	.+50     	; 0x10e2 <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh+0x7c>
    10b0:	93 30       	cpi	r25, 0x03	; 3
    10b2:	28 f4       	brcc	.+10     	; 0x10be <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh+0x58>
    10b4:	f9 01       	movw	r30, r18
    10b6:	e1 5e       	subi	r30, 0xE1	; 225
    10b8:	fc 4f       	sbci	r31, 0xFC	; 252
    10ba:	80 81       	ld	r24, Z
    10bc:	01 c0       	rjmp	.+2      	; 0x10c0 <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh+0x5a>
    10be:	80 e5       	ldi	r24, 0x50	; 80
    10c0:	8f 5f       	subi	r24, 0xFF	; 255
    10c2:	f7 01       	movw	r30, r14
    10c4:	80 83       	st	Z, r24
    10c6:	93 30       	cpi	r25, 0x03	; 3
    10c8:	28 f4       	brcc	.+10     	; 0x10d4 <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh+0x6e>
    10ca:	f9 01       	movw	r30, r18
    10cc:	e4 5e       	subi	r30, 0xE4	; 228
    10ce:	fc 4f       	sbci	r31, 0xFC	; 252
    10d0:	40 81       	ld	r20, Z
    10d2:	01 c0       	rjmp	.+2      	; 0x10d6 <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh+0x70>
    10d4:	40 e0       	ldi	r20, 0x00	; 0
    10d6:	20 e0       	ldi	r18, 0x00	; 0
    10d8:	6c e2       	ldi	r22, 0x2C	; 44
    10da:	c8 01       	movw	r24, r16
    10dc:	0e 94 a8 04 	call	0x950	; 0x950 <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>
    10e0:	03 c0       	rjmp	.+6      	; 0x10e8 <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh+0x82>
    10e2:	9f 5f       	subi	r25, 0xFF	; 255
    10e4:	d7 cf       	rjmp	.-82     	; 0x1094 <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh+0x2e>
    10e6:	c2 e0       	ldi	r28, 0x02	; 2
    10e8:	8c 2f       	mov	r24, r28
    10ea:	cf 91       	pop	r28
    10ec:	1f 91       	pop	r17
    10ee:	0f 91       	pop	r16
    10f0:	ff 90       	pop	r15
    10f2:	ef 90       	pop	r14
    10f4:	08 95       	ret

000010f6 <_ZN7MCP_CAN7init_CSEh>:
    10f6:	cf 93       	push	r28
    10f8:	df 93       	push	r29
    10fa:	ec 01       	movw	r28, r24
    10fc:	66 23       	and	r22, r22
    10fe:	59 f0       	breq	.+22     	; 0x1116 <_ZN7MCP_CAN7init_CSEh+0x20>
    1100:	86 2f       	mov	r24, r22
    1102:	6e 83       	std	Y+6, r22	; 0x06
    1104:	61 e0       	ldi	r22, 0x01	; 1
    1106:	0e 94 8f 03 	call	0x71e	; 0x71e <pinMode>
    110a:	61 e0       	ldi	r22, 0x01	; 1
    110c:	8e 81       	ldd	r24, Y+6	; 0x06
    110e:	df 91       	pop	r29
    1110:	cf 91       	pop	r28
    1112:	0c 94 cb 03 	jmp	0x796	; 0x796 <digitalWrite>
    1116:	df 91       	pop	r29
    1118:	cf 91       	pop	r28
    111a:	08 95       	ret

0000111c <_ZN7MCP_CANC1Eh>:
    111c:	fc 01       	movw	r30, r24
    111e:	11 86       	std	Z+9, r1	; 0x09
    1120:	25 e6       	ldi	r18, 0x65	; 101
    1122:	33 e0       	ldi	r19, 0x03	; 3
    1124:	30 87       	std	Z+8, r19	; 0x08
    1126:	27 83       	std	Z+7, r18	; 0x07
    1128:	0c 94 7b 08 	jmp	0x10f6	; 0x10f6 <_ZN7MCP_CAN7init_CSEh>

0000112c <_ZN7MCP_CAN5beginEhh>:
    112c:	0f 93       	push	r16
    112e:	1f 93       	push	r17
    1130:	cf 93       	push	r28
    1132:	df 93       	push	r29
    1134:	ec 01       	movw	r28, r24
    1136:	16 2f       	mov	r17, r22
    1138:	04 2f       	mov	r16, r20
    113a:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <_ZN8SPIClass5beginEv>
    113e:	40 2f       	mov	r20, r16
    1140:	61 2f       	mov	r22, r17
    1142:	ce 01       	movw	r24, r28
    1144:	0e 94 62 06 	call	0xcc4	; 0xcc4 <_ZN7MCP_CAN12mcp2515_initEhh>
    1148:	91 e0       	ldi	r25, 0x01	; 1
    114a:	81 11       	cpse	r24, r1
    114c:	01 c0       	rjmp	.+2      	; 0x1150 <_ZN7MCP_CAN5beginEhh+0x24>
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	89 2f       	mov	r24, r25
    1152:	df 91       	pop	r29
    1154:	cf 91       	pop	r28
    1156:	1f 91       	pop	r17
    1158:	0f 91       	pop	r16
    115a:	08 95       	ret

0000115c <_ZN7MCP_CAN7sendMsgEmhhhPKhb>:
    115c:	2f 92       	push	r2
    115e:	3f 92       	push	r3
    1160:	4f 92       	push	r4
    1162:	5f 92       	push	r5
    1164:	6f 92       	push	r6
    1166:	7f 92       	push	r7
    1168:	8f 92       	push	r8
    116a:	9f 92       	push	r9
    116c:	af 92       	push	r10
    116e:	bf 92       	push	r11
    1170:	cf 92       	push	r12
    1172:	df 92       	push	r13
    1174:	ef 92       	push	r14
    1176:	ff 92       	push	r15
    1178:	0f 93       	push	r16
    117a:	1f 93       	push	r17
    117c:	cf 93       	push	r28
    117e:	df 93       	push	r29
    1180:	1f 92       	push	r1
    1182:	cd b7       	in	r28, 0x3d	; 61
    1184:	de b7       	in	r29, 0x3e	; 62
    1186:	4c 01       	movw	r8, r24
    1188:	2a 01       	movw	r4, r20
    118a:	3b 01       	movw	r6, r22
    118c:	22 2e       	mov	r2, r18
    118e:	30 2e       	mov	r3, r16
    1190:	fa 2c       	mov	r15, r10
    1192:	fc 01       	movw	r30, r24
    1194:	41 83       	std	Z+1, r20	; 0x01
    1196:	52 83       	std	Z+2, r21	; 0x02
    1198:	63 83       	std	Z+3, r22	; 0x03
    119a:	74 83       	std	Z+4, r23	; 0x04
    119c:	20 83       	st	Z, r18
    119e:	05 83       	std	Z+5, r16	; 0x05
    11a0:	00 e0       	ldi	r16, 0x00	; 0
    11a2:	10 e0       	ldi	r17, 0x00	; 0
    11a4:	be 01       	movw	r22, r28
    11a6:	6f 5f       	subi	r22, 0xFF	; 255
    11a8:	7f 4f       	sbci	r23, 0xFF	; 255
    11aa:	c4 01       	movw	r24, r8
    11ac:	0e 94 33 08 	call	0x1066	; 0x1066 <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh>
    11b0:	0f 5f       	subi	r16, 0xFF	; 255
    11b2:	1f 4f       	sbci	r17, 0xFF	; 255
    11b4:	82 30       	cpi	r24, 0x02	; 2
    11b6:	41 f4       	brne	.+16     	; 0x11c8 <_ZN7MCP_CAN7sendMsgEmhhhPKhb+0x6c>
    11b8:	02 33       	cpi	r16, 0x32	; 50
    11ba:	11 05       	cpc	r17, r1
    11bc:	61 f1       	breq	.+88     	; 0x1216 <_ZN7MCP_CAN7sendMsgEmhhhPKhb+0xba>
    11be:	8a e0       	ldi	r24, 0x0A	; 10
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	0e 94 20 03 	call	0x640	; 0x640 <delayMicroseconds>
    11c6:	ee cf       	rjmp	.-36     	; 0x11a4 <_ZN7MCP_CAN7sendMsgEmhhhPKhb+0x48>
    11c8:	02 33       	cpi	r16, 0x32	; 50
    11ca:	11 05       	cpc	r17, r1
    11cc:	21 f1       	breq	.+72     	; 0x1216 <_ZN7MCP_CAN7sendMsgEmhhhPKhb+0xba>
    11ce:	56 01       	movw	r10, r12
    11d0:	ce 2c       	mov	r12, r14
    11d2:	e3 2c       	mov	r14, r3
    11d4:	02 2d       	mov	r16, r2
    11d6:	a3 01       	movw	r20, r6
    11d8:	92 01       	movw	r18, r4
    11da:	69 81       	ldd	r22, Y+1	; 0x01
    11dc:	c4 01       	movw	r24, r8
    11de:	0e 94 bd 07 	call	0xf7a	; 0xf7a <_ZN7MCP_CAN20mcp2515_write_canMsgEhmhhhPVKh>
    11e2:	ff 20       	and	r15, r15
    11e4:	b1 f0       	breq	.+44     	; 0x1212 <_ZN7MCP_CAN7sendMsgEmhhhPKhb+0xb6>
    11e6:	00 e0       	ldi	r16, 0x00	; 0
    11e8:	10 e0       	ldi	r17, 0x00	; 0
    11ea:	0f 5f       	subi	r16, 0xFF	; 255
    11ec:	1f 4f       	sbci	r17, 0xFF	; 255
    11ee:	69 81       	ldd	r22, Y+1	; 0x01
    11f0:	61 50       	subi	r22, 0x01	; 1
    11f2:	c4 01       	movw	r24, r8
    11f4:	0e 94 64 04 	call	0x8c8	; 0x8c8 <_ZN7MCP_CAN20mcp2515_readRegisterEh>
    11f8:	83 ff       	sbrs	r24, 3
    11fa:	08 c0       	rjmp	.+16     	; 0x120c <_ZN7MCP_CAN7sendMsgEmhhhPKhb+0xb0>
    11fc:	02 33       	cpi	r16, 0x32	; 50
    11fe:	11 05       	cpc	r17, r1
    1200:	61 f0       	breq	.+24     	; 0x121a <_ZN7MCP_CAN7sendMsgEmhhhPKhb+0xbe>
    1202:	8a e0       	ldi	r24, 0x0A	; 10
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	0e 94 20 03 	call	0x640	; 0x640 <delayMicroseconds>
    120a:	ef cf       	rjmp	.-34     	; 0x11ea <_ZN7MCP_CAN7sendMsgEmhhhPKhb+0x8e>
    120c:	02 33       	cpi	r16, 0x32	; 50
    120e:	11 05       	cpc	r17, r1
    1210:	21 f0       	breq	.+8      	; 0x121a <_ZN7MCP_CAN7sendMsgEmhhhPKhb+0xbe>
    1212:	80 e0       	ldi	r24, 0x00	; 0
    1214:	03 c0       	rjmp	.+6      	; 0x121c <_ZN7MCP_CAN7sendMsgEmhhhPKhb+0xc0>
    1216:	86 e0       	ldi	r24, 0x06	; 6
    1218:	01 c0       	rjmp	.+2      	; 0x121c <_ZN7MCP_CAN7sendMsgEmhhhPKhb+0xc0>
    121a:	87 e0       	ldi	r24, 0x07	; 7
    121c:	0f 90       	pop	r0
    121e:	df 91       	pop	r29
    1220:	cf 91       	pop	r28
    1222:	1f 91       	pop	r17
    1224:	0f 91       	pop	r16
    1226:	ff 90       	pop	r15
    1228:	ef 90       	pop	r14
    122a:	df 90       	pop	r13
    122c:	cf 90       	pop	r12
    122e:	bf 90       	pop	r11
    1230:	af 90       	pop	r10
    1232:	9f 90       	pop	r9
    1234:	8f 90       	pop	r8
    1236:	7f 90       	pop	r7
    1238:	6f 90       	pop	r6
    123a:	5f 90       	pop	r5
    123c:	4f 90       	pop	r4
    123e:	3f 90       	pop	r3
    1240:	2f 90       	pop	r2
    1242:	08 95       	ret

00001244 <_ZN7MCP_CAN10sendMsgBufEmhhPKhb>:
    1244:	af 92       	push	r10
    1246:	cf 92       	push	r12
    1248:	df 92       	push	r13
    124a:	ef 92       	push	r14
    124c:	ff 92       	push	r15
    124e:	0f 93       	push	r16
    1250:	ac 2c       	mov	r10, r12
    1252:	67 01       	movw	r12, r14
    1254:	e0 2e       	mov	r14, r16
    1256:	00 e0       	ldi	r16, 0x00	; 0
    1258:	0e 94 ae 08 	call	0x115c	; 0x115c <_ZN7MCP_CAN7sendMsgEmhhhPKhb>
    125c:	0f 91       	pop	r16
    125e:	ff 90       	pop	r15
    1260:	ef 90       	pop	r14
    1262:	df 90       	pop	r13
    1264:	cf 90       	pop	r12
    1266:	af 90       	pop	r10
    1268:	08 95       	ret

0000126a <_ZN7MCP_CAN12readMsgBufIDEhPVmPVhS3_S3_S3_>:
    126a:	6f 92       	push	r6
    126c:	7f 92       	push	r7
    126e:	8f 92       	push	r8
    1270:	9f 92       	push	r9
    1272:	af 92       	push	r10
    1274:	bf 92       	push	r11
    1276:	cf 92       	push	r12
    1278:	df 92       	push	r13
    127a:	ef 92       	push	r14
    127c:	ff 92       	push	r15
    127e:	0f 93       	push	r16
    1280:	1f 93       	push	r17
    1282:	cf 93       	push	r28
    1284:	df 93       	push	r29
    1286:	ec 01       	movw	r28, r24
    1288:	5a 01       	movw	r10, r20
    128a:	49 01       	movw	r8, r18
    128c:	38 01       	movw	r6, r16
    128e:	60 ff       	sbrs	r22, 0
    1290:	02 c0       	rjmp	.+4      	; 0x1296 <_ZN7MCP_CAN12readMsgBufIDEhPVmPVhS3_S3_S3_+0x2c>
    1292:	60 e9       	ldi	r22, 0x90	; 144
    1294:	03 c0       	rjmp	.+6      	; 0x129c <_ZN7MCP_CAN12readMsgBufIDEhPVmPVhS3_S3_S3_+0x32>
    1296:	61 ff       	sbrs	r22, 1
    1298:	15 c0       	rjmp	.+42     	; 0x12c4 <_ZN7MCP_CAN12readMsgBufIDEhPVmPVhS3_S3_S3_+0x5a>
    129a:	64 e9       	ldi	r22, 0x94	; 148
    129c:	ce 01       	movw	r24, r28
    129e:	0e 94 de 06 	call	0xdbc	; 0xdbc <_ZN7MCP_CAN19mcp2515_read_canMsgEhPVmPVhS3_S3_S3_>
    12a2:	f3 01       	movw	r30, r6
    12a4:	80 81       	ld	r24, Z
    12a6:	8d 83       	std	Y+5, r24	; 0x05
    12a8:	f4 01       	movw	r30, r8
    12aa:	80 81       	ld	r24, Z
    12ac:	88 83       	st	Y, r24
    12ae:	f5 01       	movw	r30, r10
    12b0:	80 81       	ld	r24, Z
    12b2:	91 81       	ldd	r25, Z+1	; 0x01
    12b4:	a2 81       	ldd	r26, Z+2	; 0x02
    12b6:	b3 81       	ldd	r27, Z+3	; 0x03
    12b8:	89 83       	std	Y+1, r24	; 0x01
    12ba:	9a 83       	std	Y+2, r25	; 0x02
    12bc:	ab 83       	std	Y+3, r26	; 0x03
    12be:	bc 83       	std	Y+4, r27	; 0x04
    12c0:	80 e0       	ldi	r24, 0x00	; 0
    12c2:	03 c0       	rjmp	.+6      	; 0x12ca <_ZN7MCP_CAN12readMsgBufIDEhPVmPVhS3_S3_S3_+0x60>
    12c4:	f7 01       	movw	r30, r14
    12c6:	10 82       	st	Z, r1
    12c8:	84 e0       	ldi	r24, 0x04	; 4
    12ca:	df 91       	pop	r29
    12cc:	cf 91       	pop	r28
    12ce:	1f 91       	pop	r17
    12d0:	0f 91       	pop	r16
    12d2:	ff 90       	pop	r15
    12d4:	ef 90       	pop	r14
    12d6:	df 90       	pop	r13
    12d8:	cf 90       	pop	r12
    12da:	bf 90       	pop	r11
    12dc:	af 90       	pop	r10
    12de:	9f 90       	pop	r9
    12e0:	8f 90       	pop	r8
    12e2:	7f 90       	pop	r7
    12e4:	6f 90       	pop	r6
    12e6:	08 95       	ret

000012e8 <_ZN7MCP_CAN14readRxTxStatusEv>:
    12e8:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <_ZN7MCP_CAN18mcp2515_readStatusEv>
    12ec:	38 2f       	mov	r19, r24
    12ee:	3b 7a       	andi	r19, 0xAB	; 171
    12f0:	83 fd       	sbrc	r24, 3
    12f2:	02 c0       	rjmp	.+4      	; 0x12f8 <_ZN7MCP_CAN14readRxTxStatusEv+0x10>
    12f4:	20 e0       	ldi	r18, 0x00	; 0
    12f6:	01 c0       	rjmp	.+2      	; 0x12fa <_ZN7MCP_CAN14readRxTxStatusEv+0x12>
    12f8:	24 e0       	ldi	r18, 0x04	; 4
    12fa:	85 fd       	sbrc	r24, 5
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <_ZN7MCP_CAN14readRxTxStatusEv+0x1a>
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	01 c0       	rjmp	.+2      	; 0x1304 <_ZN7MCP_CAN14readRxTxStatusEv+0x1c>
    1302:	98 e0       	ldi	r25, 0x08	; 8
    1304:	83 2f       	mov	r24, r19
    1306:	88 1f       	adc	r24, r24
    1308:	88 27       	eor	r24, r24
    130a:	88 1f       	adc	r24, r24
    130c:	82 95       	swap	r24
    130e:	80 7f       	andi	r24, 0xF0	; 240
    1310:	33 70       	andi	r19, 0x03	; 3
    1312:	23 2b       	or	r18, r19
    1314:	92 2b       	or	r25, r18
    1316:	89 2b       	or	r24, r25
    1318:	08 95       	ret

0000131a <_ZN7MCP_CAN10readMsgBufEPhS0_>:
    131a:	cf 92       	push	r12
    131c:	df 92       	push	r13
    131e:	ef 92       	push	r14
    1320:	ff 92       	push	r15
    1322:	0f 93       	push	r16
    1324:	1f 93       	push	r17
    1326:	cf 93       	push	r28
    1328:	df 93       	push	r29
    132a:	ec 01       	movw	r28, r24
    132c:	7b 01       	movw	r14, r22
    132e:	6a 01       	movw	r12, r20
    1330:	0e 94 74 09 	call	0x12e8	; 0x12e8 <_ZN7MCP_CAN14readRxTxStatusEv>
    1334:	8e 01       	movw	r16, r28
    1336:	0b 5f       	subi	r16, 0xFB	; 251
    1338:	1f 4f       	sbci	r17, 0xFF	; 255
    133a:	ae 01       	movw	r20, r28
    133c:	4f 5f       	subi	r20, 0xFF	; 255
    133e:	5f 4f       	sbci	r21, 0xFF	; 255
    1340:	9e 01       	movw	r18, r28
    1342:	68 2f       	mov	r22, r24
    1344:	ce 01       	movw	r24, r28
    1346:	0e 94 35 09 	call	0x126a	; 0x126a <_ZN7MCP_CAN12readMsgBufIDEhPVmPVhS3_S3_S3_>
    134a:	df 91       	pop	r29
    134c:	cf 91       	pop	r28
    134e:	1f 91       	pop	r17
    1350:	0f 91       	pop	r16
    1352:	ff 90       	pop	r15
    1354:	ef 90       	pop	r14
    1356:	df 90       	pop	r13
    1358:	cf 90       	pop	r12
    135a:	08 95       	ret

0000135c <_ZN7MCP_CAN12checkReceiveEv>:
    135c:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <_ZN7MCP_CAN18mcp2515_readStatusEv>
    1360:	83 70       	andi	r24, 0x03	; 3
    1362:	11 f4       	brne	.+4      	; 0x1368 <_ZN7MCP_CAN12checkReceiveEv+0xc>
    1364:	84 e0       	ldi	r24, 0x04	; 4
    1366:	08 95       	ret
    1368:	83 e0       	ldi	r24, 0x03	; 3
    136a:	08 95       	ret

0000136c <_ZN7MCP_CAN10mcpPinModeEhh>:
/*********************************************************************************************************
** Function name:           mcpPinMode
** Descriptions:            switch supported pins between HiZ, interrupt, output or input
*********************************************************************************************************/
bool MCP_CAN::mcpPinMode(const byte pin, const byte mode)
{
    136c:	0f 93       	push	r16
    136e:	1f 93       	push	r17
    1370:	cf 93       	push	r28
    1372:	8c 01       	movw	r16, r24
    1374:	c4 2f       	mov	r28, r20
    byte res;
    bool ret=true;

    switch(pin)
    1376:	62 30       	cpi	r22, 0x02	; 2
    1378:	79 f1       	breq	.+94     	; 0x13d8 <_ZN7MCP_CAN10mcpPinModeEhh+0x6c>
    137a:	28 f4       	brcc	.+10     	; 0x1386 <_ZN7MCP_CAN10mcpPinModeEhh+0x1a>
    137c:	66 23       	and	r22, r22
    137e:	51 f0       	breq	.+20     	; 0x1394 <_ZN7MCP_CAN10mcpPinModeEhh+0x28>
    1380:	61 30       	cpi	r22, 0x01	; 1
    1382:	a9 f0       	breq	.+42     	; 0x13ae <_ZN7MCP_CAN10mcpPinModeEhh+0x42>
    1384:	6c c0       	rjmp	.+216    	; 0x145e <_ZN7MCP_CAN10mcpPinModeEhh+0xf2>
    1386:	63 30       	cpi	r22, 0x03	; 3
    1388:	09 f4       	brne	.+2      	; 0x138c <_ZN7MCP_CAN10mcpPinModeEhh+0x20>
    138a:	48 c0       	rjmp	.+144    	; 0x141c <_ZN7MCP_CAN10mcpPinModeEhh+0xb0>
    138c:	64 30       	cpi	r22, 0x04	; 4
    138e:	09 f4       	brne	.+2      	; 0x1392 <_ZN7MCP_CAN10mcpPinModeEhh+0x26>
    1390:	58 c0       	rjmp	.+176    	; 0x1442 <_ZN7MCP_CAN10mcpPinModeEhh+0xd6>
    1392:	65 c0       	rjmp	.+202    	; 0x145e <_ZN7MCP_CAN10mcpPinModeEhh+0xf2>
    {
        case MCP_RX0BF:
            switch(mode) {
    1394:	41 30       	cpi	r20, 0x01	; 1
    1396:	41 f0       	breq	.+16     	; 0x13a8 <_ZN7MCP_CAN10mcpPinModeEhh+0x3c>
    1398:	20 f0       	brcs	.+8      	; 0x13a2 <_ZN7MCP_CAN10mcpPinModeEhh+0x36>
    139a:	42 30       	cpi	r20, 0x02	; 2
    139c:	d1 f4       	brne	.+52     	; 0x13d2 <_ZN7MCP_CAN10mcpPinModeEhh+0x66>
                break;
                case MCP_PIN_INT:
                    mcp2515_modifyRegister(MCP_BFPCTRL, B0BFM | B0BFE, B0BFM | B0BFE);
                break;
                case MCP_PIN_OUT:
                    mcp2515_modifyRegister(MCP_BFPCTRL, B0BFM | B0BFE, B0BFE);
    139e:	24 e0       	ldi	r18, 0x04	; 4
    13a0:	04 c0       	rjmp	.+8      	; 0x13aa <_ZN7MCP_CAN10mcpPinModeEhh+0x3e>
    switch(pin)
    {
        case MCP_RX0BF:
            switch(mode) {
                case MCP_PIN_HIZ:
                    mcp2515_modifyRegister(MCP_BFPCTRL, B0BFE, 0);
    13a2:	20 e0       	ldi	r18, 0x00	; 0
    13a4:	44 e0       	ldi	r20, 0x04	; 4
    13a6:	0f c0       	rjmp	.+30     	; 0x13c6 <_ZN7MCP_CAN10mcpPinModeEhh+0x5a>
                break;
                case MCP_PIN_INT:
                    mcp2515_modifyRegister(MCP_BFPCTRL, B0BFM | B0BFE, B0BFM | B0BFE);
    13a8:	25 e0       	ldi	r18, 0x05	; 5
                break;
                case MCP_PIN_OUT:
                    mcp2515_modifyRegister(MCP_BFPCTRL, B0BFM | B0BFE, B0BFE);
    13aa:	45 e0       	ldi	r20, 0x05	; 5
    13ac:	0c c0       	rjmp	.+24     	; 0x13c6 <_ZN7MCP_CAN10mcpPinModeEhh+0x5a>
                    return false;
            }
            return true;
        break;
        case MCP_RX1BF:
            switch(mode) {
    13ae:	41 30       	cpi	r20, 0x01	; 1
    13b0:	41 f0       	breq	.+16     	; 0x13c2 <_ZN7MCP_CAN10mcpPinModeEhh+0x56>
    13b2:	20 f0       	brcs	.+8      	; 0x13bc <_ZN7MCP_CAN10mcpPinModeEhh+0x50>
    13b4:	42 30       	cpi	r20, 0x02	; 2
    13b6:	69 f4       	brne	.+26     	; 0x13d2 <_ZN7MCP_CAN10mcpPinModeEhh+0x66>
                break;
                case MCP_PIN_INT:
                    mcp2515_modifyRegister(MCP_BFPCTRL, B1BFM | B1BFE, B1BFM | B1BFE);
                break;
                case MCP_PIN_OUT:
                    mcp2515_modifyRegister(MCP_BFPCTRL, B1BFM | B1BFE, B1BFE);
    13b8:	28 e0       	ldi	r18, 0x08	; 8
    13ba:	04 c0       	rjmp	.+8      	; 0x13c4 <_ZN7MCP_CAN10mcpPinModeEhh+0x58>
            return true;
        break;
        case MCP_RX1BF:
            switch(mode) {
                case MCP_PIN_HIZ:
                    mcp2515_modifyRegister(MCP_BFPCTRL, B1BFE, 0);
    13bc:	20 e0       	ldi	r18, 0x00	; 0
    13be:	48 e0       	ldi	r20, 0x08	; 8
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <_ZN7MCP_CAN10mcpPinModeEhh+0x5a>
                break;
                case MCP_PIN_INT:
                    mcp2515_modifyRegister(MCP_BFPCTRL, B1BFM | B1BFE, B1BFM | B1BFE);
    13c2:	2a e0       	ldi	r18, 0x0A	; 10
                break;
                case MCP_PIN_OUT:
                    mcp2515_modifyRegister(MCP_BFPCTRL, B1BFM | B1BFE, B1BFE);
    13c4:	4a e0       	ldi	r20, 0x0A	; 10
    13c6:	6c e0       	ldi	r22, 0x0C	; 12
    13c8:	c8 01       	movw	r24, r16
    13ca:	0e 94 a8 04 	call	0x950	; 0x950 <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>
#if DEBUG_EN
                    Serial.print("Invalid pin mode request\r\n");
#endif
                    return false;
            }
            return true;
    13ce:	81 e0       	ldi	r24, 0x01	; 1
                case MCP_PIN_INT:
                    mcp2515_modifyRegister(MCP_BFPCTRL, B1BFM | B1BFE, B1BFM | B1BFE);
                break;
                case MCP_PIN_OUT:
                    mcp2515_modifyRegister(MCP_BFPCTRL, B1BFM | B1BFE, B1BFE);
                break;
    13d0:	4f c0       	rjmp	.+158    	; 0x1470 <_ZN7MCP_CAN10mcpPinModeEhh+0x104>
                default:
#if DEBUG_EN
                    Serial.print("Invalid pin mode request\r\n");
    13d2:	65 e5       	ldi	r22, 0x55	; 85
    13d4:	72 e0       	ldi	r23, 0x02	; 2
    13d6:	45 c0       	rjmp	.+138    	; 0x1462 <_ZN7MCP_CAN10mcpPinModeEhh+0xf6>
                    return false;
            }
            return true;
        break;
        case MCP_TX0RTS:
            res = mcp2515_setCANCTRL_Mode(MODE_CONFIG);
    13d8:	60 e8       	ldi	r22, 0x80	; 128
    13da:	0e 94 36 05 	call	0xa6c	; 0xa6c <_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh>
            if(res > 0)
    13de:	88 23       	and	r24, r24
    13e0:	19 f0       	breq	.+6      	; 0x13e8 <_ZN7MCP_CAN10mcpPinModeEhh+0x7c>
            {
#if DEBUG_EN
                Serial.print("Entering Configuration Mode Failure...\r\n");
    13e2:	60 e7       	ldi	r22, 0x70	; 112
    13e4:	72 e0       	ldi	r23, 0x02	; 2
    13e6:	3d c0       	rjmp	.+122    	; 0x1462 <_ZN7MCP_CAN10mcpPinModeEhh+0xf6>
#else
                delay(10);
#endif
                return false;
            }
            switch(mode) {
    13e8:	c1 30       	cpi	r28, 0x01	; 1
    13ea:	21 f0       	breq	.+8      	; 0x13f4 <_ZN7MCP_CAN10mcpPinModeEhh+0x88>
    13ec:	c3 30       	cpi	r28, 0x03	; 3
    13ee:	29 f4       	brne	.+10     	; 0x13fa <_ZN7MCP_CAN10mcpPinModeEhh+0x8e>
                case MCP_PIN_INT:
                    mcp2515_modifyRegister(MCP_TXRTSCTRL, B0RTSM, B0RTSM);
                break;
                case MCP_PIN_IN:
                    mcp2515_modifyRegister(MCP_TXRTSCTRL, B0RTSM, 0);
    13f0:	20 e0       	ldi	r18, 0x00	; 0
    13f2:	01 c0       	rjmp	.+2      	; 0x13f6 <_ZN7MCP_CAN10mcpPinModeEhh+0x8a>
#endif
                return false;
            }
            switch(mode) {
                case MCP_PIN_INT:
                    mcp2515_modifyRegister(MCP_TXRTSCTRL, B0RTSM, B0RTSM);
    13f4:	21 e0       	ldi	r18, 0x01	; 1
                break;
                case MCP_PIN_IN:
                    mcp2515_modifyRegister(MCP_TXRTSCTRL, B0RTSM, 0);
    13f6:	41 e0       	ldi	r20, 0x01	; 1
    13f8:	1e c0       	rjmp	.+60     	; 0x1436 <_ZN7MCP_CAN10mcpPinModeEhh+0xca>
                break;
                default:
#if DEBUG_EN
                    Serial.print("Invalid pin mode request\r\n");
    13fa:	65 e5       	ldi	r22, 0x55	; 85
    13fc:	72 e0       	ldi	r23, 0x02	; 2
    13fe:	86 e6       	ldi	r24, 0x66	; 102
    1400:	93 e0       	ldi	r25, 0x03	; 3
    1402:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <_ZN5Print5printEPKc>
#endif
                    ret=false;
    1406:	c0 e0       	ldi	r28, 0x00	; 0
            }
            res = mcp2515_setCANCTRL_Mode(mcpMode);
    1408:	f8 01       	movw	r30, r16
    140a:	62 85       	ldd	r22, Z+10	; 0x0a
    140c:	c8 01       	movw	r24, r16
    140e:	0e 94 36 05 	call	0xa6c	; 0xa6c <_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh>
            if(res)
    1412:	88 23       	and	r24, r24
    1414:	61 f1       	breq	.+88     	; 0x146e <_ZN7MCP_CAN10mcpPinModeEhh+0x102>
            {
#if DEBUG_EN
                Serial.print("`Setting ID Mode Failure...\r\n");
    1416:	69 e9       	ldi	r22, 0x99	; 153
    1418:	72 e0       	ldi	r23, 0x02	; 2
    141a:	23 c0       	rjmp	.+70     	; 0x1462 <_ZN7MCP_CAN10mcpPinModeEhh+0xf6>
                return false;
            }
            return ret;
        break;
        case MCP_TX1RTS:
            res = mcp2515_setCANCTRL_Mode(MODE_CONFIG);
    141c:	60 e8       	ldi	r22, 0x80	; 128
    141e:	0e 94 36 05 	call	0xa6c	; 0xa6c <_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh>
            if(res > 0)
    1422:	81 11       	cpse	r24, r1
    1424:	de cf       	rjmp	.-68     	; 0x13e2 <_ZN7MCP_CAN10mcpPinModeEhh+0x76>
#else
                delay(10);
#endif
                return false;
            }
            switch(mode) {
    1426:	c1 30       	cpi	r28, 0x01	; 1
    1428:	21 f0       	breq	.+8      	; 0x1432 <_ZN7MCP_CAN10mcpPinModeEhh+0xc6>
    142a:	c3 30       	cpi	r28, 0x03	; 3
    142c:	31 f7       	brne	.-52     	; 0x13fa <_ZN7MCP_CAN10mcpPinModeEhh+0x8e>
                case MCP_PIN_INT:
                    mcp2515_modifyRegister(MCP_TXRTSCTRL, B1RTSM, B1RTSM);
                break;
                case MCP_PIN_IN:
                    mcp2515_modifyRegister(MCP_TXRTSCTRL, B1RTSM, 0);
    142e:	20 e0       	ldi	r18, 0x00	; 0
    1430:	01 c0       	rjmp	.+2      	; 0x1434 <_ZN7MCP_CAN10mcpPinModeEhh+0xc8>
#endif
                return false;
            }
            switch(mode) {
                case MCP_PIN_INT:
                    mcp2515_modifyRegister(MCP_TXRTSCTRL, B1RTSM, B1RTSM);
    1432:	22 e0       	ldi	r18, 0x02	; 2
                break;
                case MCP_PIN_IN:
                    mcp2515_modifyRegister(MCP_TXRTSCTRL, B1RTSM, 0);
    1434:	42 e0       	ldi	r20, 0x02	; 2
    1436:	6d e0       	ldi	r22, 0x0D	; 13
    1438:	c8 01       	movw	r24, r16
    143a:	0e 94 a8 04 	call	0x950	; 0x950 <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>
** Descriptions:            switch supported pins between HiZ, interrupt, output or input
*********************************************************************************************************/
bool MCP_CAN::mcpPinMode(const byte pin, const byte mode)
{
    byte res;
    bool ret=true;
    143e:	c1 e0       	ldi	r28, 0x01	; 1
                case MCP_PIN_INT:
                    mcp2515_modifyRegister(MCP_TXRTSCTRL, B1RTSM, B1RTSM);
                break;
                case MCP_PIN_IN:
                    mcp2515_modifyRegister(MCP_TXRTSCTRL, B1RTSM, 0);
                break;
    1440:	e3 cf       	rjmp	.-58     	; 0x1408 <_ZN7MCP_CAN10mcpPinModeEhh+0x9c>
                return false;
            }
            return ret;
        break;
        case MCP_TX2RTS:
            res = mcp2515_setCANCTRL_Mode(MODE_CONFIG);
    1442:	60 e8       	ldi	r22, 0x80	; 128
    1444:	0e 94 36 05 	call	0xa6c	; 0xa6c <_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh>
            if(res > 0)
    1448:	81 11       	cpse	r24, r1
    144a:	cb cf       	rjmp	.-106    	; 0x13e2 <_ZN7MCP_CAN10mcpPinModeEhh+0x76>
#else
                delay(10);
#endif
                return false;
            }
            switch(mode) {
    144c:	c1 30       	cpi	r28, 0x01	; 1
    144e:	21 f0       	breq	.+8      	; 0x1458 <_ZN7MCP_CAN10mcpPinModeEhh+0xec>
    1450:	c3 30       	cpi	r28, 0x03	; 3
    1452:	99 f6       	brne	.-90     	; 0x13fa <_ZN7MCP_CAN10mcpPinModeEhh+0x8e>
                case MCP_PIN_INT:
                    mcp2515_modifyRegister(MCP_TXRTSCTRL, B2RTSM, B2RTSM);
                break;
                case MCP_PIN_IN:
                    mcp2515_modifyRegister(MCP_TXRTSCTRL, B2RTSM, 0);
    1454:	20 e0       	ldi	r18, 0x00	; 0
    1456:	01 c0       	rjmp	.+2      	; 0x145a <_ZN7MCP_CAN10mcpPinModeEhh+0xee>
#endif
                return false;
            }
            switch(mode) {
                case MCP_PIN_INT:
                    mcp2515_modifyRegister(MCP_TXRTSCTRL, B2RTSM, B2RTSM);
    1458:	24 e0       	ldi	r18, 0x04	; 4
                break;
                case MCP_PIN_IN:
                    mcp2515_modifyRegister(MCP_TXRTSCTRL, B2RTSM, 0);
    145a:	44 e0       	ldi	r20, 0x04	; 4
    145c:	ec cf       	rjmp	.-40     	; 0x1436 <_ZN7MCP_CAN10mcpPinModeEhh+0xca>
            }
            return ret;
        break;
        default:
#if DEBUG_EN
            Serial.print("Invalid pin for mode request\r\n");
    145e:	67 eb       	ldi	r22, 0xB7	; 183
    1460:	72 e0       	ldi	r23, 0x02	; 2
    1462:	86 e6       	ldi	r24, 0x66	; 102
    1464:	93 e0       	ldi	r25, 0x03	; 3
    1466:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <_ZN5Print5printEPKc>
#endif
            return false;
    146a:	80 e0       	ldi	r24, 0x00	; 0
    146c:	01 c0       	rjmp	.+2      	; 0x1470 <_ZN7MCP_CAN10mcpPinModeEhh+0x104>
#else
                delay(10);
#endif
                return false;
            }
            return ret;
    146e:	8c 2f       	mov	r24, r28
#if DEBUG_EN
            Serial.print("Invalid pin for mode request\r\n");
#endif
            return false;
    }
}
    1470:	cf 91       	pop	r28
    1472:	1f 91       	pop	r17
    1474:	0f 91       	pop	r16
    1476:	08 95       	ret

00001478 <_ZN7MCP_CAN15mcpDigitalWriteEhh>:
/*********************************************************************************************************
** Function name:           mcpDigitalWrite
** Descriptions:            write HIGH or LOW to RX0BF/RX1BF
*********************************************************************************************************/
bool MCP_CAN::mcpDigitalWrite(const byte pin, const byte mode) {
    switch(pin)
    1478:	66 23       	and	r22, r22
    147a:	19 f0       	breq	.+6      	; 0x1482 <_ZN7MCP_CAN15mcpDigitalWriteEhh+0xa>
    147c:	61 30       	cpi	r22, 0x01	; 1
    147e:	61 f0       	breq	.+24     	; 0x1498 <_ZN7MCP_CAN15mcpDigitalWriteEhh+0x20>
    1480:	12 c0       	rjmp	.+36     	; 0x14a6 <_ZN7MCP_CAN15mcpDigitalWriteEhh+0x2e>
    {
        case MCP_RX0BF:
            switch(mode) {
    1482:	41 30       	cpi	r20, 0x01	; 1
    1484:	11 f4       	brne	.+4      	; 0x148a <_ZN7MCP_CAN15mcpDigitalWriteEhh+0x12>
                case HIGH:
                    mcp2515_modifyRegister(MCP_BFPCTRL, B0BFS, B0BFS);
    1486:	20 e1       	ldi	r18, 0x10	; 16
    1488:	01 c0       	rjmp	.+2      	; 0x148c <_ZN7MCP_CAN15mcpDigitalWriteEhh+0x14>
                    return true;
                break;
                default:
                    mcp2515_modifyRegister(MCP_BFPCTRL, B0BFS, 0);
    148a:	20 e0       	ldi	r18, 0x00	; 0
    148c:	40 e1       	ldi	r20, 0x10	; 16
    148e:	6c e0       	ldi	r22, 0x0C	; 12
    1490:	0e 94 a8 04 	call	0x950	; 0x950 <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>
                    return true;
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	08 95       	ret
            }
        break;
        case MCP_RX1BF:
            switch(mode) {
    1498:	41 30       	cpi	r20, 0x01	; 1
    149a:	11 f4       	brne	.+4      	; 0x14a0 <_ZN7MCP_CAN15mcpDigitalWriteEhh+0x28>
                case HIGH:
                    mcp2515_modifyRegister(MCP_BFPCTRL, B1BFS, B1BFS);
    149c:	20 e2       	ldi	r18, 0x20	; 32
    149e:	01 c0       	rjmp	.+2      	; 0x14a2 <_ZN7MCP_CAN15mcpDigitalWriteEhh+0x2a>
                    return true;
                break;
                default:
                    mcp2515_modifyRegister(MCP_BFPCTRL, B1BFS, 0);
    14a0:	20 e0       	ldi	r18, 0x00	; 0
    14a2:	40 e2       	ldi	r20, 0x20	; 32
    14a4:	f4 cf       	rjmp	.-24     	; 0x148e <_ZN7MCP_CAN15mcpDigitalWriteEhh+0x16>
                    return true;
            }
        break;
        default:
#if DEBUG_EN
            Serial.print("Invalid pin for mcpDigitalWrite\r\n");
    14a6:	66 ed       	ldi	r22, 0xD6	; 214
    14a8:	72 e0       	ldi	r23, 0x02	; 2
    14aa:	86 e6       	ldi	r24, 0x66	; 102
    14ac:	93 e0       	ldi	r25, 0x03	; 3
    14ae:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <_ZN5Print5printEPKc>
#endif
            return false;
    14b2:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    14b4:	08 95       	ret

000014b6 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    14b6:	cf 93       	push	r28
  uint8_t sreg = SREG;
    14b8:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    14ba:	f8 94       	cli
  if (!initialized) {
    14bc:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <_ZN8SPIClass11initializedE>
    14c0:	81 11       	cpse	r24, r1
    14c2:	27 c0       	rjmp	.+78     	; 0x1512 <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    14c4:	e2 ee       	ldi	r30, 0xE2	; 226
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    14ca:	ee ec       	ldi	r30, 0xCE	; 206
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    14d0:	e8 2f       	mov	r30, r24
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	ee 0f       	add	r30, r30
    14d6:	ff 1f       	adc	r31, r31
    14d8:	ea 50       	subi	r30, 0x0A	; 10
    14da:	ff 4f       	sbci	r31, 0xFF	; 255
    14dc:	a5 91       	lpm	r26, Z+
    14de:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    14e0:	ec 91       	ld	r30, X
    14e2:	e9 23       	and	r30, r25
    14e4:	21 f4       	brne	.+8      	; 0x14ee <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    14e6:	61 e0       	ldi	r22, 0x01	; 1
    14e8:	8a e0       	ldi	r24, 0x0A	; 10
    14ea:	0e 94 cb 03 	call	0x796	; 0x796 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    14ee:	61 e0       	ldi	r22, 0x01	; 1
    14f0:	8a e0       	ldi	r24, 0x0A	; 10
    14f2:	0e 94 8f 03 	call	0x71e	; 0x71e <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    14f6:	8c b5       	in	r24, 0x2c	; 44
    14f8:	80 61       	ori	r24, 0x10	; 16
    14fa:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    14fc:	8c b5       	in	r24, 0x2c	; 44
    14fe:	80 64       	ori	r24, 0x40	; 64
    1500:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    1502:	61 e0       	ldi	r22, 0x01	; 1
    1504:	8d e0       	ldi	r24, 0x0D	; 13
    1506:	0e 94 8f 03 	call	0x71e	; 0x71e <pinMode>
    pinMode(MOSI, OUTPUT);
    150a:	61 e0       	ldi	r22, 0x01	; 1
    150c:	8b e0       	ldi	r24, 0x0B	; 11
    150e:	0e 94 8f 03 	call	0x71e	; 0x71e <pinMode>
  }
  initialized++; // reference count
    1512:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <_ZN8SPIClass11initializedE>
    1516:	8f 5f       	subi	r24, 0xFF	; 255
    1518:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    151c:	cf bf       	out	0x3f, r28	; 63
}
    151e:	cf 91       	pop	r28
    1520:	08 95       	ret

00001522 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1522:	1f 92       	push	r1
    1524:	0f 92       	push	r0
    1526:	0f b6       	in	r0, 0x3f	; 63
    1528:	0f 92       	push	r0
    152a:	11 24       	eor	r1, r1
    152c:	2f 93       	push	r18
    152e:	8f 93       	push	r24
    1530:	9f 93       	push	r25
    1532:	ef 93       	push	r30
    1534:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1536:	e0 91 76 03 	lds	r30, 0x0376	; 0x800376 <Serial+0x10>
    153a:	f0 91 77 03 	lds	r31, 0x0377	; 0x800377 <Serial+0x11>
    153e:	80 81       	ld	r24, Z
    1540:	e0 91 7c 03 	lds	r30, 0x037C	; 0x80037c <Serial+0x16>
    1544:	f0 91 7d 03 	lds	r31, 0x037D	; 0x80037d <Serial+0x17>
    1548:	82 fd       	sbrc	r24, 2
    154a:	12 c0       	rjmp	.+36     	; 0x1570 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    154c:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    154e:	80 91 7f 03 	lds	r24, 0x037F	; 0x80037f <Serial+0x19>
    1552:	8f 5f       	subi	r24, 0xFF	; 255
    1554:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1556:	20 91 80 03 	lds	r18, 0x0380	; 0x800380 <Serial+0x1a>
    155a:	82 17       	cp	r24, r18
    155c:	51 f0       	breq	.+20     	; 0x1572 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    155e:	e0 91 7f 03 	lds	r30, 0x037F	; 0x80037f <Serial+0x19>
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	ea 59       	subi	r30, 0x9A	; 154
    1566:	fc 4f       	sbci	r31, 0xFC	; 252
    1568:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    156a:	80 93 7f 03 	sts	0x037F, r24	; 0x80037f <Serial+0x19>
    156e:	01 c0       	rjmp	.+2      	; 0x1572 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1570:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1572:	ff 91       	pop	r31
    1574:	ef 91       	pop	r30
    1576:	9f 91       	pop	r25
    1578:	8f 91       	pop	r24
    157a:	2f 91       	pop	r18
    157c:	0f 90       	pop	r0
    157e:	0f be       	out	0x3f, r0	; 63
    1580:	0f 90       	pop	r0
    1582:	1f 90       	pop	r1
    1584:	18 95       	reti

00001586 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1586:	1f 92       	push	r1
    1588:	0f 92       	push	r0
    158a:	0f b6       	in	r0, 0x3f	; 63
    158c:	0f 92       	push	r0
    158e:	11 24       	eor	r1, r1
    1590:	2f 93       	push	r18
    1592:	3f 93       	push	r19
    1594:	4f 93       	push	r20
    1596:	5f 93       	push	r21
    1598:	6f 93       	push	r22
    159a:	7f 93       	push	r23
    159c:	8f 93       	push	r24
    159e:	9f 93       	push	r25
    15a0:	af 93       	push	r26
    15a2:	bf 93       	push	r27
    15a4:	ef 93       	push	r30
    15a6:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    15a8:	86 e6       	ldi	r24, 0x66	; 102
    15aa:	93 e0       	ldi	r25, 0x03	; 3
    15ac:	0e 94 ad 0b 	call	0x175a	; 0x175a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    15b0:	ff 91       	pop	r31
    15b2:	ef 91       	pop	r30
    15b4:	bf 91       	pop	r27
    15b6:	af 91       	pop	r26
    15b8:	9f 91       	pop	r25
    15ba:	8f 91       	pop	r24
    15bc:	7f 91       	pop	r23
    15be:	6f 91       	pop	r22
    15c0:	5f 91       	pop	r21
    15c2:	4f 91       	pop	r20
    15c4:	3f 91       	pop	r19
    15c6:	2f 91       	pop	r18
    15c8:	0f 90       	pop	r0
    15ca:	0f be       	out	0x3f, r0	; 63
    15cc:	0f 90       	pop	r0
    15ce:	1f 90       	pop	r1
    15d0:	18 95       	reti

000015d2 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    15d2:	86 e6       	ldi	r24, 0x66	; 102
    15d4:	93 e0       	ldi	r25, 0x03	; 3
    15d6:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <_ZN14HardwareSerial9availableEv>
    15da:	21 e0       	ldi	r18, 0x01	; 1
    15dc:	89 2b       	or	r24, r25
    15de:	09 f4       	brne	.+2      	; 0x15e2 <_Z17Serial0_availablev+0x10>
    15e0:	20 e0       	ldi	r18, 0x00	; 0
}
    15e2:	82 2f       	mov	r24, r18
    15e4:	08 95       	ret

000015e6 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    15e6:	e6 e6       	ldi	r30, 0x66	; 102
    15e8:	f3 e0       	ldi	r31, 0x03	; 3
    15ea:	13 82       	std	Z+3, r1	; 0x03
    15ec:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    15ee:	88 ee       	ldi	r24, 0xE8	; 232
    15f0:	93 e0       	ldi	r25, 0x03	; 3
    15f2:	a0 e0       	ldi	r26, 0x00	; 0
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	84 83       	std	Z+4, r24	; 0x04
    15f8:	95 83       	std	Z+5, r25	; 0x05
    15fa:	a6 83       	std	Z+6, r26	; 0x06
    15fc:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    15fe:	86 e2       	ldi	r24, 0x26	; 38
    1600:	93 e0       	ldi	r25, 0x03	; 3
    1602:	91 83       	std	Z+1, r25	; 0x01
    1604:	80 83       	st	Z, r24
    1606:	85 ec       	ldi	r24, 0xC5	; 197
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	95 87       	std	Z+13, r25	; 0x0d
    160c:	84 87       	std	Z+12, r24	; 0x0c
    160e:	84 ec       	ldi	r24, 0xC4	; 196
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	97 87       	std	Z+15, r25	; 0x0f
    1614:	86 87       	std	Z+14, r24	; 0x0e
    1616:	80 ec       	ldi	r24, 0xC0	; 192
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	91 8b       	std	Z+17, r25	; 0x11
    161c:	80 8b       	std	Z+16, r24	; 0x10
    161e:	81 ec       	ldi	r24, 0xC1	; 193
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	93 8b       	std	Z+19, r25	; 0x13
    1624:	82 8b       	std	Z+18, r24	; 0x12
    1626:	82 ec       	ldi	r24, 0xC2	; 194
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	95 8b       	std	Z+21, r25	; 0x15
    162c:	84 8b       	std	Z+20, r24	; 0x14
    162e:	86 ec       	ldi	r24, 0xC6	; 198
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	97 8b       	std	Z+23, r25	; 0x17
    1634:	86 8b       	std	Z+22, r24	; 0x16
    1636:	11 8e       	std	Z+25, r1	; 0x19
    1638:	12 8e       	std	Z+26, r1	; 0x1a
    163a:	13 8e       	std	Z+27, r1	; 0x1b
    163c:	14 8e       	std	Z+28, r1	; 0x1c
    163e:	08 95       	ret

00001640 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1640:	08 95       	ret

00001642 <_ZN5Print5writeEPKhj>:
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
    1642:	cf 92       	push	r12
    1644:	df 92       	push	r13
    1646:	ef 92       	push	r14
    1648:	ff 92       	push	r15
    164a:	0f 93       	push	r16
    164c:	1f 93       	push	r17
    164e:	cf 93       	push	r28
    1650:	df 93       	push	r29
    1652:	6c 01       	movw	r12, r24
    1654:	7a 01       	movw	r14, r20
    1656:	8b 01       	movw	r16, r22
    1658:	c0 e0       	ldi	r28, 0x00	; 0
    165a:	d0 e0       	ldi	r29, 0x00	; 0
    165c:	ce 15       	cp	r28, r14
    165e:	df 05       	cpc	r29, r15
    1660:	81 f0       	breq	.+32     	; 0x1682 <_ZN5Print5writeEPKhj+0x40>
    1662:	d8 01       	movw	r26, r16
    1664:	6d 91       	ld	r22, X+
    1666:	8d 01       	movw	r16, r26
    1668:	d6 01       	movw	r26, r12
    166a:	ed 91       	ld	r30, X+
    166c:	fc 91       	ld	r31, X
    166e:	01 90       	ld	r0, Z+
    1670:	f0 81       	ld	r31, Z
    1672:	e0 2d       	mov	r30, r0
    1674:	c6 01       	movw	r24, r12
    1676:	09 95       	icall
    1678:	89 2b       	or	r24, r25
    167a:	11 f0       	breq	.+4      	; 0x1680 <_ZN5Print5writeEPKhj+0x3e>
    167c:	21 96       	adiw	r28, 0x01	; 1
    167e:	ee cf       	rjmp	.-36     	; 0x165c <_ZN5Print5writeEPKhj+0x1a>
    1680:	7e 01       	movw	r14, r28
    1682:	c7 01       	movw	r24, r14
    1684:	df 91       	pop	r29
    1686:	cf 91       	pop	r28
    1688:	1f 91       	pop	r17
    168a:	0f 91       	pop	r16
    168c:	ff 90       	pop	r15
    168e:	ef 90       	pop	r14
    1690:	df 90       	pop	r13
    1692:	cf 90       	pop	r12
    1694:	08 95       	ret

00001696 <_ZN5Print5writeEPKc>:
    1696:	61 15       	cp	r22, r1
    1698:	71 05       	cpc	r23, r1
    169a:	79 f0       	breq	.+30     	; 0x16ba <_ZN5Print5writeEPKc+0x24>
    169c:	fb 01       	movw	r30, r22
    169e:	01 90       	ld	r0, Z+
    16a0:	00 20       	and	r0, r0
    16a2:	e9 f7       	brne	.-6      	; 0x169e <_ZN5Print5writeEPKc+0x8>
    16a4:	31 97       	sbiw	r30, 0x01	; 1
    16a6:	af 01       	movw	r20, r30
    16a8:	46 1b       	sub	r20, r22
    16aa:	57 0b       	sbc	r21, r23
    16ac:	dc 01       	movw	r26, r24
    16ae:	ed 91       	ld	r30, X+
    16b0:	fc 91       	ld	r31, X
    16b2:	02 80       	ldd	r0, Z+2	; 0x02
    16b4:	f3 81       	ldd	r31, Z+3	; 0x03
    16b6:	e0 2d       	mov	r30, r0
    16b8:	09 94       	ijmp
    16ba:	80 e0       	ldi	r24, 0x00	; 0
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	08 95       	ret

000016c0 <_ZN5Print5printEPKc>:
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    16c0:	0c 94 4b 0b 	jmp	0x1696	; 0x1696 <_ZN5Print5writeEPKc>

000016c4 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    16c4:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    16c6:	91 8d       	ldd	r25, Z+25	; 0x19
    16c8:	22 8d       	ldd	r18, Z+26	; 0x1a
    16ca:	89 2f       	mov	r24, r25
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	80 5c       	subi	r24, 0xC0	; 192
    16d0:	9f 4f       	sbci	r25, 0xFF	; 255
    16d2:	82 1b       	sub	r24, r18
    16d4:	91 09       	sbc	r25, r1
}
    16d6:	8f 73       	andi	r24, 0x3F	; 63
    16d8:	99 27       	eor	r25, r25
    16da:	08 95       	ret

000016dc <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    16dc:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    16de:	91 8d       	ldd	r25, Z+25	; 0x19
    16e0:	82 8d       	ldd	r24, Z+26	; 0x1a
    16e2:	98 17       	cp	r25, r24
    16e4:	31 f0       	breq	.+12     	; 0x16f2 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    16e6:	82 8d       	ldd	r24, Z+26	; 0x1a
    16e8:	e8 0f       	add	r30, r24
    16ea:	f1 1d       	adc	r31, r1
    16ec:	85 8d       	ldd	r24, Z+29	; 0x1d
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    16f2:	8f ef       	ldi	r24, 0xFF	; 255
    16f4:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    16f6:	08 95       	ret

000016f8 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    16f8:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    16fa:	91 8d       	ldd	r25, Z+25	; 0x19
    16fc:	82 8d       	ldd	r24, Z+26	; 0x1a
    16fe:	98 17       	cp	r25, r24
    1700:	61 f0       	breq	.+24     	; 0x171a <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1702:	82 8d       	ldd	r24, Z+26	; 0x1a
    1704:	df 01       	movw	r26, r30
    1706:	a8 0f       	add	r26, r24
    1708:	b1 1d       	adc	r27, r1
    170a:	5d 96       	adiw	r26, 0x1d	; 29
    170c:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    170e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1710:	9f 5f       	subi	r25, 0xFF	; 255
    1712:	9f 73       	andi	r25, 0x3F	; 63
    1714:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    171a:	8f ef       	ldi	r24, 0xFF	; 255
    171c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    171e:	08 95       	ret

00001720 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    1720:	fc 01       	movw	r30, r24
    1722:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    1724:	44 8d       	ldd	r20, Z+28	; 0x1c
    1726:	25 2f       	mov	r18, r21
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	84 2f       	mov	r24, r20
    172c:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    172e:	82 1b       	sub	r24, r18
    1730:	93 0b       	sbc	r25, r19
    1732:	54 17       	cp	r21, r20
    1734:	10 f0       	brcs	.+4      	; 0x173a <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    1736:	cf 96       	adiw	r24, 0x3f	; 63
    1738:	08 95       	ret
  return tail - head - 1;
    173a:	01 97       	sbiw	r24, 0x01	; 1
}
    173c:	08 95       	ret

0000173e <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    173e:	89 ee       	ldi	r24, 0xE9	; 233
    1740:	9a e0       	ldi	r25, 0x0A	; 10
    1742:	89 2b       	or	r24, r25
    1744:	49 f0       	breq	.+18     	; 0x1758 <_Z14serialEventRunv+0x1a>
    1746:	80 e0       	ldi	r24, 0x00	; 0
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	89 2b       	or	r24, r25
    174c:	29 f0       	breq	.+10     	; 0x1758 <_Z14serialEventRunv+0x1a>
    174e:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <_Z17Serial0_availablev>
    1752:	81 11       	cpse	r24, r1
    1754:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    1758:	08 95       	ret

0000175a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    175a:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    175c:	84 8d       	ldd	r24, Z+28	; 0x1c
    175e:	df 01       	movw	r26, r30
    1760:	a8 0f       	add	r26, r24
    1762:	b1 1d       	adc	r27, r1
    1764:	a3 5a       	subi	r26, 0xA3	; 163
    1766:	bf 4f       	sbci	r27, 0xFF	; 255
    1768:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    176a:	84 8d       	ldd	r24, Z+28	; 0x1c
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	01 96       	adiw	r24, 0x01	; 1
    1770:	8f 73       	andi	r24, 0x3F	; 63
    1772:	99 27       	eor	r25, r25
    1774:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1776:	a6 89       	ldd	r26, Z+22	; 0x16
    1778:	b7 89       	ldd	r27, Z+23	; 0x17
    177a:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    177c:	a0 89       	ldd	r26, Z+16	; 0x10
    177e:	b1 89       	ldd	r27, Z+17	; 0x11
    1780:	8c 91       	ld	r24, X
    1782:	83 70       	andi	r24, 0x03	; 3
    1784:	80 64       	ori	r24, 0x40	; 64
    1786:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    1788:	93 8d       	ldd	r25, Z+27	; 0x1b
    178a:	84 8d       	ldd	r24, Z+28	; 0x1c
    178c:	98 13       	cpse	r25, r24
    178e:	06 c0       	rjmp	.+12     	; 0x179c <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1790:	02 88       	ldd	r0, Z+18	; 0x12
    1792:	f3 89       	ldd	r31, Z+19	; 0x13
    1794:	e0 2d       	mov	r30, r0
    1796:	80 81       	ld	r24, Z
    1798:	8f 7d       	andi	r24, 0xDF	; 223
    179a:	80 83       	st	Z, r24
    179c:	08 95       	ret

0000179e <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    179e:	ef 92       	push	r14
    17a0:	ff 92       	push	r15
    17a2:	0f 93       	push	r16
    17a4:	1f 93       	push	r17
    17a6:	cf 93       	push	r28
    17a8:	df 93       	push	r29
    17aa:	ec 01       	movw	r28, r24
  _written = true;
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    17b0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    17b2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    17b4:	98 13       	cpse	r25, r24
    17b6:	05 c0       	rjmp	.+10     	; 0x17c2 <_ZN14HardwareSerial5writeEh+0x24>
    17b8:	e8 89       	ldd	r30, Y+16	; 0x10
    17ba:	f9 89       	ldd	r31, Y+17	; 0x11
    17bc:	80 81       	ld	r24, Z
    17be:	85 fd       	sbrc	r24, 5
    17c0:	26 c0       	rjmp	.+76     	; 0x180e <_ZN14HardwareSerial5writeEh+0x70>
    17c2:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    17c4:	0b 8d       	ldd	r16, Y+27	; 0x1b
    17c6:	10 e0       	ldi	r17, 0x00	; 0
    17c8:	0f 5f       	subi	r16, 0xFF	; 255
    17ca:	1f 4f       	sbci	r17, 0xFF	; 255
    17cc:	0f 73       	andi	r16, 0x3F	; 63
    17ce:	11 27       	eor	r17, r17
    17d0:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    17d2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    17d4:	e8 12       	cpse	r14, r24
    17d6:	0c c0       	rjmp	.+24     	; 0x17f0 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    17d8:	0f b6       	in	r0, 0x3f	; 63
    17da:	07 fc       	sbrc	r0, 7
    17dc:	fa cf       	rjmp	.-12     	; 0x17d2 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    17de:	e8 89       	ldd	r30, Y+16	; 0x10
    17e0:	f9 89       	ldd	r31, Y+17	; 0x11
    17e2:	80 81       	ld	r24, Z
    17e4:	85 ff       	sbrs	r24, 5
    17e6:	f5 cf       	rjmp	.-22     	; 0x17d2 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    17e8:	ce 01       	movw	r24, r28
    17ea:	0e 94 ad 0b 	call	0x175a	; 0x175a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    17ee:	f1 cf       	rjmp	.-30     	; 0x17d2 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    17f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17f2:	fe 01       	movw	r30, r28
    17f4:	e8 0f       	add	r30, r24
    17f6:	f1 1d       	adc	r31, r1
    17f8:	e3 5a       	subi	r30, 0xA3	; 163
    17fa:	ff 4f       	sbci	r31, 0xFF	; 255
    17fc:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    17fe:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1800:	f8 94       	cli
    _tx_buffer_head = i;
    1802:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    1804:	ea 89       	ldd	r30, Y+18	; 0x12
    1806:	fb 89       	ldd	r31, Y+19	; 0x13
    1808:	80 81       	ld	r24, Z
    180a:	80 62       	ori	r24, 0x20	; 32
    180c:	0a c0       	rjmp	.+20     	; 0x1822 <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    180e:	9f b7       	in	r25, 0x3f	; 63
    1810:	f8 94       	cli
      *_udr = c;
    1812:	ee 89       	ldd	r30, Y+22	; 0x16
    1814:	ff 89       	ldd	r31, Y+23	; 0x17
    1816:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1818:	e8 89       	ldd	r30, Y+16	; 0x10
    181a:	f9 89       	ldd	r31, Y+17	; 0x11
    181c:	80 81       	ld	r24, Z
    181e:	83 70       	andi	r24, 0x03	; 3
    1820:	80 64       	ori	r24, 0x40	; 64
    1822:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1824:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	df 91       	pop	r29
    182c:	cf 91       	pop	r28
    182e:	1f 91       	pop	r17
    1830:	0f 91       	pop	r16
    1832:	ff 90       	pop	r15
    1834:	ef 90       	pop	r14
    1836:	08 95       	ret

00001838 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1838:	cf 93       	push	r28
    183a:	df 93       	push	r29
    183c:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    183e:	88 8d       	ldd	r24, Y+24	; 0x18
    1840:	88 23       	and	r24, r24
    1842:	c9 f0       	breq	.+50     	; 0x1876 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1844:	ea 89       	ldd	r30, Y+18	; 0x12
    1846:	fb 89       	ldd	r31, Y+19	; 0x13
    1848:	80 81       	ld	r24, Z
    184a:	85 fd       	sbrc	r24, 5
    184c:	05 c0       	rjmp	.+10     	; 0x1858 <_ZN14HardwareSerial5flushEv+0x20>
    184e:	a8 89       	ldd	r26, Y+16	; 0x10
    1850:	b9 89       	ldd	r27, Y+17	; 0x11
    1852:	8c 91       	ld	r24, X
    1854:	86 fd       	sbrc	r24, 6
    1856:	0f c0       	rjmp	.+30     	; 0x1876 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1858:	0f b6       	in	r0, 0x3f	; 63
    185a:	07 fc       	sbrc	r0, 7
    185c:	f5 cf       	rjmp	.-22     	; 0x1848 <_ZN14HardwareSerial5flushEv+0x10>
    185e:	80 81       	ld	r24, Z
    1860:	85 ff       	sbrs	r24, 5
    1862:	f2 cf       	rjmp	.-28     	; 0x1848 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1864:	a8 89       	ldd	r26, Y+16	; 0x10
    1866:	b9 89       	ldd	r27, Y+17	; 0x11
    1868:	8c 91       	ld	r24, X
    186a:	85 ff       	sbrs	r24, 5
    186c:	ed cf       	rjmp	.-38     	; 0x1848 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    186e:	ce 01       	movw	r24, r28
    1870:	0e 94 ad 0b 	call	0x175a	; 0x175a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1874:	e7 cf       	rjmp	.-50     	; 0x1844 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1876:	df 91       	pop	r29
    1878:	cf 91       	pop	r28
    187a:	08 95       	ret

0000187c <__tablejump2__>:
    187c:	ee 0f       	add	r30, r30
    187e:	ff 1f       	adc	r31, r31
    1880:	05 90       	lpm	r0, Z+
    1882:	f4 91       	lpm	r31, Z
    1884:	e0 2d       	mov	r30, r0
    1886:	09 94       	ijmp

00001888 <_exit>:
    1888:	f8 94       	cli

0000188a <__stop_program>:
    188a:	ff cf       	rjmp	.-2      	; 0x188a <__stop_program>
